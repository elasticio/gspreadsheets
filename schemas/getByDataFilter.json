{
  "in": {
    "GetSpreadsheetByDataFilterRequest": {
      "description": "The request for retrieving a Spreadsheet.",
      "type": "object",
      "properties": {
        "includeGridData": {
          "description": "True if grid data should be returned.\nThis parameter is ignored if a field mask was set in the request.",
          "type": "boolean"
        },
        "dataFilters": {
          "description": "The DataFilters used to select which ranges to retrieve from\nthe spreadsheet.",
          "type": "array",
          "properties": {
            "DataFilter": {
              "type": "object",
              "properties": {
                "a1Range": {
                  "description": "Selects data that matches the specified A1 range.",
                  "type": "string"
                },
                "gridRange": {
                  "description": "Selects data that matches the range described by the GridRange.",
                  "GridRange": {
                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                    "type": "object",
                    "properties": {
                      "endRowIndex": {
                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "endColumnIndex": {
                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "startRowIndex": {
                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "startColumnIndex": {
                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "sheetId": {
                        "description": "The sheet this range is on.",
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "id": "GridRange"
                  }
                },
                "developerMetadataLookup": {
                  "description": "Selects data associated with the developer metadata matching the criteria\ndescribed by this DeveloperMetadataLookup.",
                  "DeveloperMetadataLookup": {
                    "type": "object",
                    "properties": {
                      "metadataLocation": {
                        "description": "Limits the selected developer metadata to those entries associated with\nthe specified location.  This field either matches exact locations or all\nintersecting locations according the specified\nlocationMatchingStrategy.",
                        "DeveloperMetadataLocation": {
                          "description": "A location where metadata may be associated in a spreadsheet.",
                          "type": "object",
                          "properties": {
                            "dimensionRange": {
                              "description": "Represents the row or column when metadata is associated with\na dimension. The specified DimensionRange must represent a single row\nor column; it cannot be unbounded or span multiple rows or columns.",
                              "DimensionRange": {
                                "description": "A range along a single dimension on a sheet.\nAll indexes are zero-based.\nIndexes are half open: the start index is inclusive\nand the end index is exclusive.\nMissing indexes indicate the range is unbounded on that side.",
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "description": "The dimension of the span.",
                                    "type": "string",
                                    "enumDescriptions": [
                                      "The default value, do not use.",
                                      "Operates on the rows of a sheet.",
                                      "Operates on the columns of a sheet."
                                    ],
                                    "enum": [
                                      "DIMENSION_UNSPECIFIED",
                                      "ROWS",
                                      "COLUMNS"
                                    ]
                                  },
                                  "startIndex": {
                                    "description": "The start (inclusive) of the span, or not set if unbounded.",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "endIndex": {
                                    "type": "integer",
                                    "description": "The end (exclusive) of the span, or not set if unbounded.",
                                    "format": "int32"
                                  },
                                  "sheetId": {
                                    "description": "The sheet this span is on.",
                                    "format": "int32",
                                    "type": "integer"
                                  }
                                },
                                "id": "DimensionRange"
                              }
                            },
                            "spreadsheet": {
                              "description": "True when metadata is associated with an entire spreadsheet.",
                              "type": "boolean"
                            },
                            "sheetId": {
                              "description": "The ID of the sheet when metadata is associated with an entire sheet.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "locationType": {
                              "enumDescriptions": [
                                "Default value.",
                                "Developer metadata associated on an entire row dimension.",
                                "Developer metadata associated on an entire column dimension.",
                                "Developer metadata associated on an entire sheet.",
                                "Developer metadata associated on the entire spreadsheet."
                              ],
                              "enum": [
                                "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                "ROW",
                                "COLUMN",
                                "SHEET",
                                "SPREADSHEET"
                              ],
                              "description": "The type of location this object represents.  This field is read-only.",
                              "type": "string"
                            }
                          },
                          "id": "DeveloperMetadataLocation"
                        }
                      },
                      "locationMatchingStrategy": {
                        "enumDescriptions": [
                          "Default value. This value must not be used.",
                          "Indicates that a specified location should be matched exactly.  For\nexample, if row three were specified as a location this matching strategy\nwould only match developer metadata also associated on row three.  Metadata\nassociated on other locations would not be considered.",
                          "Indicates that a specified location should match that exact location as\nwell as any intersecting locations.  For example, if row three were\nspecified as a location this matching strategy would match developer\nmetadata associated on row three as well as metadata associated on\nlocations that intersect row three.  If, for instance, there was developer\nmetadata associated on column B, this matching strategy would also match\nthat location because column B intersects row three."
                        ],
                        "enum": [
                          "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",
                          "EXACT_LOCATION",
                          "INTERSECTING_LOCATION"
                        ],
                        "description": "Determines how this lookup matches the location.  If this field is\nspecified as EXACT, only developer metadata associated on the exact\nlocation specified is matched.  If this field is specified to INTERSECTING,\ndeveloper metadata associated on intersecting locations is also\nmatched.  If left unspecified, this field assumes a default value of\nINTERSECTING.\nIf this field is specified, a metadataLocation\nmust also be specified.",
                        "type": "string"
                      },
                      "locationType": {
                        "description": "Limits the selected developer metadata to those entries which are\nassociated with locations of the specified type.  For example, when this\nfield is specified as ROW this lookup\nonly considers developer metadata associated on rows.  If the field is left\nunspecified, all location types are considered.  This field cannot be\nspecified as SPREADSHEET when\nthe locationMatchingStrategy\nis specified as INTERSECTING or when the\nmetadataLocation is specified as a\nnon-spreadsheet location: spreadsheet metadata cannot intersect any other\ndeveloper metadata location.  This field also must be left unspecified when\nthe locationMatchingStrategy\nis specified as EXACT.",
                        "type": "string",
                        "enumDescriptions": [
                          "Default value.",
                          "Developer metadata associated on an entire row dimension.",
                          "Developer metadata associated on an entire column dimension.",
                          "Developer metadata associated on an entire sheet.",
                          "Developer metadata associated on the entire spreadsheet."
                        ],
                        "enum": [
                          "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                          "ROW",
                          "COLUMN",
                          "SHEET",
                          "SPREADSHEET"
                        ]
                      },
                      "metadataKey": {
                        "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_key.",
                        "type": "string"
                      },
                      "metadataId": {
                        "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_id.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "visibility": {
                        "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.visibility.  If left unspecified, all developer\nmetadata visibile to the requesting project is considered.",
                        "type": "string",
                        "enumDescriptions": [
                          "Default value.",
                          "Document-visible metadata is accessible from any developer project with\naccess to the document.",
                          "Project-visible metadata is only visible to and accessible by the developer\nproject that created the metadata."
                        ],
                        "enum": [
                          "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                          "DOCUMENT",
                          "PROJECT"
                        ]
                      },
                      "metadataValue": {
                        "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_value.",
                        "type": "string"
                      }
                    },
                    "id": "DeveloperMetadataLookup",
                    "description": "Selects DeveloperMetadata that matches all of the specified fields.  For\nexample, if only a metadata ID is specified this considers the\nDeveloperMetadata with that particular unique ID. If a metadata key is\nspecified, this considers all developer metadata with that key.  If a\nkey, visibility, and location type are all specified, this considers all\ndeveloper metadata with that key and visibility that are associated with a\nlocation of that type.  In general, this\nselects all DeveloperMetadata that matches the intersection of all the\nspecified fields; any field or combination of fields may be specified."
                  }
                }
              },
              "id": "DataFilter",
              "description": "Filter that describes what data should be selected or returned from a\nrequest."
            }
          }
        }
      },
      "id": "GetSpreadsheetByDataFilterRequest"
    }
  },
  "out": {
    "Spreadsheet": {
      "type": "object",
      "properties": {
        "properties": {
          "description": "Overall properties of a spreadsheet.",
          "SpreadsheetProperties": {
            "type": "object",
            "properties": {
              "locale": {
                "description": "The locale of the spreadsheet in one of the following formats:\n\n* an ISO 639-1 language code such as `en`\n\n* an ISO 639-2 language code such as `fil`, if no 639-1 code exists\n\n* a combination of the ISO language code and country code, such as `en_US`\n\nNote: when updating this field, not all locales/languages are supported.",
                "type": "string"
              },
              "iterativeCalculationSettings": {
                "description": "Determines whether and how circular references are resolved with iterative\ncalculation.  Absence of this field means that circular references will\nresult in calculation errors.",
                "IterativeCalculationSettings": {
                  "description": "Settings to control how circular dependencies are resolved with iterative\ncalculation.",
                  "type": "object",
                  "properties": {
                    "convergenceThreshold": {
                      "type": "number",
                      "description": "When iterative calculation is enabled and successive results differ by\nless than this threshold value, the calculation rounds stop.",
                      "format": "double"
                    },
                    "maxIterations": {
                      "description": "When iterative calculation is enabled, the maximum number of calculation\nrounds to perform.",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "id": "IterativeCalculationSettings"
                }
              },
              "defaultFormat": {
                "description": "The default format of all cells in the spreadsheet.\nCellData.effectiveFormat will not be set if\nthe cell's format is equal to this default format. This field is read-only.",
                "CellFormat": {
                  "description": "The format of a cell.",
                  "type": "object",
                  "properties": {
                    "padding": {
                      "description": "The padding of the cell.",
                      "Padding": {
                        "id": "Padding",
                        "description": "The amount of padding around the cell, in pixels.\nWhen updating padding, every field must be specified.",
                        "type": "object",
                        "properties": {
                          "top": {
                            "type": "integer",
                            "description": "The top padding of the cell.",
                            "format": "int32"
                          },
                          "left": {
                            "description": "The left padding of the cell.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "right": {
                            "description": "The right padding of the cell.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "bottom": {
                            "description": "The bottom padding of the cell.",
                            "format": "int32",
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "verticalAlignment": {
                      "enumDescriptions": [
                        "The vertical alignment is not specified.  Do not use this.",
                        "The text is explicitly aligned to the top of the cell.",
                        "The text is explicitly aligned to the middle of the cell.",
                        "The text is explicitly aligned to the bottom of the cell."
                      ],
                      "enum": [
                        "VERTICAL_ALIGN_UNSPECIFIED",
                        "TOP",
                        "MIDDLE",
                        "BOTTOM"
                      ],
                      "description": "The vertical alignment of the value in the cell.",
                      "type": "string"
                    },
                    "borders": {
                      "description": "The borders of the cell.",
                      "Borders": {
                        "description": "The borders of the cell.",
                        "type": "object",
                        "properties": {
                          "left": {
                            "description": "The left border of the cell.",
                            "Border": {
                              "description": "A border along a cell.",
                              "type": "object",
                              "properties": {
                                "width": {
                                  "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "style": {
                                  "description": "The style of the border.",
                                  "type": "string",
                                  "enumDescriptions": [
                                    "The style is not specified. Do not use this.",
                                    "The border is dotted.",
                                    "The border is dashed.",
                                    "The border is a thin solid line.",
                                    "The border is a medium solid line.",
                                    "The border is a thick solid line.",
                                    "No border.\nUsed only when updating a border in order to erase it.",
                                    "The border is two solid lines."
                                  ],
                                  "enum": [
                                    "STYLE_UNSPECIFIED",
                                    "DOTTED",
                                    "DASHED",
                                    "SOLID",
                                    "SOLID_MEDIUM",
                                    "SOLID_THICK",
                                    "NONE",
                                    "DOUBLE"
                                  ]
                                },
                                "color": {
                                  "description": "The color of the border.",
                                  "Color": {
                                    "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                    "type": "object",
                                    "properties": {
                                      "red": {
                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                        "format": "float",
                                        "type": "number"
                                      },
                                      "green": {
                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                        "format": "float",
                                        "type": "number"
                                      },
                                      "blue": {
                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                        "format": "float",
                                        "type": "number"
                                      },
                                      "alpha": {
                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                        "format": "float",
                                        "type": "number"
                                      }
                                    },
                                    "id": "Color"
                                  }
                                }
                              },
                              "id": "Border"
                            }
                          },
                          "right": {
                            "description": "The right border of the cell.",
                            "Border": {
                              "description": "A border along a cell.",
                              "type": "object",
                              "properties": {
                                "width": {
                                  "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "style": {
                                  "description": "The style of the border.",
                                  "type": "string",
                                  "enumDescriptions": [
                                    "The style is not specified. Do not use this.",
                                    "The border is dotted.",
                                    "The border is dashed.",
                                    "The border is a thin solid line.",
                                    "The border is a medium solid line.",
                                    "The border is a thick solid line.",
                                    "No border.\nUsed only when updating a border in order to erase it.",
                                    "The border is two solid lines."
                                  ],
                                  "enum": [
                                    "STYLE_UNSPECIFIED",
                                    "DOTTED",
                                    "DASHED",
                                    "SOLID",
                                    "SOLID_MEDIUM",
                                    "SOLID_THICK",
                                    "NONE",
                                    "DOUBLE"
                                  ]
                                },
                                "color": {
                                  "description": "The color of the border.",
                                  "Color": {
                                    "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                    "type": "object",
                                    "properties": {
                                      "red": {
                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                        "format": "float",
                                        "type": "number"
                                      },
                                      "green": {
                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                        "format": "float",
                                        "type": "number"
                                      },
                                      "blue": {
                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                        "format": "float",
                                        "type": "number"
                                      },
                                      "alpha": {
                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                        "format": "float",
                                        "type": "number"
                                      }
                                    },
                                    "id": "Color"
                                  }
                                }
                              },
                              "id": "Border"
                            }
                          },
                          "bottom": {
                            "description": "The bottom border of the cell.",
                            "Border": {
                              "description": "A border along a cell.",
                              "type": "object",
                              "properties": {
                                "width": {
                                  "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "style": {
                                  "description": "The style of the border.",
                                  "type": "string",
                                  "enumDescriptions": [
                                    "The style is not specified. Do not use this.",
                                    "The border is dotted.",
                                    "The border is dashed.",
                                    "The border is a thin solid line.",
                                    "The border is a medium solid line.",
                                    "The border is a thick solid line.",
                                    "No border.\nUsed only when updating a border in order to erase it.",
                                    "The border is two solid lines."
                                  ],
                                  "enum": [
                                    "STYLE_UNSPECIFIED",
                                    "DOTTED",
                                    "DASHED",
                                    "SOLID",
                                    "SOLID_MEDIUM",
                                    "SOLID_THICK",
                                    "NONE",
                                    "DOUBLE"
                                  ]
                                },
                                "color": {
                                  "description": "The color of the border.",
                                  "Color": {
                                    "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                    "type": "object",
                                    "properties": {
                                      "red": {
                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                        "format": "float",
                                        "type": "number"
                                      },
                                      "green": {
                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                        "format": "float",
                                        "type": "number"
                                      },
                                      "blue": {
                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                        "format": "float",
                                        "type": "number"
                                      },
                                      "alpha": {
                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                        "format": "float",
                                        "type": "number"
                                      }
                                    },
                                    "id": "Color"
                                  }
                                }
                              },
                              "id": "Border"
                            }
                          },
                          "top": {
                            "description": "The top border of the cell.",
                            "Border": {
                              "description": "A border along a cell.",
                              "type": "object",
                              "properties": {
                                "width": {
                                  "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "style": {
                                  "description": "The style of the border.",
                                  "type": "string",
                                  "enumDescriptions": [
                                    "The style is not specified. Do not use this.",
                                    "The border is dotted.",
                                    "The border is dashed.",
                                    "The border is a thin solid line.",
                                    "The border is a medium solid line.",
                                    "The border is a thick solid line.",
                                    "No border.\nUsed only when updating a border in order to erase it.",
                                    "The border is two solid lines."
                                  ],
                                  "enum": [
                                    "STYLE_UNSPECIFIED",
                                    "DOTTED",
                                    "DASHED",
                                    "SOLID",
                                    "SOLID_MEDIUM",
                                    "SOLID_THICK",
                                    "NONE",
                                    "DOUBLE"
                                  ]
                                },
                                "color": {
                                  "description": "The color of the border.",
                                  "Color": {
                                    "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                    "type": "object",
                                    "properties": {
                                      "red": {
                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                        "format": "float",
                                        "type": "number"
                                      },
                                      "green": {
                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                        "format": "float",
                                        "type": "number"
                                      },
                                      "blue": {
                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                        "format": "float",
                                        "type": "number"
                                      },
                                      "alpha": {
                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                        "format": "float",
                                        "type": "number"
                                      }
                                    },
                                    "id": "Color"
                                  }
                                }
                              },
                              "id": "Border"
                            }
                          }
                        },
                        "id": "Borders"
                      }
                    },
                    "textDirection": {
                      "description": "The direction of the text in the cell.",
                      "type": "string",
                      "enumDescriptions": [
                        "The text direction is not specified. Do not use this.",
                        "The text direction of left-to-right was set by the user.",
                        "The text direction of right-to-left was set by the user."
                      ],
                      "enum": [
                        "TEXT_DIRECTION_UNSPECIFIED",
                        "LEFT_TO_RIGHT",
                        "RIGHT_TO_LEFT"
                      ]
                    },
                    "wrapStrategy": {
                      "enumDescriptions": [
                        "The default value, do not use.",
                        "Lines that are longer than the cell width will be written in the next\ncell over, so long as that cell is empty. If the next cell over is\nnon-empty, this behaves the same as CLIP. The text will never wrap\nto the next line unless the user manually inserts a new line.\nExample:\n\n    | First sentence. |\n    | Manual newline that is very long. <- Text continues into next cell\n    | Next newline.   |",
                        "This wrap strategy represents the old Google Sheets wrap strategy where\nwords that are longer than a line are clipped rather than broken. This\nstrategy is not supported on all platforms and is being phased out.\nExample:\n\n    | Cell has a |\n    | loooooooooo| <- Word is clipped.\n    | word.      |",
                        "Lines that are longer than the cell width will be clipped.\nThe text will never wrap to the next line unless the user manually\ninserts a new line.\nExample:\n\n    | First sentence. |\n    | Manual newline t| <- Text is clipped\n    | Next newline.   |",
                        "Words that are longer than a line are wrapped at the character level\nrather than clipped.\nExample:\n\n    | Cell has a |\n    | loooooooooo| <- Word is broken.\n    | ong word.  |"
                      ],
                      "enum": [
                        "WRAP_STRATEGY_UNSPECIFIED",
                        "OVERFLOW_CELL",
                        "LEGACY_WRAP",
                        "CLIP",
                        "WRAP"
                      ],
                      "description": "The wrap strategy for the value in the cell.",
                      "type": "string"
                    },
                    "textRotation": {
                      "description": "The rotation applied to text in a cell",
                      "TextRotation": {
                        "description": "The rotation applied to text in a cell.",
                        "type": "object",
                        "properties": {
                          "angle": {
                            "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the\ncounterclockwise direction, whereas for RTL they are in the clockwise\ndirection",
                            "format": "int32",
                            "type": "integer"
                          },
                          "vertical": {
                            "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
                            "type": "boolean"
                          }
                        },
                        "id": "TextRotation"
                      }
                    },
                    "numberFormat": {
                      "description": "A format describing how number values should be represented to the user.",
                      "NumberFormat": {
                        "description": "The number format of a cell.",
                        "type": "object",
                        "properties": {
                          "type": {
                            "enum": [
                              "NUMBER_FORMAT_TYPE_UNSPECIFIED",
                              "TEXT",
                              "NUMBER",
                              "PERCENT",
                              "CURRENCY",
                              "DATE",
                              "TIME",
                              "DATE_TIME",
                              "SCIENTIFIC"
                            ],
                            "description": "The type of the number format.\nWhen writing, this field must be set.",
                            "type": "string",
                            "enumDescriptions": [
                              "The number format is not specified\nand is based on the contents of the cell.\nDo not explicitly use this.",
                              "Text formatting, e.g `1000.12`",
                              "Number formatting, e.g, `1,000.12`",
                              "Percent formatting, e.g `10.12%`",
                              "Currency formatting, e.g `$1,000.12`",
                              "Date formatting, e.g `9/26/2008`",
                              "Time formatting, e.g `3:59:00 PM`",
                              "Date+Time formatting, e.g `9/26/08 15:59:00`",
                              "Scientific number formatting, e.g `1.01E+03`"
                            ]
                          },
                          "pattern": {
                            "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for\nmore information about the supported patterns.",
                            "type": "string"
                          }
                        },
                        "id": "NumberFormat"
                      }
                    },
                    "hyperlinkDisplayType": {
                      "enum": [
                        "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
                        "LINKED",
                        "PLAIN_TEXT"
                      ],
                      "description": "How a hyperlink, if it exists, should be displayed in the cell.",
                      "type": "string",
                      "enumDescriptions": [
                        "The default value: the hyperlink is rendered. Do not use this.",
                        "A hyperlink should be explicitly rendered.",
                        "A hyperlink should not be rendered."
                      ]
                    },
                    "horizontalAlignment": {
                      "description": "The horizontal alignment of the value in the cell.",
                      "type": "string",
                      "enumDescriptions": [
                        "The horizontal alignment is not specified. Do not use this.",
                        "The text is explicitly aligned to the left of the cell.",
                        "The text is explicitly aligned to the center of the cell.",
                        "The text is explicitly aligned to the right of the cell."
                      ],
                      "enum": [
                        "HORIZONTAL_ALIGN_UNSPECIFIED",
                        "LEFT",
                        "CENTER",
                        "RIGHT"
                      ]
                    },
                    "textFormat": {
                      "description": "The format of the text in the cell (unless overridden by a format run).",
                      "TextFormat": {
                        "id": "TextFormat",
                        "description": "The format of a run of text in a cell.\nAbsent values indicate that the field isn't specified.",
                        "type": "object",
                        "properties": {
                          "italic": {
                            "description": "True if the text is italicized.",
                            "type": "boolean"
                          },
                          "strikethrough": {
                            "description": "True if the text has a strikethrough.",
                            "type": "boolean"
                          },
                          "fontSize": {
                            "description": "The size of the font.",
                            "format": "int32",
                            "type": "integer"
                          },
                          "underline": {
                            "description": "True if the text is underlined.",
                            "type": "boolean"
                          },
                          "foregroundColor": {
                            "description": "The foreground color of the text.",
                            "Color": {
                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                              "type": "object",
                              "properties": {
                                "red": {
                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                  "format": "float",
                                  "type": "number"
                                },
                                "green": {
                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                  "format": "float",
                                  "type": "number"
                                },
                                "blue": {
                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                  "format": "float",
                                  "type": "number"
                                },
                                "alpha": {
                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                  "format": "float",
                                  "type": "number"
                                }
                              },
                              "id": "Color"
                            }
                          },
                          "bold": {
                            "description": "True if the text is bold.",
                            "type": "boolean"
                          },
                          "fontFamily": {
                            "description": "The font family.",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "backgroundColor": {
                      "description": "The background color of the cell.",
                      "Color": {
                        "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                        "type": "object",
                        "properties": {
                          "red": {
                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                            "format": "float",
                            "type": "number"
                          },
                          "green": {
                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                            "format": "float",
                            "type": "number"
                          },
                          "blue": {
                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                            "format": "float",
                            "type": "number"
                          },
                          "alpha": {
                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                            "format": "float",
                            "type": "number"
                          }
                        },
                        "id": "Color"
                      }
                    }
                  },
                  "id": "CellFormat"
                }
              },
              "autoRecalc": {
                "description": "The amount of time to wait before volatile functions are recalculated.",
                "type": "string",
                "enumDescriptions": [
                  "Default value. This value must not be used.",
                  "Volatile functions are updated on every change.",
                  "Volatile functions are updated on every change and every minute.",
                  "Volatile functions are updated on every change and hourly."
                ],
                "enum": [
                  "RECALCULATION_INTERVAL_UNSPECIFIED",
                  "ON_CHANGE",
                  "MINUTE",
                  "HOUR"
                ]
              },
              "title": {
                "description": "The title of the spreadsheet.",
                "type": "string"
              },
              "timeZone": {
                "description": "The time zone of the spreadsheet, in CLDR format such as\n`America/New_York`. If the time zone isn't recognized, this may\nbe a custom time zone such as `GMT-07:00`.",
                "type": "string"
              }
            },
            "id": "SpreadsheetProperties",
            "description": "Properties of a spreadsheet."
          }
        },
        "spreadsheetId": {
          "description": "The ID of the spreadsheet.\nThis field is read-only.",
          "type": "string"
        },
        "namedRanges": {
          "description": "The named ranges defined in a spreadsheet.",
          "type": "array",
          "properties": {
            "NamedRange": {
              "description": "A named range.",
              "type": "object",
              "properties": {
                "namedRangeId": {
                  "description": "The ID of the named range.",
                  "type": "string"
                },
                "range": {
                  "description": "The range this represents.",
                  "GridRange": {
                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                    "type": "object",
                    "properties": {
                      "endRowIndex": {
                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "endColumnIndex": {
                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "startRowIndex": {
                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "startColumnIndex": {
                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "sheetId": {
                        "description": "The sheet this range is on.",
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "id": "GridRange"
                  }
                },
                "name": {
                  "description": "The name of the named range.",
                  "type": "string"
                }
              },
              "id": "NamedRange"
            }
          }
        },
        "developerMetadata": {
          "description": "The developer metadata associated with a spreadsheet.",
          "type": "array",
          "properties": {
            "DeveloperMetadata": {
              "id": "DeveloperMetadata",
              "description": "Developer metadata associated with a location or object in a spreadsheet.\nDeveloper metadata may be used to associate arbitrary data with various\nparts of a spreadsheet and will remain associated at those locations as they\nmove around and the spreadsheet is edited.  For example, if developer\nmetadata is associated with row 5 and another row is then subsequently\ninserted above row 5, that original metadata will still be associated with\nthe row it was first associated with (what is now row 6). If the associated\nobject is deleted its metadata is deleted too.",
              "type": "object",
              "properties": {
                "metadataValue": {
                  "description": "Data associated with the metadata's key.",
                  "type": "string"
                },
                "metadataKey": {
                  "description": "The metadata key. There may be multiple metadata in a spreadsheet with the\nsame key.  Developer metadata must always have a key specified.",
                  "type": "string"
                },
                "metadataId": {
                  "description": "The spreadsheet-scoped unique ID that identifies the metadata. IDs may be\nspecified when metadata is created, otherwise one will be randomly\ngenerated and assigned. Must be positive.",
                  "format": "int32",
                  "type": "integer"
                },
                "location": {
                  "description": "The location where the metadata is associated.",
                  "DeveloperMetadataLocation": {
                    "description": "A location where metadata may be associated in a spreadsheet.",
                    "type": "object",
                    "properties": {
                      "dimensionRange": {
                        "description": "Represents the row or column when metadata is associated with\na dimension. The specified DimensionRange must represent a single row\nor column; it cannot be unbounded or span multiple rows or columns.",
                        "DimensionRange": {
                          "description": "A range along a single dimension on a sheet.\nAll indexes are zero-based.\nIndexes are half open: the start index is inclusive\nand the end index is exclusive.\nMissing indexes indicate the range is unbounded on that side.",
                          "type": "object",
                          "properties": {
                            "dimension": {
                              "description": "The dimension of the span.",
                              "type": "string",
                              "enumDescriptions": [
                                "The default value, do not use.",
                                "Operates on the rows of a sheet.",
                                "Operates on the columns of a sheet."
                              ],
                              "enum": [
                                "DIMENSION_UNSPECIFIED",
                                "ROWS",
                                "COLUMNS"
                              ]
                            },
                            "startIndex": {
                              "description": "The start (inclusive) of the span, or not set if unbounded.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "endIndex": {
                              "type": "integer",
                              "description": "The end (exclusive) of the span, or not set if unbounded.",
                              "format": "int32"
                            },
                            "sheetId": {
                              "description": "The sheet this span is on.",
                              "format": "int32",
                              "type": "integer"
                            }
                          },
                          "id": "DimensionRange"
                        }
                      },
                      "spreadsheet": {
                        "description": "True when metadata is associated with an entire spreadsheet.",
                        "type": "boolean"
                      },
                      "sheetId": {
                        "description": "The ID of the sheet when metadata is associated with an entire sheet.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "locationType": {
                        "enumDescriptions": [
                          "Default value.",
                          "Developer metadata associated on an entire row dimension.",
                          "Developer metadata associated on an entire column dimension.",
                          "Developer metadata associated on an entire sheet.",
                          "Developer metadata associated on the entire spreadsheet."
                        ],
                        "enum": [
                          "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                          "ROW",
                          "COLUMN",
                          "SHEET",
                          "SPREADSHEET"
                        ],
                        "description": "The type of location this object represents.  This field is read-only.",
                        "type": "string"
                      }
                    },
                    "id": "DeveloperMetadataLocation"
                  }
                },
                "visibility": {
                  "description": "The metadata visibility.  Developer metadata must always have a visibility\nspecified.",
                  "type": "string",
                  "enumDescriptions": [
                    "Default value.",
                    "Document-visible metadata is accessible from any developer project with\naccess to the document.",
                    "Project-visible metadata is only visible to and accessible by the developer\nproject that created the metadata."
                  ],
                  "enum": [
                    "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                    "DOCUMENT",
                    "PROJECT"
                  ]
                }
              }
            }
          }
        },
        "sheets": {
          "description": "The sheets that are part of a spreadsheet.",
          "type": "array",
          "properties": {
            "Sheet": {
              "properties": {
                "basicFilter": {
                  "description": "The filter on this sheet, if any.",
                  "BasicFilter": {
                    "description": "The default filter associated with a sheet.",
                    "type": "object",
                    "properties": {
                      "range": {
                        "description": "The range the filter covers.",
                        "GridRange": {
                          "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                          "type": "object",
                          "properties": {
                            "endRowIndex": {
                              "description": "The end row (exclusive) of the range, or not set if unbounded.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "endColumnIndex": {
                              "description": "The end column (exclusive) of the range, or not set if unbounded.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "startRowIndex": {
                              "description": "The start row (inclusive) of the range, or not set if unbounded.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "startColumnIndex": {
                              "description": "The start column (inclusive) of the range, or not set if unbounded.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "sheetId": {
                              "description": "The sheet this range is on.",
                              "format": "int32",
                              "type": "integer"
                            }
                          },
                          "id": "GridRange"
                        }
                      },
                      "criteria": {
                        "description": "The criteria for showing/hiding values per column.\nThe map's key is the column index, and the value is the criteria for\nthat column.",
                        "type": "object",
                        "additionalProperties": {
                          "FilterCriteria": {
                            "type": "object",
                            "properties": {
                              "hiddenValues": {
                                "type": "array",
                                "description": "Values that should be hidden.",
                                "properties": {
                                  "type": "string"
                                }
                              },
                              "condition": {
                                "description": "A condition that must be true for values to be shown.\n(This does not override hiddenValues -- if a value is listed there,\n it will still be hidden.)",
                                "BooleanCondition": {
                                  "description": "A condition that can evaluate to true or false.\nBooleanConditions are used by conditional formatting,\ndata validation, and the criteria in filters.",
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "enum": [
                                        "CONDITION_TYPE_UNSPECIFIED",
                                        "NUMBER_GREATER",
                                        "NUMBER_GREATER_THAN_EQ",
                                        "NUMBER_LESS",
                                        "NUMBER_LESS_THAN_EQ",
                                        "NUMBER_EQ",
                                        "NUMBER_NOT_EQ",
                                        "NUMBER_BETWEEN",
                                        "NUMBER_NOT_BETWEEN",
                                        "TEXT_CONTAINS",
                                        "TEXT_NOT_CONTAINS",
                                        "TEXT_STARTS_WITH",
                                        "TEXT_ENDS_WITH",
                                        "TEXT_EQ",
                                        "TEXT_IS_EMAIL",
                                        "TEXT_IS_URL",
                                        "DATE_EQ",
                                        "DATE_BEFORE",
                                        "DATE_AFTER",
                                        "DATE_ON_OR_BEFORE",
                                        "DATE_ON_OR_AFTER",
                                        "DATE_BETWEEN",
                                        "DATE_NOT_BETWEEN",
                                        "DATE_IS_VALID",
                                        "ONE_OF_RANGE",
                                        "ONE_OF_LIST",
                                        "BLANK",
                                        "NOT_BLANK",
                                        "CUSTOM_FORMULA",
                                        "BOOLEAN"
                                      ],
                                      "description": "The type of condition.",
                                      "type": "string",
                                      "enumDescriptions": [
                                        "The default value, do not use.",
                                        "The cell's value must be greater than the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be greater than or equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be less than the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be less than or equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be not equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be between the two condition values.\nSupported by data validation, conditional formatting and filters.\nRequires exactly two ConditionValues.",
                                        "The cell's value must not be between the two condition values.\nSupported by data validation, conditional formatting and filters.\nRequires exactly two ConditionValues.",
                                        "The cell's value must contain the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must not contain the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must start with the condition's value.\nSupported by conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must end with the condition's value.\nSupported by conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be exactly the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be a valid email address.\nSupported by data validation.\nRequires no ConditionValues.",
                                        "The cell's value must be a valid URL.\nSupported by data validation.\nRequires no ConditionValues.",
                                        "The cell's value must be the same date as the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be before the date of the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue\nthat may be a relative date.",
                                        "The cell's value must be after the date of the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue\nthat may be a relative date.",
                                        "The cell's value must be on or before the date of the condition's value.\nSupported by data validation.\nRequires a single ConditionValue\nthat may be a relative date.",
                                        "The cell's value must be on or after the date of the condition's value.\nSupported by data validation.\nRequires a single ConditionValue\nthat may be a relative date.",
                                        "The cell's value must be between the dates of the two condition values.\nSupported by data validation.\nRequires exactly two ConditionValues.",
                                        "The cell's value must be outside the dates of the two condition values.\nSupported by data validation.\nRequires exactly two ConditionValues.",
                                        "The cell's value must be a date.\nSupported by data validation.\nRequires no ConditionValues.",
                                        "The cell's value must be listed in the grid in condition value's range.\nSupported by data validation.\nRequires a single ConditionValue,\nand the value must be a valid range in A1 notation.",
                                        "The cell's value must be in the list of condition values.\nSupported by data validation.\nSupports any number of condition values,\none per item in the list.\nFormulas are not supported in the values.",
                                        "The cell's value must be empty.\nSupported by conditional formatting and filters.\nRequires no ConditionValues.",
                                        "The cell's value must not be empty.\nSupported by conditional formatting and filters.\nRequires no ConditionValues.",
                                        "The condition's formula must evaluate to true.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be TRUE/FALSE or in the list of condition values.\nSupported by data validation.\nRenders as a cell checkbox.\nSupports zero, one or two ConditionValues.  No\nvalues indicates the cell must be TRUE or FALSE, where TRUE renders as\nchecked and FALSE renders as unchecked.  One value indicates the cell\nwill render as checked when it contains that value and unchecked when it\nis blank.  Two values indicate that the cell will render as checked when\nit contains the first value and unchecked when it contains the second\nvalue.  For example, [\"Yes\",\"No\"] indicates that the cell will render a\nchecked box when it has the value \"Yes\" and an unchecked box when it has\nthe value \"No\"."
                                      ]
                                    },
                                    "values": {
                                      "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
                                      "type": "array",
                                      "properties": {
                                        "ConditionValue": {
                                          "id": "ConditionValue",
                                          "description": "The value of the condition.",
                                          "type": "object",
                                          "properties": {
                                            "relativeDate": {
                                              "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
                                              "type": "string",
                                              "enumDescriptions": [
                                                "Default value, do not use.",
                                                "The value is one year before today.",
                                                "The value is one month before today.",
                                                "The value is one week before today.",
                                                "The value is yesterday.",
                                                "The value is today.",
                                                "The value is tomorrow."
                                              ],
                                              "enum": [
                                                "RELATIVE_DATE_UNSPECIFIED",
                                                "PAST_YEAR",
                                                "PAST_MONTH",
                                                "PAST_WEEK",
                                                "YESTERDAY",
                                                "TODAY",
                                                "TOMORROW"
                                              ]
                                            },
                                            "userEnteredValue": {
                                              "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "id": "BooleanCondition"
                                }
                              }
                            },
                            "id": "FilterCriteria",
                            "description": "Criteria for showing/hiding rows in a filter or filter view."
                          }
                        }
                      },
                      "sortSpecs": {
                        "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
                        "type": "array",
                        "properties": {
                          "SortSpec": {
                            "description": "A sort order associated with a specific column or row.",
                            "type": "object",
                            "properties": {
                              "sortOrder": {
                                "description": "The order data should be sorted.",
                                "type": "string",
                                "enumDescriptions": [
                                  "Default value, do not use this.",
                                  "Sort ascending.",
                                  "Sort descending."
                                ],
                                "enum": [
                                  "SORT_ORDER_UNSPECIFIED",
                                  "ASCENDING",
                                  "DESCENDING"
                                ]
                              },
                              "dimensionIndex": {
                                "description": "The dimension the sort should be applied to.",
                                "format": "int32",
                                "type": "integer"
                              }
                            },
                            "id": "SortSpec"
                          }
                        }
                      }
                    },
                    "id": "BasicFilter"
                  }
                },
                "merges": {
                  "description": "The ranges that are merged together.",
                  "type": "array",
                  "properties": {
                    "GridRange": {
                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                      "type": "object",
                      "properties": {
                        "endRowIndex": {
                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "endColumnIndex": {
                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "startRowIndex": {
                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "startColumnIndex": {
                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "sheetId": {
                          "description": "The sheet this range is on.",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "id": "GridRange"
                    }
                  }
                },
                "bandedRanges": {
                  "description": "The banded (alternating colors) ranges on this sheet.",
                  "type": "array",
                  "properties": {
                    "BandedRange": {
                      "description": "A banded (alternating colors) range in a sheet.",
                      "type": "object",
                      "properties": {
                        "rowProperties": {
                          "description": "Properties for row bands. These properties are applied on a row-by-row\nbasis throughout all the rows in the range. At least one of\nrow_properties or column_properties must be specified.",
                          "BandingProperties": {
                            "properties": {
                              "secondBandColor": {
                                "description": "The second color that is alternating. (Required)",
                                "Color": {
                                  "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                  "type": "object",
                                  "properties": {
                                    "red": {
                                      "description": "The amount of red in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "green": {
                                      "description": "The amount of green in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "blue": {
                                      "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "alpha": {
                                      "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                      "format": "float",
                                      "type": "number"
                                    }
                                  },
                                  "id": "Color"
                                }
                              },
                              "footerColor": {
                                "description": "The color of the last row or column. If this field is not set, the last\nrow or column will be filled with either first_band_color or\nsecond_band_color, depending on the color of the previous row or\ncolumn.",
                                "Color": {
                                  "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                  "type": "object",
                                  "properties": {
                                    "red": {
                                      "description": "The amount of red in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "green": {
                                      "description": "The amount of green in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "blue": {
                                      "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "alpha": {
                                      "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                      "format": "float",
                                      "type": "number"
                                    }
                                  },
                                  "id": "Color"
                                }
                              },
                              "headerColor": {
                                "description": "The color of the first row or column. If this field is set, the first\nrow or column will be filled with this color and the colors will\nalternate between first_band_color and second_band_color starting\nfrom the second row or column. Otherwise, the first row or column will be\nfilled with first_band_color and the colors will proceed to alternate\nas they normally would.",
                                "Color": {
                                  "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                  "type": "object",
                                  "properties": {
                                    "red": {
                                      "description": "The amount of red in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "green": {
                                      "description": "The amount of green in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "blue": {
                                      "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "alpha": {
                                      "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                      "format": "float",
                                      "type": "number"
                                    }
                                  },
                                  "id": "Color"
                                }
                              },
                              "firstBandColor": {
                                "description": "The first color that is alternating. (Required)",
                                "Color": {
                                  "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                  "type": "object",
                                  "properties": {
                                    "red": {
                                      "description": "The amount of red in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "green": {
                                      "description": "The amount of green in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "blue": {
                                      "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "alpha": {
                                      "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                      "format": "float",
                                      "type": "number"
                                    }
                                  },
                                  "id": "Color"
                                }
                              }
                            },
                            "id": "BandingProperties",
                            "description": "Properties referring a single dimension (either row or column). If both\nBandedRange.row_properties and BandedRange.column_properties are\nset, the fill colors are applied to cells according to the following rules:\n\n* header_color and footer_color take priority over band colors.\n* first_band_color takes priority over second_band_color.\n* row_properties takes priority over column_properties.\n\nFor example, the first row color takes priority over the first column\ncolor, but the first column color takes priority over the second row color.\nSimilarly, the row header takes priority over the column header in the\ntop left cell, but the column header takes priority over the first row\ncolor if the row header is not set.",
                            "type": "object"
                          }
                        },
                        "columnProperties": {
                          "description": "Properties for column bands. These properties are applied on a column-\nby-column basis throughout all the columns in the range. At least one of\nrow_properties or column_properties must be specified.",
                          "BandingProperties": {
                            "properties": {
                              "secondBandColor": {
                                "description": "The second color that is alternating. (Required)",
                                "Color": {
                                  "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                  "type": "object",
                                  "properties": {
                                    "red": {
                                      "description": "The amount of red in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "green": {
                                      "description": "The amount of green in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "blue": {
                                      "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "alpha": {
                                      "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                      "format": "float",
                                      "type": "number"
                                    }
                                  },
                                  "id": "Color"
                                }
                              },
                              "footerColor": {
                                "description": "The color of the last row or column. If this field is not set, the last\nrow or column will be filled with either first_band_color or\nsecond_band_color, depending on the color of the previous row or\ncolumn.",
                                "Color": {
                                  "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                  "type": "object",
                                  "properties": {
                                    "red": {
                                      "description": "The amount of red in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "green": {
                                      "description": "The amount of green in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "blue": {
                                      "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "alpha": {
                                      "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                      "format": "float",
                                      "type": "number"
                                    }
                                  },
                                  "id": "Color"
                                }
                              },
                              "headerColor": {
                                "description": "The color of the first row or column. If this field is set, the first\nrow or column will be filled with this color and the colors will\nalternate between first_band_color and second_band_color starting\nfrom the second row or column. Otherwise, the first row or column will be\nfilled with first_band_color and the colors will proceed to alternate\nas they normally would.",
                                "Color": {
                                  "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                  "type": "object",
                                  "properties": {
                                    "red": {
                                      "description": "The amount of red in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "green": {
                                      "description": "The amount of green in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "blue": {
                                      "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "alpha": {
                                      "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                      "format": "float",
                                      "type": "number"
                                    }
                                  },
                                  "id": "Color"
                                }
                              },
                              "firstBandColor": {
                                "description": "The first color that is alternating. (Required)",
                                "Color": {
                                  "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                  "type": "object",
                                  "properties": {
                                    "red": {
                                      "description": "The amount of red in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "green": {
                                      "description": "The amount of green in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "blue": {
                                      "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "alpha": {
                                      "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                      "format": "float",
                                      "type": "number"
                                    }
                                  },
                                  "id": "Color"
                                }
                              }
                            },
                            "id": "BandingProperties",
                            "description": "Properties referring a single dimension (either row or column). If both\nBandedRange.row_properties and BandedRange.column_properties are\nset, the fill colors are applied to cells according to the following rules:\n\n* header_color and footer_color take priority over band colors.\n* first_band_color takes priority over second_band_color.\n* row_properties takes priority over column_properties.\n\nFor example, the first row color takes priority over the first column\ncolor, but the first column color takes priority over the second row color.\nSimilarly, the row header takes priority over the column header in the\ntop left cell, but the column header takes priority over the first row\ncolor if the row header is not set.",
                            "type": "object"
                          }
                        },
                        "range": {
                          "description": "The range over which these properties are applied.",
                          "GridRange": {
                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                            "type": "object",
                            "properties": {
                              "endRowIndex": {
                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "endColumnIndex": {
                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "startRowIndex": {
                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "startColumnIndex": {
                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "sheetId": {
                                "description": "The sheet this range is on.",
                                "format": "int32",
                                "type": "integer"
                              }
                            },
                            "id": "GridRange"
                          }
                        },
                        "bandedRangeId": {
                          "description": "The id of the banded range.",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "id": "BandedRange"
                    }
                  }
                },
                "charts": {
                  "type": "array",
                  "description": "The specifications of every chart on this sheet.",
                  "properties": {
                    "EmbeddedChart": {
                      "id": "EmbeddedChart",
                      "description": "A chart embedded in a sheet.",
                      "type": "object",
                      "properties": {
                        "position": {
                          "description": "The position of the chart.",
                          "EmbeddedObjectPosition": {
                            "description": "The position of an embedded object such as a chart.",
                            "type": "object",
                            "properties": {
                              "newSheet": {
                                "description": "If true, the embedded object is put on a new sheet whose ID\nis chosen for you. Used only when writing.",
                                "type": "boolean"
                              },
                              "sheetId": {
                                "description": "The sheet this is on. Set only if the embedded object\nis on its own sheet. Must be non-negative.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "overlayPosition": {
                                "description": "The position at which the object is overlaid on top of a grid.",
                                "OverlayPosition": {
                                  "description": "The location an object is overlaid on top of a grid.",
                                  "type": "object",
                                  "properties": {
                                    "offsetXPixels": {
                                      "description": "The horizontal offset, in pixels, that the object is offset\nfrom the anchor cell.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "anchorCell": {
                                      "description": "The cell the object is anchored to.",
                                      "GridCoordinate": {
                                        "description": "A coordinate in a sheet.\nAll indexes are zero-based.",
                                        "type": "object",
                                        "properties": {
                                          "rowIndex": {
                                            "description": "The row index of the coordinate.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "columnIndex": {
                                            "description": "The column index of the coordinate.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "sheetId": {
                                            "description": "The sheet this coordinate is on.",
                                            "format": "int32",
                                            "type": "integer"
                                          }
                                        },
                                        "id": "GridCoordinate"
                                      }
                                    },
                                    "offsetYPixels": {
                                      "description": "The vertical offset, in pixels, that the object is offset\nfrom the anchor cell.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "heightPixels": {
                                      "description": "The height of the object, in pixels. Defaults to 371.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "widthPixels": {
                                      "description": "The width of the object, in pixels. Defaults to 600.",
                                      "format": "int32",
                                      "type": "integer"
                                    }
                                  },
                                  "id": "OverlayPosition"
                                }
                              }
                            },
                            "id": "EmbeddedObjectPosition"
                          }
                        },
                        "spec": {
                          "description": "The specification of the chart.",
                          "ChartSpec": {
                            "description": "The specifications of a chart.",
                            "type": "object",
                            "properties": {
                              "basicChart": {
                                "description": "A basic chart specification, can be one of many kinds of charts.\nSee BasicChartType for the list of all\ncharts this supports.",
                                "BasicChartSpec": {
                                  "description": "The specification for a basic chart.  See BasicChartType for the list\nof charts this supports.",
                                  "type": "object",
                                  "properties": {
                                    "chartType": {
                                      "enum": [
                                        "BASIC_CHART_TYPE_UNSPECIFIED",
                                        "BAR",
                                        "LINE",
                                        "AREA",
                                        "COLUMN",
                                        "SCATTER",
                                        "COMBO",
                                        "STEPPED_AREA"
                                      ],
                                      "description": "The type of the chart.",
                                      "type": "string",
                                      "enumDescriptions": [
                                        "Default value, do not use.",
                                        "A <a href=\"/chart/interactive/docs/gallery/barchart\">bar chart</a>.",
                                        "A <a href=\"/chart/interactive/docs/gallery/linechart\">line chart</a>.",
                                        "An <a href=\"/chart/interactive/docs/gallery/areachart\">area chart</a>.",
                                        "A <a href=\"/chart/interactive/docs/gallery/columnchart\">column chart</a>.",
                                        "A <a href=\"/chart/interactive/docs/gallery/scatterchart\">scatter\nchart</a>.",
                                        "A <a href=\"/chart/interactive/docs/gallery/combochart\">combo chart</a>.",
                                        "A <a href=\"/chart/interactive/docs/gallery/steppedareachart\">stepped area\nchart</a>."
                                      ]
                                    },
                                    "interpolateNulls": {
                                      "description": "If some values in a series are missing, gaps may appear in the chart (e.g,\nsegments of lines in a line chart will be missing).  To eliminate these\ngaps set this to true.\nApplies to Line, Area, and Combo charts.",
                                      "type": "boolean"
                                    },
                                    "series": {
                                      "type": "array",
                                      "description": "The data this chart is visualizing.",
                                      "properties": {
                                        "BasicChartSeries": {
                                          "properties": {
                                            "targetAxis": {
                                              "description": "The minor axis that will specify the range of values for this series.\nFor example, if charting stocks over time, the \"Volume\" series\nmay want to be pinned to the right with the prices pinned to the left,\nbecause the scale of trading volume is different than the scale of\nprices.\nIt is an error to specify an axis that isn't a valid minor axis\nfor the chart's type.",
                                              "type": "string",
                                              "enumDescriptions": [
                                                "Default value, do not use.",
                                                "The axis rendered at the bottom of a chart.\nFor most charts, this is the standard major axis.\nFor bar charts, this is a minor axis.",
                                                "The axis rendered at the left of a chart.\nFor most charts, this is a minor axis.\nFor bar charts, this is the standard major axis.",
                                                "The axis rendered at the right of a chart.\nFor most charts, this is a minor axis.\nFor bar charts, this is an unusual major axis."
                                              ],
                                              "enum": [
                                                "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",
                                                "BOTTOM_AXIS",
                                                "LEFT_AXIS",
                                                "RIGHT_AXIS"
                                              ]
                                            },
                                            "color": {
                                              "description": "The color for elements (i.e. bars, lines, points) associated with this\nseries.  If empty, a default color is used.",
                                              "Color": {
                                                "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                "type": "object",
                                                "properties": {
                                                  "red": {
                                                    "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                    "format": "float",
                                                    "type": "number"
                                                  },
                                                  "green": {
                                                    "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                    "format": "float",
                                                    "type": "number"
                                                  },
                                                  "blue": {
                                                    "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                    "format": "float",
                                                    "type": "number"
                                                  },
                                                  "alpha": {
                                                    "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                    "format": "float",
                                                    "type": "number"
                                                  }
                                                },
                                                "id": "Color"
                                              }
                                            },
                                            "lineStyle": {
                                              "description": "The line style of this series. Valid only if the\nchartType is AREA,\nLINE, or SCATTER.\nCOMBO charts are also supported if the\nseries chart type is\nAREA or LINE.",
                                              "LineStyle": {
                                                "description": "Properties that describe the style of a line.",
                                                "type": "object",
                                                "properties": {
                                                  "width": {
                                                    "description": "The thickness of the line, in px.",
                                                    "format": "int32",
                                                    "type": "integer"
                                                  },
                                                  "type": {
                                                    "enumDescriptions": [
                                                      "Default value, do not use.",
                                                      "No dash type, which is equivalent to a non-visible line.",
                                                      "A custom dash for a line. Modifying the exact custom dash style is\ncurrently unsupported.",
                                                      "A solid line.",
                                                      "A dotted line.",
                                                      "A dashed line where the dashes have \"medium\" length.",
                                                      "A line that alternates between a \"medium\" dash and a dot.",
                                                      "A dashed line where the dashes have \"long\" length.",
                                                      "A line that alternates between a \"long\" dash and a dot."
                                                    ],
                                                    "enum": [
                                                      "LINE_DASH_TYPE_UNSPECIFIED",
                                                      "INVISIBLE",
                                                      "CUSTOM",
                                                      "SOLID",
                                                      "DOTTED",
                                                      "MEDIUM_DASHED",
                                                      "MEDIUM_DASHED_DOTTED",
                                                      "LONG_DASHED",
                                                      "LONG_DASHED_DOTTED"
                                                    ],
                                                    "description": "The dash type of the line.",
                                                    "type": "string"
                                                  }
                                                },
                                                "id": "LineStyle"
                                              }
                                            },
                                            "series": {
                                              "description": "The data being visualized in this chart series.",
                                              "ChartData": {
                                                "description": "The data included in a domain or series.",
                                                "type": "object",
                                                "properties": {
                                                  "sourceRange": {
                                                    "description": "The source ranges of the data.",
                                                    "ChartSourceRange": {
                                                      "type": "object",
                                                      "properties": {
                                                        "sources": {
                                                          "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                          "type": "array",
                                                          "properties": {
                                                            "GridRange": {
                                                              "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                              "type": "object",
                                                              "properties": {
                                                                "endRowIndex": {
                                                                  "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "endColumnIndex": {
                                                                  "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "startRowIndex": {
                                                                  "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "startColumnIndex": {
                                                                  "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "sheetId": {
                                                                  "description": "The sheet this range is on.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "id": "GridRange"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "id": "ChartSourceRange",
                                                      "description": "Source ranges for a chart."
                                                    }
                                                  }
                                                },
                                                "id": "ChartData"
                                              }
                                            },
                                            "type": {
                                              "enum": [
                                                "BASIC_CHART_TYPE_UNSPECIFIED",
                                                "BAR",
                                                "LINE",
                                                "AREA",
                                                "COLUMN",
                                                "SCATTER",
                                                "COMBO",
                                                "STEPPED_AREA"
                                              ],
                                              "description": "The type of this series. Valid only if the\nchartType is\nCOMBO.\nDifferent types will change the way the series is visualized.\nOnly LINE, AREA,\nand COLUMN are supported.",
                                              "type": "string",
                                              "enumDescriptions": [
                                                "Default value, do not use.",
                                                "A <a href=\"/chart/interactive/docs/gallery/barchart\">bar chart</a>.",
                                                "A <a href=\"/chart/interactive/docs/gallery/linechart\">line chart</a>.",
                                                "An <a href=\"/chart/interactive/docs/gallery/areachart\">area chart</a>.",
                                                "A <a href=\"/chart/interactive/docs/gallery/columnchart\">column chart</a>.",
                                                "A <a href=\"/chart/interactive/docs/gallery/scatterchart\">scatter\nchart</a>.",
                                                "A <a href=\"/chart/interactive/docs/gallery/combochart\">combo chart</a>.",
                                                "A <a href=\"/chart/interactive/docs/gallery/steppedareachart\">stepped area\nchart</a>."
                                              ]
                                            }
                                          },
                                          "id": "BasicChartSeries",
                                          "description": "A single series of data in a chart.\nFor example, if charting stock prices over time, multiple series may exist,\none for the \"Open Price\", \"High Price\", \"Low Price\" and \"Close Price\".",
                                          "type": "object"
                                        }
                                      }
                                    },
                                    "legendPosition": {
                                      "enum": [
                                        "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED",
                                        "BOTTOM_LEGEND",
                                        "LEFT_LEGEND",
                                        "RIGHT_LEGEND",
                                        "TOP_LEGEND",
                                        "NO_LEGEND"
                                      ],
                                      "description": "The position of the chart legend.",
                                      "type": "string",
                                      "enumDescriptions": [
                                        "Default value, do not use.",
                                        "The legend is rendered on the bottom of the chart.",
                                        "The legend is rendered on the left of the chart.",
                                        "The legend is rendered on the right of the chart.",
                                        "The legend is rendered on the top of the chart.",
                                        "No legend is rendered."
                                      ]
                                    },
                                    "compareMode": {
                                      "enum": [
                                        "BASIC_CHART_COMPARE_MODE_UNSPECIFIED",
                                        "DATUM",
                                        "CATEGORY"
                                      ],
                                      "description": "The behavior of tooltips and data highlighting when hovering on data and\nchart area.",
                                      "type": "string",
                                      "enumDescriptions": [
                                        "Default value, do not use.",
                                        "Only the focused data element is highlighted and shown in the tooltip.",
                                        "All data elements with the same category (e.g., domain value) are\nhighlighted and shown in the tooltip."
                                      ]
                                    },
                                    "domains": {
                                      "description": "The domain of data this is charting.\nOnly a single domain is supported.",
                                      "type": "array",
                                      "properties": {
                                        "BasicChartDomain": {
                                          "id": "BasicChartDomain",
                                          "description": "The domain of a chart.\nFor example, if charting stock prices over time, this would be the date.",
                                          "type": "object",
                                          "properties": {
                                            "domain": {
                                              "description": "The data of the domain. For example, if charting stock prices over time,\nthis is the data representing the dates.",
                                              "ChartData": {
                                                "description": "The data included in a domain or series.",
                                                "type": "object",
                                                "properties": {
                                                  "sourceRange": {
                                                    "description": "The source ranges of the data.",
                                                    "ChartSourceRange": {
                                                      "type": "object",
                                                      "properties": {
                                                        "sources": {
                                                          "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                          "type": "array",
                                                          "properties": {
                                                            "GridRange": {
                                                              "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                              "type": "object",
                                                              "properties": {
                                                                "endRowIndex": {
                                                                  "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "endColumnIndex": {
                                                                  "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "startRowIndex": {
                                                                  "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "startColumnIndex": {
                                                                  "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "sheetId": {
                                                                  "description": "The sheet this range is on.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "id": "GridRange"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "id": "ChartSourceRange",
                                                      "description": "Source ranges for a chart."
                                                    }
                                                  }
                                                },
                                                "id": "ChartData"
                                              }
                                            },
                                            "reversed": {
                                              "type": "boolean",
                                              "description": "True to reverse the order of the domain values (horizontal axis)."
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "lineSmoothing": {
                                      "description": "Gets whether all lines should be rendered smooth or straight by default.\nApplies to Line charts.",
                                      "type": "boolean"
                                    },
                                    "headerCount": {
                                      "description": "The number of rows or columns in the data that are \"headers\".\nIf not set, Google Sheets will guess how many rows are headers based\non the data.\n\n(Note that BasicChartAxis.title may override the axis title\n inferred from the header values.)",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "stackedType": {
                                      "enumDescriptions": [
                                        "Default value, do not use.",
                                        "Series are not stacked.",
                                        "Series values are stacked, each value is rendered vertically beginning\nfrom the top of the value below it.",
                                        "Vertical stacks are stretched to reach the top of the chart, with\nvalues laid out as percentages of each other."
                                      ],
                                      "enum": [
                                        "BASIC_CHART_STACKED_TYPE_UNSPECIFIED",
                                        "NOT_STACKED",
                                        "STACKED",
                                        "PERCENT_STACKED"
                                      ],
                                      "description": "The stacked type for charts that support vertical stacking.\nApplies to Area, Bar, Column, Combo, and Stepped Area charts.",
                                      "type": "string"
                                    },
                                    "threeDimensional": {
                                      "description": "True to make the chart 3D.\nApplies to Bar and Column charts.",
                                      "type": "boolean"
                                    },
                                    "axis": {
                                      "description": "The axis on the chart.",
                                      "type": "array",
                                      "properties": {
                                        "BasicChartAxis": {
                                          "description": "An axis of the chart.\nA chart may not have more than one axis per\naxis position.",
                                          "type": "object",
                                          "properties": {
                                            "position": {
                                              "enum": [
                                                "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",
                                                "BOTTOM_AXIS",
                                                "LEFT_AXIS",
                                                "RIGHT_AXIS"
                                              ],
                                              "description": "The position of this axis.",
                                              "type": "string",
                                              "enumDescriptions": [
                                                "Default value, do not use.",
                                                "The axis rendered at the bottom of a chart.\nFor most charts, this is the standard major axis.\nFor bar charts, this is a minor axis.",
                                                "The axis rendered at the left of a chart.\nFor most charts, this is a minor axis.\nFor bar charts, this is the standard major axis.",
                                                "The axis rendered at the right of a chart.\nFor most charts, this is a minor axis.\nFor bar charts, this is an unusual major axis."
                                              ]
                                            },
                                            "title": {
                                              "description": "The title of this axis. If set, this overrides any title inferred\nfrom headers of the data.",
                                              "type": "string"
                                            },
                                            "titleTextPosition": {
                                              "description": "The axis title text position.",
                                              "TextPosition": {
                                                "description": "Position settings for text.",
                                                "type": "object",
                                                "properties": {
                                                  "horizontalAlignment": {
                                                    "enumDescriptions": [
                                                      "The horizontal alignment is not specified. Do not use this.",
                                                      "The text is explicitly aligned to the left of the cell.",
                                                      "The text is explicitly aligned to the center of the cell.",
                                                      "The text is explicitly aligned to the right of the cell."
                                                    ],
                                                    "enum": [
                                                      "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                      "LEFT",
                                                      "CENTER",
                                                      "RIGHT"
                                                    ],
                                                    "description": "Horizontal alignment setting for the piece of text.",
                                                    "type": "string"
                                                  }
                                                },
                                                "id": "TextPosition"
                                              }
                                            },
                                            "format": {
                                              "description": "The format of the title.\nOnly valid if the axis is not associated with the domain.",
                                              "TextFormat": {
                                                "id": "TextFormat",
                                                "description": "The format of a run of text in a cell.\nAbsent values indicate that the field isn't specified.",
                                                "type": "object",
                                                "properties": {
                                                  "italic": {
                                                    "description": "True if the text is italicized.",
                                                    "type": "boolean"
                                                  },
                                                  "strikethrough": {
                                                    "description": "True if the text has a strikethrough.",
                                                    "type": "boolean"
                                                  },
                                                  "fontSize": {
                                                    "description": "The size of the font.",
                                                    "format": "int32",
                                                    "type": "integer"
                                                  },
                                                  "underline": {
                                                    "description": "True if the text is underlined.",
                                                    "type": "boolean"
                                                  },
                                                  "foregroundColor": {
                                                    "description": "The foreground color of the text.",
                                                    "Color": {
                                                      "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                      "type": "object",
                                                      "properties": {
                                                        "red": {
                                                          "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                          "format": "float",
                                                          "type": "number"
                                                        },
                                                        "green": {
                                                          "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                          "format": "float",
                                                          "type": "number"
                                                        },
                                                        "blue": {
                                                          "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                          "format": "float",
                                                          "type": "number"
                                                        },
                                                        "alpha": {
                                                          "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                          "format": "float",
                                                          "type": "number"
                                                        }
                                                      },
                                                      "id": "Color"
                                                    }
                                                  },
                                                  "bold": {
                                                    "description": "True if the text is bold.",
                                                    "type": "boolean"
                                                  },
                                                  "fontFamily": {
                                                    "description": "The font family.",
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "id": "BasicChartAxis"
                                        }
                                      }
                                    }
                                  },
                                  "id": "BasicChartSpec"
                                }
                              },
                              "orgChart": {
                                "description": "An org chart specification.",
                                "OrgChartSpec": {
                                  "description": "An <a href=\"/chart/interactive/docs/gallery/orgchart\">org chart</a>.\nOrg charts require a unique set of labels in labels and may\noptionally include parent_labels and tooltips.\nparent_labels contain, for each node, the label identifying the parent\nnode.  tooltips contain, for each node, an optional tooltip.\n\nFor example, to describe an OrgChart with Alice as the CEO, Bob as the\nPresident (reporting to Alice) and Cathy as VP of Sales (also reporting to\nAlice), have labels contain \"Alice\", \"Bob\", \"Cathy\",\nparent_labels contain \"\", \"Alice\", \"Alice\" and tooltips contain\n\"CEO\", \"President\", \"VP Sales\".",
                                  "type": "object",
                                  "properties": {
                                    "tooltips": {
                                      "description": "The data containing the tooltip for the corresponding node.  A blank value\nresults in no tooltip being displayed for the node.\nThis field is optional.",
                                      "ChartData": {
                                        "description": "The data included in a domain or series.",
                                        "type": "object",
                                        "properties": {
                                          "sourceRange": {
                                            "description": "The source ranges of the data.",
                                            "ChartSourceRange": {
                                              "type": "object",
                                              "properties": {
                                                "sources": {
                                                  "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                  "type": "array",
                                                  "properties": {
                                                    "GridRange": {
                                                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                      "type": "object",
                                                      "properties": {
                                                        "endRowIndex": {
                                                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "endColumnIndex": {
                                                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "sheetId": {
                                                          "description": "The sheet this range is on.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "id": "GridRange"
                                                    }
                                                  }
                                                }
                                              },
                                              "id": "ChartSourceRange",
                                              "description": "Source ranges for a chart."
                                            }
                                          }
                                        },
                                        "id": "ChartData"
                                      }
                                    },
                                    "selectedNodeColor": {
                                      "description": "The color of the selected org chart nodes.",
                                      "Color": {
                                        "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                        "type": "object",
                                        "properties": {
                                          "red": {
                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "green": {
                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "blue": {
                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "alpha": {
                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                            "format": "float",
                                            "type": "number"
                                          }
                                        },
                                        "id": "Color"
                                      }
                                    },
                                    "parentLabels": {
                                      "description": "The data containing the label of the parent for the corresponding node.\nA blank value indicates that the node has no parent and is a top-level\nnode.\nThis field is optional.",
                                      "ChartData": {
                                        "description": "The data included in a domain or series.",
                                        "type": "object",
                                        "properties": {
                                          "sourceRange": {
                                            "description": "The source ranges of the data.",
                                            "ChartSourceRange": {
                                              "type": "object",
                                              "properties": {
                                                "sources": {
                                                  "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                  "type": "array",
                                                  "properties": {
                                                    "GridRange": {
                                                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                      "type": "object",
                                                      "properties": {
                                                        "endRowIndex": {
                                                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "endColumnIndex": {
                                                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "sheetId": {
                                                          "description": "The sheet this range is on.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "id": "GridRange"
                                                    }
                                                  }
                                                }
                                              },
                                              "id": "ChartSourceRange",
                                              "description": "Source ranges for a chart."
                                            }
                                          }
                                        },
                                        "id": "ChartData"
                                      }
                                    },
                                    "labels": {
                                      "description": "The data containing the labels for all the nodes in the chart.  Labels\nmust be unique.",
                                      "ChartData": {
                                        "description": "The data included in a domain or series.",
                                        "type": "object",
                                        "properties": {
                                          "sourceRange": {
                                            "description": "The source ranges of the data.",
                                            "ChartSourceRange": {
                                              "type": "object",
                                              "properties": {
                                                "sources": {
                                                  "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                  "type": "array",
                                                  "properties": {
                                                    "GridRange": {
                                                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                      "type": "object",
                                                      "properties": {
                                                        "endRowIndex": {
                                                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "endColumnIndex": {
                                                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "sheetId": {
                                                          "description": "The sheet this range is on.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "id": "GridRange"
                                                    }
                                                  }
                                                }
                                              },
                                              "id": "ChartSourceRange",
                                              "description": "Source ranges for a chart."
                                            }
                                          }
                                        },
                                        "id": "ChartData"
                                      }
                                    },
                                    "nodeSize": {
                                      "description": "The size of the org chart nodes.",
                                      "type": "string",
                                      "enumDescriptions": [
                                        "Default value, do not use.",
                                        "The small org chart node size.",
                                        "The medium org chart node size.",
                                        "The large org chart node size."
                                      ],
                                      "enum": [
                                        "ORG_CHART_LABEL_SIZE_UNSPECIFIED",
                                        "SMALL",
                                        "MEDIUM",
                                        "LARGE"
                                      ]
                                    },
                                    "nodeColor": {
                                      "description": "The color of the org chart nodes.",
                                      "Color": {
                                        "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                        "type": "object",
                                        "properties": {
                                          "red": {
                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "green": {
                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "blue": {
                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "alpha": {
                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                            "format": "float",
                                            "type": "number"
                                          }
                                        },
                                        "id": "Color"
                                      }
                                    }
                                  },
                                  "id": "OrgChartSpec"
                                }
                              },
                              "pieChart": {
                                "description": "A pie chart specification.",
                                "PieChartSpec": {
                                  "description": "A <a href=\"/chart/interactive/docs/gallery/piechart\">pie chart</a>.",
                                  "type": "object",
                                  "properties": {
                                    "series": {
                                      "description": "The data that covers the one and only series of the pie chart.",
                                      "ChartData": {
                                        "description": "The data included in a domain or series.",
                                        "type": "object",
                                        "properties": {
                                          "sourceRange": {
                                            "description": "The source ranges of the data.",
                                            "ChartSourceRange": {
                                              "type": "object",
                                              "properties": {
                                                "sources": {
                                                  "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                  "type": "array",
                                                  "properties": {
                                                    "GridRange": {
                                                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                      "type": "object",
                                                      "properties": {
                                                        "endRowIndex": {
                                                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "endColumnIndex": {
                                                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "sheetId": {
                                                          "description": "The sheet this range is on.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "id": "GridRange"
                                                    }
                                                  }
                                                }
                                              },
                                              "id": "ChartSourceRange",
                                              "description": "Source ranges for a chart."
                                            }
                                          }
                                        },
                                        "id": "ChartData"
                                      }
                                    },
                                    "legendPosition": {
                                      "enum": [
                                        "PIE_CHART_LEGEND_POSITION_UNSPECIFIED",
                                        "BOTTOM_LEGEND",
                                        "LEFT_LEGEND",
                                        "RIGHT_LEGEND",
                                        "TOP_LEGEND",
                                        "NO_LEGEND",
                                        "LABELED_LEGEND"
                                      ],
                                      "description": "Where the legend of the pie chart should be drawn.",
                                      "type": "string",
                                      "enumDescriptions": [
                                        "Default value, do not use.",
                                        "The legend is rendered on the bottom of the chart.",
                                        "The legend is rendered on the left of the chart.",
                                        "The legend is rendered on the right of the chart.",
                                        "The legend is rendered on the top of the chart.",
                                        "No legend is rendered.",
                                        "Each pie slice has a label attached to it."
                                      ]
                                    },
                                    "pieHole": {
                                      "description": "The size of the hole in the pie chart.",
                                      "format": "double",
                                      "type": "number"
                                    },
                                    "domain": {
                                      "description": "The data that covers the domain of the pie chart.",
                                      "ChartData": {
                                        "description": "The data included in a domain or series.",
                                        "type": "object",
                                        "properties": {
                                          "sourceRange": {
                                            "description": "The source ranges of the data.",
                                            "ChartSourceRange": {
                                              "type": "object",
                                              "properties": {
                                                "sources": {
                                                  "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                  "type": "array",
                                                  "properties": {
                                                    "GridRange": {
                                                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                      "type": "object",
                                                      "properties": {
                                                        "endRowIndex": {
                                                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "endColumnIndex": {
                                                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "sheetId": {
                                                          "description": "The sheet this range is on.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "id": "GridRange"
                                                    }
                                                  }
                                                }
                                              },
                                              "id": "ChartSourceRange",
                                              "description": "Source ranges for a chart."
                                            }
                                          }
                                        },
                                        "id": "ChartData"
                                      }
                                    },
                                    "threeDimensional": {
                                      "description": "True if the pie is three dimensional.",
                                      "type": "boolean"
                                    }
                                  },
                                  "id": "PieChartSpec"
                                }
                              },
                              "titleTextFormat": {
                                "description": "The title text format.\nStrikethrough and underline are not supported.",
                                "TextFormat": {
                                  "id": "TextFormat",
                                  "description": "The format of a run of text in a cell.\nAbsent values indicate that the field isn't specified.",
                                  "type": "object",
                                  "properties": {
                                    "italic": {
                                      "description": "True if the text is italicized.",
                                      "type": "boolean"
                                    },
                                    "strikethrough": {
                                      "description": "True if the text has a strikethrough.",
                                      "type": "boolean"
                                    },
                                    "fontSize": {
                                      "description": "The size of the font.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "underline": {
                                      "description": "True if the text is underlined.",
                                      "type": "boolean"
                                    },
                                    "foregroundColor": {
                                      "description": "The foreground color of the text.",
                                      "Color": {
                                        "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                        "type": "object",
                                        "properties": {
                                          "red": {
                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "green": {
                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "blue": {
                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "alpha": {
                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                            "format": "float",
                                            "type": "number"
                                          }
                                        },
                                        "id": "Color"
                                      }
                                    },
                                    "bold": {
                                      "description": "True if the text is bold.",
                                      "type": "boolean"
                                    },
                                    "fontFamily": {
                                      "description": "The font family.",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "title": {
                                "description": "The title of the chart.",
                                "type": "string"
                              },
                              "altText": {
                                "description": "The alternative text that describes the chart.  This is often used\nfor accessibility.",
                                "type": "string"
                              },
                              "titleTextPosition": {
                                "description": "The title text position.\nThis field is optional.",
                                "TextPosition": {
                                  "description": "Position settings for text.",
                                  "type": "object",
                                  "properties": {
                                    "horizontalAlignment": {
                                      "enumDescriptions": [
                                        "The horizontal alignment is not specified. Do not use this.",
                                        "The text is explicitly aligned to the left of the cell.",
                                        "The text is explicitly aligned to the center of the cell.",
                                        "The text is explicitly aligned to the right of the cell."
                                      ],
                                      "enum": [
                                        "HORIZONTAL_ALIGN_UNSPECIFIED",
                                        "LEFT",
                                        "CENTER",
                                        "RIGHT"
                                      ],
                                      "description": "Horizontal alignment setting for the piece of text.",
                                      "type": "string"
                                    }
                                  },
                                  "id": "TextPosition"
                                }
                              },
                              "histogramChart": {
                                "description": "A histogram chart specification.",
                                "HistogramChartSpec": {
                                  "id": "HistogramChartSpec",
                                  "description": "A <a href=\"/chart/interactive/docs/gallery/histogram\">histogram chart</a>.\nA histogram chart groups data items into bins, displaying each bin as a\ncolumn of stacked items.  Histograms are used to display the distribution\nof a dataset.  Each column of items represents a range into which those\nitems fall.  The number of bins can be chosen automatically or specified\nexplicitly.",
                                  "type": "object",
                                  "properties": {
                                    "legendPosition": {
                                      "enumDescriptions": [
                                        "Default value, do not use.",
                                        "The legend is rendered on the bottom of the chart.",
                                        "The legend is rendered on the left of the chart.",
                                        "The legend is rendered on the right of the chart.",
                                        "The legend is rendered on the top of the chart.",
                                        "No legend is rendered.",
                                        "The legend is rendered inside the chart area."
                                      ],
                                      "enum": [
                                        "HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED",
                                        "BOTTOM_LEGEND",
                                        "LEFT_LEGEND",
                                        "RIGHT_LEGEND",
                                        "TOP_LEGEND",
                                        "NO_LEGEND",
                                        "INSIDE_LEGEND"
                                      ],
                                      "description": "The position of the chart legend.",
                                      "type": "string"
                                    },
                                    "bucketSize": {
                                      "description": "By default the bucket size (the range of values stacked in a single\ncolumn) is chosen automatically, but it may be overridden here.\nE.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc.\nCannot be negative.\nThis field is optional.",
                                      "format": "double",
                                      "type": "number"
                                    },
                                    "outlierPercentile": {
                                      "description": "The outlier percentile is used to ensure that outliers do not adversely\naffect the calculation of bucket sizes.  For example, setting an outlier\npercentile of 0.05 indicates that the top and bottom 5% of values when\ncalculating buckets.  The values are still included in the chart, they will\nbe added to the first or last buckets instead of their own buckets.\nMust be between 0.0 and 0.5.",
                                      "format": "double",
                                      "type": "number"
                                    },
                                    "showItemDividers": {
                                      "description": "Whether horizontal divider lines should be displayed between items in each\ncolumn.",
                                      "type": "boolean"
                                    },
                                    "series": {
                                      "description": "The series for a histogram may be either a single series of values to be\nbucketed or multiple series, each of the same length, containing the name\nof the series followed by the values to be bucketed for that series.",
                                      "type": "array",
                                      "properties": {
                                        "HistogramSeries": {
                                          "description": "A histogram series containing the series color and data.",
                                          "type": "object",
                                          "properties": {
                                            "data": {
                                              "description": "The data for this histogram series.",
                                              "ChartData": {
                                                "description": "The data included in a domain or series.",
                                                "type": "object",
                                                "properties": {
                                                  "sourceRange": {
                                                    "description": "The source ranges of the data.",
                                                    "ChartSourceRange": {
                                                      "type": "object",
                                                      "properties": {
                                                        "sources": {
                                                          "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                          "type": "array",
                                                          "properties": {
                                                            "GridRange": {
                                                              "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                              "type": "object",
                                                              "properties": {
                                                                "endRowIndex": {
                                                                  "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "endColumnIndex": {
                                                                  "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "startRowIndex": {
                                                                  "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "startColumnIndex": {
                                                                  "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "sheetId": {
                                                                  "description": "The sheet this range is on.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "id": "GridRange"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "id": "ChartSourceRange",
                                                      "description": "Source ranges for a chart."
                                                    }
                                                  }
                                                },
                                                "id": "ChartData"
                                              }
                                            },
                                            "barColor": {
                                              "description": "The color of the column representing this series in each bucket.\nThis field is optional.",
                                              "Color": {
                                                "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                "type": "object",
                                                "properties": {
                                                  "red": {
                                                    "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                    "format": "float",
                                                    "type": "number"
                                                  },
                                                  "green": {
                                                    "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                    "format": "float",
                                                    "type": "number"
                                                  },
                                                  "blue": {
                                                    "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                    "format": "float",
                                                    "type": "number"
                                                  },
                                                  "alpha": {
                                                    "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                    "format": "float",
                                                    "type": "number"
                                                  }
                                                },
                                                "id": "Color"
                                              }
                                            }
                                          },
                                          "id": "HistogramSeries"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "candlestickChart": {
                                "description": "A candlestick chart specification.",
                                "CandlestickChartSpec": {
                                  "id": "CandlestickChartSpec",
                                  "description": "A <a href=\"/chart/interactive/docs/gallery/candlestickchart\">candlestick\nchart</a>.",
                                  "type": "object",
                                  "properties": {
                                    "domain": {
                                      "description": "The domain data (horizontal axis) for the candlestick chart.  String data\nwill be treated as discrete labels, other data will be treated as\ncontinuous values.",
                                      "CandlestickDomain": {
                                        "id": "CandlestickDomain",
                                        "description": "The domain of a CandlestickChart.",
                                        "type": "object",
                                        "properties": {
                                          "data": {
                                            "description": "The data of the CandlestickDomain.",
                                            "ChartData": {
                                              "description": "The data included in a domain or series.",
                                              "type": "object",
                                              "properties": {
                                                "sourceRange": {
                                                  "description": "The source ranges of the data.",
                                                  "ChartSourceRange": {
                                                    "type": "object",
                                                    "properties": {
                                                      "sources": {
                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                        "type": "array",
                                                        "properties": {
                                                          "GridRange": {
                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                            "type": "object",
                                                            "properties": {
                                                              "endRowIndex": {
                                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                              },
                                                              "endColumnIndex": {
                                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                              },
                                                              "startRowIndex": {
                                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                              },
                                                              "startColumnIndex": {
                                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                              },
                                                              "sheetId": {
                                                                "description": "The sheet this range is on.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                              }
                                                            },
                                                            "id": "GridRange"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "id": "ChartSourceRange",
                                                    "description": "Source ranges for a chart."
                                                  }
                                                }
                                              },
                                              "id": "ChartData"
                                            }
                                          },
                                          "reversed": {
                                            "description": "True to reverse the order of the domain values (horizontal axis).",
                                            "type": "boolean"
                                          }
                                        }
                                      }
                                    },
                                    "data": {
                                      "description": "The Candlestick chart data.\nOnly one CandlestickData is supported.",
                                      "type": "array",
                                      "properties": {
                                        "CandlestickData": {
                                          "description": "The Candlestick chart data, each containing the low, open, close, and high\nvalues for a series.",
                                          "type": "object",
                                          "properties": {
                                            "lowSeries": {
                                              "description": "The range data (vertical axis) for the low/minimum value for each candle.\nThis is the bottom of the candle's center line.",
                                              "CandlestickSeries": {
                                                "properties": {
                                                  "data": {
                                                    "description": "The data of the CandlestickSeries.",
                                                    "ChartData": {
                                                      "description": "The data included in a domain or series.",
                                                      "type": "object",
                                                      "properties": {
                                                        "sourceRange": {
                                                          "description": "The source ranges of the data.",
                                                          "ChartSourceRange": {
                                                            "type": "object",
                                                            "properties": {
                                                              "sources": {
                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                "type": "array",
                                                                "properties": {
                                                                  "GridRange": {
                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                    "type": "object",
                                                                    "properties": {
                                                                      "endRowIndex": {
                                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "endColumnIndex": {
                                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "startRowIndex": {
                                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "startColumnIndex": {
                                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "sheetId": {
                                                                        "description": "The sheet this range is on.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "id": "GridRange"
                                                                  }
                                                                }
                                                              }
                                                            },
                                                            "id": "ChartSourceRange",
                                                            "description": "Source ranges for a chart."
                                                          }
                                                        }
                                                      },
                                                      "id": "ChartData"
                                                    }
                                                  }
                                                },
                                                "id": "CandlestickSeries",
                                                "description": "The series of a CandlestickData.",
                                                "type": "object"
                                              }
                                            },
                                            "closeSeries": {
                                              "description": "The range data (vertical axis) for the close/final value for each candle.\nThis is the top of the candle body.  If greater than the open value the\ncandle will be filled.  Otherwise the candle will be hollow.",
                                              "CandlestickSeries": {
                                                "properties": {
                                                  "data": {
                                                    "description": "The data of the CandlestickSeries.",
                                                    "ChartData": {
                                                      "description": "The data included in a domain or series.",
                                                      "type": "object",
                                                      "properties": {
                                                        "sourceRange": {
                                                          "description": "The source ranges of the data.",
                                                          "ChartSourceRange": {
                                                            "type": "object",
                                                            "properties": {
                                                              "sources": {
                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                "type": "array",
                                                                "properties": {
                                                                  "GridRange": {
                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                    "type": "object",
                                                                    "properties": {
                                                                      "endRowIndex": {
                                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "endColumnIndex": {
                                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "startRowIndex": {
                                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "startColumnIndex": {
                                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "sheetId": {
                                                                        "description": "The sheet this range is on.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "id": "GridRange"
                                                                  }
                                                                }
                                                              }
                                                            },
                                                            "id": "ChartSourceRange",
                                                            "description": "Source ranges for a chart."
                                                          }
                                                        }
                                                      },
                                                      "id": "ChartData"
                                                    }
                                                  }
                                                },
                                                "id": "CandlestickSeries",
                                                "description": "The series of a CandlestickData.",
                                                "type": "object"
                                              }
                                            },
                                            "openSeries": {
                                              "description": "The range data (vertical axis) for the open/initial value for each\ncandle. This is the bottom of the candle body.  If less than the close\nvalue the candle will be filled.  Otherwise the candle will be hollow.",
                                              "CandlestickSeries": {
                                                "properties": {
                                                  "data": {
                                                    "description": "The data of the CandlestickSeries.",
                                                    "ChartData": {
                                                      "description": "The data included in a domain or series.",
                                                      "type": "object",
                                                      "properties": {
                                                        "sourceRange": {
                                                          "description": "The source ranges of the data.",
                                                          "ChartSourceRange": {
                                                            "type": "object",
                                                            "properties": {
                                                              "sources": {
                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                "type": "array",
                                                                "properties": {
                                                                  "GridRange": {
                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                    "type": "object",
                                                                    "properties": {
                                                                      "endRowIndex": {
                                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "endColumnIndex": {
                                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "startRowIndex": {
                                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "startColumnIndex": {
                                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "sheetId": {
                                                                        "description": "The sheet this range is on.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "id": "GridRange"
                                                                  }
                                                                }
                                                              }
                                                            },
                                                            "id": "ChartSourceRange",
                                                            "description": "Source ranges for a chart."
                                                          }
                                                        }
                                                      },
                                                      "id": "ChartData"
                                                    }
                                                  }
                                                },
                                                "id": "CandlestickSeries",
                                                "description": "The series of a CandlestickData.",
                                                "type": "object"
                                              }
                                            },
                                            "highSeries": {
                                              "description": "The range data (vertical axis) for the high/maximum value for each\ncandle. This is the top of the candle's center line.",
                                              "CandlestickSeries": {
                                                "properties": {
                                                  "data": {
                                                    "description": "The data of the CandlestickSeries.",
                                                    "ChartData": {
                                                      "description": "The data included in a domain or series.",
                                                      "type": "object",
                                                      "properties": {
                                                        "sourceRange": {
                                                          "description": "The source ranges of the data.",
                                                          "ChartSourceRange": {
                                                            "type": "object",
                                                            "properties": {
                                                              "sources": {
                                                                "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                                "type": "array",
                                                                "properties": {
                                                                  "GridRange": {
                                                                    "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                                    "type": "object",
                                                                    "properties": {
                                                                      "endRowIndex": {
                                                                        "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "endColumnIndex": {
                                                                        "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "startRowIndex": {
                                                                        "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "startColumnIndex": {
                                                                        "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      },
                                                                      "sheetId": {
                                                                        "description": "The sheet this range is on.",
                                                                        "format": "int32",
                                                                        "type": "integer"
                                                                      }
                                                                    },
                                                                    "id": "GridRange"
                                                                  }
                                                                }
                                                              }
                                                            },
                                                            "id": "ChartSourceRange",
                                                            "description": "Source ranges for a chart."
                                                          }
                                                        }
                                                      },
                                                      "id": "ChartData"
                                                    }
                                                  }
                                                },
                                                "id": "CandlestickSeries",
                                                "description": "The series of a CandlestickData.",
                                                "type": "object"
                                              }
                                            }
                                          },
                                          "id": "CandlestickData"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "bubbleChart": {
                                "description": "A bubble chart specification.",
                                "BubbleChartSpec": {
                                  "description": "A <a href=\"/chart/interactive/docs/gallery/bubblechart\">bubble chart</a>.",
                                  "type": "object",
                                  "properties": {
                                    "bubbleMaxRadiusSize": {
                                      "type": "integer",
                                      "description": "The max radius size of the bubbles, in pixels.\nIf specified, the field must be a positive value.",
                                      "format": "int32"
                                    },
                                    "series": {
                                      "description": "The data contianing the bubble y-values.  These values locate the bubbles\nin the chart vertically.",
                                      "ChartData": {
                                        "description": "The data included in a domain or series.",
                                        "type": "object",
                                        "properties": {
                                          "sourceRange": {
                                            "description": "The source ranges of the data.",
                                            "ChartSourceRange": {
                                              "type": "object",
                                              "properties": {
                                                "sources": {
                                                  "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                  "type": "array",
                                                  "properties": {
                                                    "GridRange": {
                                                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                      "type": "object",
                                                      "properties": {
                                                        "endRowIndex": {
                                                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "endColumnIndex": {
                                                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "sheetId": {
                                                          "description": "The sheet this range is on.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "id": "GridRange"
                                                    }
                                                  }
                                                }
                                              },
                                              "id": "ChartSourceRange",
                                              "description": "Source ranges for a chart."
                                            }
                                          }
                                        },
                                        "id": "ChartData"
                                      }
                                    },
                                    "legendPosition": {
                                      "enumDescriptions": [
                                        "Default value, do not use.",
                                        "The legend is rendered on the bottom of the chart.",
                                        "The legend is rendered on the left of the chart.",
                                        "The legend is rendered on the right of the chart.",
                                        "The legend is rendered on the top of the chart.",
                                        "No legend is rendered.",
                                        "The legend is rendered inside the chart area."
                                      ],
                                      "enum": [
                                        "BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED",
                                        "BOTTOM_LEGEND",
                                        "LEFT_LEGEND",
                                        "RIGHT_LEGEND",
                                        "TOP_LEGEND",
                                        "NO_LEGEND",
                                        "INSIDE_LEGEND"
                                      ],
                                      "description": "Where the legend of the chart should be drawn.",
                                      "type": "string"
                                    },
                                    "domain": {
                                      "description": "The data containing the bubble x-values.  These values locate the bubbles\nin the chart horizontally.",
                                      "ChartData": {
                                        "description": "The data included in a domain or series.",
                                        "type": "object",
                                        "properties": {
                                          "sourceRange": {
                                            "description": "The source ranges of the data.",
                                            "ChartSourceRange": {
                                              "type": "object",
                                              "properties": {
                                                "sources": {
                                                  "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                  "type": "array",
                                                  "properties": {
                                                    "GridRange": {
                                                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                      "type": "object",
                                                      "properties": {
                                                        "endRowIndex": {
                                                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "endColumnIndex": {
                                                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "sheetId": {
                                                          "description": "The sheet this range is on.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "id": "GridRange"
                                                    }
                                                  }
                                                }
                                              },
                                              "id": "ChartSourceRange",
                                              "description": "Source ranges for a chart."
                                            }
                                          }
                                        },
                                        "id": "ChartData"
                                      }
                                    },
                                    "bubbleOpacity": {
                                      "description": "The opacity of the bubbles between 0 and 1.0.\n0 is fully transparent and 1 is fully opaque.",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "bubbleSizes": {
                                      "description": "The data contianing the bubble sizes.  Bubble sizes are used to draw\nthe bubbles at different sizes relative to each other.\nIf specified, group_ids must also be specified.  This field is\noptional.",
                                      "ChartData": {
                                        "description": "The data included in a domain or series.",
                                        "type": "object",
                                        "properties": {
                                          "sourceRange": {
                                            "description": "The source ranges of the data.",
                                            "ChartSourceRange": {
                                              "type": "object",
                                              "properties": {
                                                "sources": {
                                                  "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                  "type": "array",
                                                  "properties": {
                                                    "GridRange": {
                                                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                      "type": "object",
                                                      "properties": {
                                                        "endRowIndex": {
                                                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "endColumnIndex": {
                                                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "sheetId": {
                                                          "description": "The sheet this range is on.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "id": "GridRange"
                                                    }
                                                  }
                                                }
                                              },
                                              "id": "ChartSourceRange",
                                              "description": "Source ranges for a chart."
                                            }
                                          }
                                        },
                                        "id": "ChartData"
                                      }
                                    },
                                    "bubbleBorderColor": {
                                      "description": "The bubble border color.",
                                      "Color": {
                                        "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                        "type": "object",
                                        "properties": {
                                          "red": {
                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "green": {
                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "blue": {
                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "alpha": {
                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                            "format": "float",
                                            "type": "number"
                                          }
                                        },
                                        "id": "Color"
                                      }
                                    },
                                    "bubbleTextStyle": {
                                      "description": "The format of the text inside the bubbles.\nUnderline and Strikethrough are not supported.",
                                      "TextFormat": {
                                        "id": "TextFormat",
                                        "description": "The format of a run of text in a cell.\nAbsent values indicate that the field isn't specified.",
                                        "type": "object",
                                        "properties": {
                                          "italic": {
                                            "description": "True if the text is italicized.",
                                            "type": "boolean"
                                          },
                                          "strikethrough": {
                                            "description": "True if the text has a strikethrough.",
                                            "type": "boolean"
                                          },
                                          "fontSize": {
                                            "description": "The size of the font.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "underline": {
                                            "description": "True if the text is underlined.",
                                            "type": "boolean"
                                          },
                                          "foregroundColor": {
                                            "description": "The foreground color of the text.",
                                            "Color": {
                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                              "type": "object",
                                              "properties": {
                                                "red": {
                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "green": {
                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "blue": {
                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "alpha": {
                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                  "format": "float",
                                                  "type": "number"
                                                }
                                              },
                                              "id": "Color"
                                            }
                                          },
                                          "bold": {
                                            "description": "True if the text is bold.",
                                            "type": "boolean"
                                          },
                                          "fontFamily": {
                                            "description": "The font family.",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "groupIds": {
                                      "description": "The data containing the bubble group IDs. All bubbles with the same group\nID are drawn in the same color. If bubble_sizes is specified then\nthis field must also be specified but may contain blank values.\nThis field is optional.",
                                      "ChartData": {
                                        "description": "The data included in a domain or series.",
                                        "type": "object",
                                        "properties": {
                                          "sourceRange": {
                                            "description": "The source ranges of the data.",
                                            "ChartSourceRange": {
                                              "type": "object",
                                              "properties": {
                                                "sources": {
                                                  "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                  "type": "array",
                                                  "properties": {
                                                    "GridRange": {
                                                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                      "type": "object",
                                                      "properties": {
                                                        "endRowIndex": {
                                                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "endColumnIndex": {
                                                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "sheetId": {
                                                          "description": "The sheet this range is on.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "id": "GridRange"
                                                    }
                                                  }
                                                }
                                              },
                                              "id": "ChartSourceRange",
                                              "description": "Source ranges for a chart."
                                            }
                                          }
                                        },
                                        "id": "ChartData"
                                      }
                                    },
                                    "bubbleLabels": {
                                      "description": "The data containing the bubble labels.  These do not need to be unique.",
                                      "ChartData": {
                                        "description": "The data included in a domain or series.",
                                        "type": "object",
                                        "properties": {
                                          "sourceRange": {
                                            "description": "The source ranges of the data.",
                                            "ChartSourceRange": {
                                              "type": "object",
                                              "properties": {
                                                "sources": {
                                                  "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                  "type": "array",
                                                  "properties": {
                                                    "GridRange": {
                                                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                      "type": "object",
                                                      "properties": {
                                                        "endRowIndex": {
                                                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "endColumnIndex": {
                                                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "sheetId": {
                                                          "description": "The sheet this range is on.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "id": "GridRange"
                                                    }
                                                  }
                                                }
                                              },
                                              "id": "ChartSourceRange",
                                              "description": "Source ranges for a chart."
                                            }
                                          }
                                        },
                                        "id": "ChartData"
                                      }
                                    },
                                    "bubbleMinRadiusSize": {
                                      "description": "The minimum radius size of the bubbles, in pixels.\nIf specific, the field must be a positive value.",
                                      "format": "int32",
                                      "type": "integer"
                                    }
                                  },
                                  "id": "BubbleChartSpec"
                                }
                              },
                              "waterfallChart": {
                                "description": "A waterfall chart specification.",
                                "WaterfallChartSpec": {
                                  "id": "WaterfallChartSpec",
                                  "description": "A waterfall chart.",
                                  "type": "object",
                                  "properties": {
                                    "stackedType": {
                                      "description": "The stacked type.",
                                      "type": "string",
                                      "enumDescriptions": [
                                        "Default value, do not use.",
                                        "Values corresponding to the same domain (horizontal axis) value will be\nstacked vertically.",
                                        "Series will spread out along the horizontal axis."
                                      ],
                                      "enum": [
                                        "WATERFALL_STACKED_TYPE_UNSPECIFIED",
                                        "STACKED",
                                        "SEQUENTIAL"
                                      ]
                                    },
                                    "hideConnectorLines": {
                                      "description": "True to hide connector lines between columns.",
                                      "type": "boolean"
                                    },
                                    "series": {
                                      "description": "The data this waterfall chart is visualizing.",
                                      "type": "array",
                                      "properties": {
                                        "WaterfallChartSeries": {
                                          "id": "WaterfallChartSeries",
                                          "description": "A single series of data for a waterfall chart.",
                                          "type": "object",
                                          "properties": {
                                            "positiveColumnsStyle": {
                                              "description": "Styles for all columns in this series with positive values.",
                                              "WaterfallChartColumnStyle": {
                                                "properties": {
                                                  "label": {
                                                    "description": "The label of the column's legend.",
                                                    "type": "string"
                                                  },
                                                  "color": {
                                                    "description": "The color of the column.",
                                                    "Color": {
                                                      "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                      "type": "object",
                                                      "properties": {
                                                        "red": {
                                                          "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                          "format": "float",
                                                          "type": "number"
                                                        },
                                                        "green": {
                                                          "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                          "format": "float",
                                                          "type": "number"
                                                        },
                                                        "blue": {
                                                          "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                          "format": "float",
                                                          "type": "number"
                                                        },
                                                        "alpha": {
                                                          "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                          "format": "float",
                                                          "type": "number"
                                                        }
                                                      },
                                                      "id": "Color"
                                                    }
                                                  }
                                                },
                                                "id": "WaterfallChartColumnStyle",
                                                "description": "Styles for a waterfall chart column.",
                                                "type": "object"
                                              }
                                            },
                                            "data": {
                                              "description": "The data being visualized in this series.",
                                              "ChartData": {
                                                "description": "The data included in a domain or series.",
                                                "type": "object",
                                                "properties": {
                                                  "sourceRange": {
                                                    "description": "The source ranges of the data.",
                                                    "ChartSourceRange": {
                                                      "type": "object",
                                                      "properties": {
                                                        "sources": {
                                                          "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                          "type": "array",
                                                          "properties": {
                                                            "GridRange": {
                                                              "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                              "type": "object",
                                                              "properties": {
                                                                "endRowIndex": {
                                                                  "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "endColumnIndex": {
                                                                  "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "startRowIndex": {
                                                                  "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "startColumnIndex": {
                                                                  "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                },
                                                                "sheetId": {
                                                                  "description": "The sheet this range is on.",
                                                                  "format": "int32",
                                                                  "type": "integer"
                                                                }
                                                              },
                                                              "id": "GridRange"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "id": "ChartSourceRange",
                                                      "description": "Source ranges for a chart."
                                                    }
                                                  }
                                                },
                                                "id": "ChartData"
                                              }
                                            },
                                            "negativeColumnsStyle": {
                                              "description": "Styles for all columns in this series with negative values.",
                                              "WaterfallChartColumnStyle": {
                                                "properties": {
                                                  "label": {
                                                    "description": "The label of the column's legend.",
                                                    "type": "string"
                                                  },
                                                  "color": {
                                                    "description": "The color of the column.",
                                                    "Color": {
                                                      "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                      "type": "object",
                                                      "properties": {
                                                        "red": {
                                                          "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                          "format": "float",
                                                          "type": "number"
                                                        },
                                                        "green": {
                                                          "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                          "format": "float",
                                                          "type": "number"
                                                        },
                                                        "blue": {
                                                          "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                          "format": "float",
                                                          "type": "number"
                                                        },
                                                        "alpha": {
                                                          "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                          "format": "float",
                                                          "type": "number"
                                                        }
                                                      },
                                                      "id": "Color"
                                                    }
                                                  }
                                                },
                                                "id": "WaterfallChartColumnStyle",
                                                "description": "Styles for a waterfall chart column.",
                                                "type": "object"
                                              }
                                            },
                                            "hideTrailingSubtotal": {
                                              "description": "True to hide the subtotal column from the end of the series. By default,\na subtotal column will appear at the end of each series. Setting this\nfield to true will hide that subtotal column for this series.",
                                              "type": "boolean"
                                            },
                                            "customSubtotals": {
                                              "description": "Custom subtotal columns appearing in this series. The order in which\nsubtotals are defined is not significant. Only one subtotal may be\ndefined for each data point.",
                                              "type": "array",
                                              "properties": {
                                                "WaterfallChartCustomSubtotal": {
                                                  "description": "A custom subtotal column for a waterfall chart series.",
                                                  "type": "object",
                                                  "properties": {
                                                    "dataIsSubtotal": {
                                                      "description": "True if the data point at subtotal_index is the subtotal. If false,\nthe subtotal will be computed and appear after the data point.",
                                                      "type": "boolean"
                                                    },
                                                    "label": {
                                                      "description": "A label for the subtotal column.",
                                                      "type": "string"
                                                    },
                                                    "subtotalIndex": {
                                                      "description": "The 0-based index of a data point within the series. If\ndata_is_subtotal is true, the data point at this index is the\nsubtotal. Otherwise, the subtotal appears after the data point with\nthis index. A series can have multiple subtotals at arbitrary indices,\nbut subtotals do not affect the indices of the data points. For\nexample, if a series has three data points, their indices will always\nbe 0, 1, and 2, regardless of how many subtotals exist on the series or\nwhat data points they are associated with.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    }
                                                  },
                                                  "id": "WaterfallChartCustomSubtotal"
                                                }
                                              }
                                            },
                                            "subtotalColumnsStyle": {
                                              "description": "Styles for all subtotal columns in this series.",
                                              "WaterfallChartColumnStyle": {
                                                "properties": {
                                                  "label": {
                                                    "description": "The label of the column's legend.",
                                                    "type": "string"
                                                  },
                                                  "color": {
                                                    "description": "The color of the column.",
                                                    "Color": {
                                                      "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                      "type": "object",
                                                      "properties": {
                                                        "red": {
                                                          "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                          "format": "float",
                                                          "type": "number"
                                                        },
                                                        "green": {
                                                          "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                          "format": "float",
                                                          "type": "number"
                                                        },
                                                        "blue": {
                                                          "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                          "format": "float",
                                                          "type": "number"
                                                        },
                                                        "alpha": {
                                                          "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                          "format": "float",
                                                          "type": "number"
                                                        }
                                                      },
                                                      "id": "Color"
                                                    }
                                                  }
                                                },
                                                "id": "WaterfallChartColumnStyle",
                                                "description": "Styles for a waterfall chart column.",
                                                "type": "object"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "connectorLineStyle": {
                                      "description": "The line style for the connector lines.",
                                      "LineStyle": {
                                        "description": "Properties that describe the style of a line.",
                                        "type": "object",
                                        "properties": {
                                          "width": {
                                            "description": "The thickness of the line, in px.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "type": {
                                            "enumDescriptions": [
                                              "Default value, do not use.",
                                              "No dash type, which is equivalent to a non-visible line.",
                                              "A custom dash for a line. Modifying the exact custom dash style is\ncurrently unsupported.",
                                              "A solid line.",
                                              "A dotted line.",
                                              "A dashed line where the dashes have \"medium\" length.",
                                              "A line that alternates between a \"medium\" dash and a dot.",
                                              "A dashed line where the dashes have \"long\" length.",
                                              "A line that alternates between a \"long\" dash and a dot."
                                            ],
                                            "enum": [
                                              "LINE_DASH_TYPE_UNSPECIFIED",
                                              "INVISIBLE",
                                              "CUSTOM",
                                              "SOLID",
                                              "DOTTED",
                                              "MEDIUM_DASHED",
                                              "MEDIUM_DASHED_DOTTED",
                                              "LONG_DASHED",
                                              "LONG_DASHED_DOTTED"
                                            ],
                                            "description": "The dash type of the line.",
                                            "type": "string"
                                          }
                                        },
                                        "id": "LineStyle"
                                      }
                                    },
                                    "domain": {
                                      "description": "The domain data (horizontal axis) for the waterfall chart.",
                                      "WaterfallChartDomain": {
                                        "properties": {
                                          "data": {
                                            "description": "The data of the WaterfallChartDomain.",
                                            "ChartData": {
                                              "description": "The data included in a domain or series.",
                                              "type": "object",
                                              "properties": {
                                                "sourceRange": {
                                                  "description": "The source ranges of the data.",
                                                  "ChartSourceRange": {
                                                    "type": "object",
                                                    "properties": {
                                                      "sources": {
                                                        "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                        "type": "array",
                                                        "properties": {
                                                          "GridRange": {
                                                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                            "type": "object",
                                                            "properties": {
                                                              "endRowIndex": {
                                                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                              },
                                                              "endColumnIndex": {
                                                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                              },
                                                              "startRowIndex": {
                                                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                              },
                                                              "startColumnIndex": {
                                                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                              },
                                                              "sheetId": {
                                                                "description": "The sheet this range is on.",
                                                                "format": "int32",
                                                                "type": "integer"
                                                              }
                                                            },
                                                            "id": "GridRange"
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "id": "ChartSourceRange",
                                                    "description": "Source ranges for a chart."
                                                  }
                                                }
                                              },
                                              "id": "ChartData"
                                            }
                                          },
                                          "reversed": {
                                            "description": "True to reverse the order of the domain values (horizontal axis).",
                                            "type": "boolean"
                                          }
                                        },
                                        "id": "WaterfallChartDomain",
                                        "description": "The domain of a waterfall chart.",
                                        "type": "object"
                                      }
                                    },
                                    "firstValueIsTotal": {
                                      "description": "True to interpret the first value as a total.",
                                      "type": "boolean"
                                    }
                                  }
                                }
                              },
                              "fontName": {
                                "description": "The name of the font to use by default for all chart text (e.g. title,\naxis labels, legend).  If a font is specified for a specific part of the\nchart it will override this font name.",
                                "type": "string"
                              },
                              "maximized": {
                                "description": "True to make a chart fill the entire space in which it's rendered with\nminimum padding.  False to use the default padding.\n(Not applicable to Geo and Org charts.)",
                                "type": "boolean"
                              },
                              "treemapChart": {
                                "description": "A treemap chart specification.",
                                "TreemapChartSpec": {
                                  "description": "A <a href=\"/chart/interactive/docs/gallery/treemap\">Treemap chart</a>.",
                                  "type": "object",
                                  "properties": {
                                    "sizeData": {
                                      "description": "The data that determines the size of each treemap data cell. This data is\nexpected to be numeric. The cells corresponding to non-numeric or missing\ndata will not be rendered. If color_data is not specified, this data\nis used to determine data cell background colors as well.",
                                      "ChartData": {
                                        "description": "The data included in a domain or series.",
                                        "type": "object",
                                        "properties": {
                                          "sourceRange": {
                                            "description": "The source ranges of the data.",
                                            "ChartSourceRange": {
                                              "type": "object",
                                              "properties": {
                                                "sources": {
                                                  "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                  "type": "array",
                                                  "properties": {
                                                    "GridRange": {
                                                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                      "type": "object",
                                                      "properties": {
                                                        "endRowIndex": {
                                                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "endColumnIndex": {
                                                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "sheetId": {
                                                          "description": "The sheet this range is on.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "id": "GridRange"
                                                    }
                                                  }
                                                }
                                              },
                                              "id": "ChartSourceRange",
                                              "description": "Source ranges for a chart."
                                            }
                                          }
                                        },
                                        "id": "ChartData"
                                      }
                                    },
                                    "textFormat": {
                                      "description": "The text format for all labels on the chart.",
                                      "TextFormat": {
                                        "id": "TextFormat",
                                        "description": "The format of a run of text in a cell.\nAbsent values indicate that the field isn't specified.",
                                        "type": "object",
                                        "properties": {
                                          "italic": {
                                            "description": "True if the text is italicized.",
                                            "type": "boolean"
                                          },
                                          "strikethrough": {
                                            "description": "True if the text has a strikethrough.",
                                            "type": "boolean"
                                          },
                                          "fontSize": {
                                            "description": "The size of the font.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "underline": {
                                            "description": "True if the text is underlined.",
                                            "type": "boolean"
                                          },
                                          "foregroundColor": {
                                            "description": "The foreground color of the text.",
                                            "Color": {
                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                              "type": "object",
                                              "properties": {
                                                "red": {
                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "green": {
                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "blue": {
                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "alpha": {
                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                  "format": "float",
                                                  "type": "number"
                                                }
                                              },
                                              "id": "Color"
                                            }
                                          },
                                          "bold": {
                                            "description": "True if the text is bold.",
                                            "type": "boolean"
                                          },
                                          "fontFamily": {
                                            "description": "The font family.",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "parentLabels": {
                                      "description": "The data the contains the treemap cells' parent labels.",
                                      "ChartData": {
                                        "description": "The data included in a domain or series.",
                                        "type": "object",
                                        "properties": {
                                          "sourceRange": {
                                            "description": "The source ranges of the data.",
                                            "ChartSourceRange": {
                                              "type": "object",
                                              "properties": {
                                                "sources": {
                                                  "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                  "type": "array",
                                                  "properties": {
                                                    "GridRange": {
                                                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                      "type": "object",
                                                      "properties": {
                                                        "endRowIndex": {
                                                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "endColumnIndex": {
                                                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "sheetId": {
                                                          "description": "The sheet this range is on.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "id": "GridRange"
                                                    }
                                                  }
                                                }
                                              },
                                              "id": "ChartSourceRange",
                                              "description": "Source ranges for a chart."
                                            }
                                          }
                                        },
                                        "id": "ChartData"
                                      }
                                    },
                                    "headerColor": {
                                      "description": "The background color for header cells.",
                                      "Color": {
                                        "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                        "type": "object",
                                        "properties": {
                                          "red": {
                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "green": {
                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "blue": {
                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "alpha": {
                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                            "format": "float",
                                            "type": "number"
                                          }
                                        },
                                        "id": "Color"
                                      }
                                    },
                                    "labels": {
                                      "description": "The data that contains the treemap cell labels.",
                                      "ChartData": {
                                        "description": "The data included in a domain or series.",
                                        "type": "object",
                                        "properties": {
                                          "sourceRange": {
                                            "description": "The source ranges of the data.",
                                            "ChartSourceRange": {
                                              "type": "object",
                                              "properties": {
                                                "sources": {
                                                  "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                  "type": "array",
                                                  "properties": {
                                                    "GridRange": {
                                                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                      "type": "object",
                                                      "properties": {
                                                        "endRowIndex": {
                                                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "endColumnIndex": {
                                                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "sheetId": {
                                                          "description": "The sheet this range is on.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "id": "GridRange"
                                                    }
                                                  }
                                                }
                                              },
                                              "id": "ChartSourceRange",
                                              "description": "Source ranges for a chart."
                                            }
                                          }
                                        },
                                        "id": "ChartData"
                                      }
                                    },
                                    "colorData": {
                                      "description": "The data that determines the background color of each treemap data cell.\nThis field is optional. If not specified, size_data is used to\ndetermine background colors. If specified, the data is expected to be\nnumeric. color_scale will determine how the values in this data map to\ndata cell background colors.",
                                      "ChartData": {
                                        "description": "The data included in a domain or series.",
                                        "type": "object",
                                        "properties": {
                                          "sourceRange": {
                                            "description": "The source ranges of the data.",
                                            "ChartSourceRange": {
                                              "type": "object",
                                              "properties": {
                                                "sources": {
                                                  "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
                                                  "type": "array",
                                                  "properties": {
                                                    "GridRange": {
                                                      "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                      "type": "object",
                                                      "properties": {
                                                        "endRowIndex": {
                                                          "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "endColumnIndex": {
                                                          "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startRowIndex": {
                                                          "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "startColumnIndex": {
                                                          "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        },
                                                        "sheetId": {
                                                          "description": "The sheet this range is on.",
                                                          "format": "int32",
                                                          "type": "integer"
                                                        }
                                                      },
                                                      "id": "GridRange"
                                                    }
                                                  }
                                                }
                                              },
                                              "id": "ChartSourceRange",
                                              "description": "Source ranges for a chart."
                                            }
                                          }
                                        },
                                        "id": "ChartData"
                                      }
                                    },
                                    "maxValue": {
                                      "description": "The maximum possible data value. Cells with values greater than this will\nhave the same color as cells with this value. If not specified, defaults\nto the actual maximum value from color_data, or the maximum value from\nsize_data if color_data is not specified.",
                                      "format": "double",
                                      "type": "number"
                                    },
                                    "colorScale": {
                                      "description": "The color scale for data cells in the treemap chart. Data cells are\nassigned colors based on their color values. These color values come from\ncolor_data, or from size_data if color_data is not specified.\nCells with color values less than or equal to min_value will\nhave minValueColor as their\nbackground color. Cells with color values greater than or equal to\nmax_value will have\nmaxValueColor as their background\ncolor. Cells with color values between min_value and max_value will\nhave background colors on a gradient between\nminValueColor and\nmaxValueColor, the midpoint of\nthe gradient being midValueColor.\nCells with missing or non-numeric color values will have\nnoDataColor as their background\ncolor.",
                                      "TreemapChartColorScale": {
                                        "description": "A color scale for a treemap chart.",
                                        "type": "object",
                                        "properties": {
                                          "minValueColor": {
                                            "description": "The background color for cells with a color value less than or equal to\nminValue. Defaults to #dc3912 if not\nspecified.",
                                            "Color": {
                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                              "type": "object",
                                              "properties": {
                                                "red": {
                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "green": {
                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "blue": {
                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "alpha": {
                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                  "format": "float",
                                                  "type": "number"
                                                }
                                              },
                                              "id": "Color"
                                            }
                                          },
                                          "noDataColor": {
                                            "description": "The background color for cells that have no color data associated with\nthem. Defaults to #000000 if not specified.",
                                            "Color": {
                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                              "type": "object",
                                              "properties": {
                                                "red": {
                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "green": {
                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "blue": {
                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "alpha": {
                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                  "format": "float",
                                                  "type": "number"
                                                }
                                              },
                                              "id": "Color"
                                            }
                                          },
                                          "midValueColor": {
                                            "description": "The background color for cells with a color value at the midpoint between\nminValue and\nmaxValue. Defaults to #efe6dc if not\nspecified.",
                                            "Color": {
                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                              "type": "object",
                                              "properties": {
                                                "red": {
                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "green": {
                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "blue": {
                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "alpha": {
                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                  "format": "float",
                                                  "type": "number"
                                                }
                                              },
                                              "id": "Color"
                                            }
                                          },
                                          "maxValueColor": {
                                            "description": "The background color for cells with a color value greater than or equal\nto maxValue. Defaults to #109618 if not\nspecified.",
                                            "Color": {
                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                              "type": "object",
                                              "properties": {
                                                "red": {
                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "green": {
                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "blue": {
                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "alpha": {
                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                  "format": "float",
                                                  "type": "number"
                                                }
                                              },
                                              "id": "Color"
                                            }
                                          }
                                        },
                                        "id": "TreemapChartColorScale"
                                      }
                                    },
                                    "hideTooltips": {
                                      "description": "True to hide tooltips.",
                                      "type": "boolean"
                                    },
                                    "hintedLevels": {
                                      "description": "The number of additional data levels beyond the labeled levels to be shown\non the treemap chart. These levels are not interactive and are shown\nwithout their labels. Defaults to 0 if not specified.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "minValue": {
                                      "description": "The minimum possible data value. Cells with values less than this will\nhave the same color as cells with this value. If not specified, defaults\nto the actual minimum value from color_data, or the minimum value from\nsize_data if color_data is not specified.",
                                      "format": "double",
                                      "type": "number"
                                    },
                                    "levels": {
                                      "description": "The number of data levels to show on the treemap chart. These levels are\ninteractive and are shown with their labels. Defaults to 2 if not\nspecified.",
                                      "format": "int32",
                                      "type": "integer"
                                    }
                                  },
                                  "id": "TreemapChartSpec"
                                }
                              },
                              "hiddenDimensionStrategy": {
                                "enumDescriptions": [
                                  "Default value, do not use.",
                                  "Charts will skip hidden rows and columns.",
                                  "Charts will skip hidden rows only.",
                                  "Charts will skip hidden columns only.",
                                  "Charts will not skip any hidden rows or columns."
                                ],
                                "enum": [
                                  "CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED",
                                  "SKIP_HIDDEN_ROWS_AND_COLUMNS",
                                  "SKIP_HIDDEN_ROWS",
                                  "SKIP_HIDDEN_COLUMNS",
                                  "SHOW_ALL"
                                ],
                                "description": "Determines how the charts will use hidden rows or columns.",
                                "type": "string"
                              },
                              "subtitleTextFormat": {
                                "description": "The subtitle text format.\nStrikethrough and underline are not supported.",
                                "TextFormat": {
                                  "id": "TextFormat",
                                  "description": "The format of a run of text in a cell.\nAbsent values indicate that the field isn't specified.",
                                  "type": "object",
                                  "properties": {
                                    "italic": {
                                      "description": "True if the text is italicized.",
                                      "type": "boolean"
                                    },
                                    "strikethrough": {
                                      "description": "True if the text has a strikethrough.",
                                      "type": "boolean"
                                    },
                                    "fontSize": {
                                      "description": "The size of the font.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "underline": {
                                      "description": "True if the text is underlined.",
                                      "type": "boolean"
                                    },
                                    "foregroundColor": {
                                      "description": "The foreground color of the text.",
                                      "Color": {
                                        "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                        "type": "object",
                                        "properties": {
                                          "red": {
                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "green": {
                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "blue": {
                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "alpha": {
                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                            "format": "float",
                                            "type": "number"
                                          }
                                        },
                                        "id": "Color"
                                      }
                                    },
                                    "bold": {
                                      "description": "True if the text is bold.",
                                      "type": "boolean"
                                    },
                                    "fontFamily": {
                                      "description": "The font family.",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "subtitle": {
                                "description": "The subtitle of the chart.",
                                "type": "string"
                              },
                              "backgroundColor": {
                                "description": "The background color of the entire chart.\nNot applicable to Org charts.",
                                "Color": {
                                  "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                  "type": "object",
                                  "properties": {
                                    "red": {
                                      "description": "The amount of red in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "green": {
                                      "description": "The amount of green in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "blue": {
                                      "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                      "format": "float",
                                      "type": "number"
                                    },
                                    "alpha": {
                                      "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                      "format": "float",
                                      "type": "number"
                                    }
                                  },
                                  "id": "Color"
                                }
                              },
                              "subtitleTextPosition": {
                                "description": "The subtitle text position.\nThis field is optional.",
                                "TextPosition": {
                                  "description": "Position settings for text.",
                                  "type": "object",
                                  "properties": {
                                    "horizontalAlignment": {
                                      "enumDescriptions": [
                                        "The horizontal alignment is not specified. Do not use this.",
                                        "The text is explicitly aligned to the left of the cell.",
                                        "The text is explicitly aligned to the center of the cell.",
                                        "The text is explicitly aligned to the right of the cell."
                                      ],
                                      "enum": [
                                        "HORIZONTAL_ALIGN_UNSPECIFIED",
                                        "LEFT",
                                        "CENTER",
                                        "RIGHT"
                                      ],
                                      "description": "Horizontal alignment setting for the piece of text.",
                                      "type": "string"
                                    }
                                  },
                                  "id": "TextPosition"
                                }
                              }
                            },
                            "id": "ChartSpec"
                          }
                        },
                        "chartId": {
                          "description": "The ID of the chart.",
                          "format": "int32",
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "filterViews": {
                  "description": "The filter views in this sheet.",
                  "type": "array",
                  "properties": {
                    "FilterView": {
                      "description": "A filter view.",
                      "type": "object",
                      "properties": {
                        "filterViewId": {
                          "description": "The ID of the filter view.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "criteria": {
                          "additionalProperties": {
                            "FilterCriteria": {
                              "type": "object",
                              "properties": {
                                "hiddenValues": {
                                  "type": "array",
                                  "description": "Values that should be hidden.",
                                  "properties": {
                                    "type": "string"
                                  }
                                },
                                "condition": {
                                  "description": "A condition that must be true for values to be shown.\n(This does not override hiddenValues -- if a value is listed there,\n it will still be hidden.)",
                                  "BooleanCondition": {
                                    "description": "A condition that can evaluate to true or false.\nBooleanConditions are used by conditional formatting,\ndata validation, and the criteria in filters.",
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "enum": [
                                          "CONDITION_TYPE_UNSPECIFIED",
                                          "NUMBER_GREATER",
                                          "NUMBER_GREATER_THAN_EQ",
                                          "NUMBER_LESS",
                                          "NUMBER_LESS_THAN_EQ",
                                          "NUMBER_EQ",
                                          "NUMBER_NOT_EQ",
                                          "NUMBER_BETWEEN",
                                          "NUMBER_NOT_BETWEEN",
                                          "TEXT_CONTAINS",
                                          "TEXT_NOT_CONTAINS",
                                          "TEXT_STARTS_WITH",
                                          "TEXT_ENDS_WITH",
                                          "TEXT_EQ",
                                          "TEXT_IS_EMAIL",
                                          "TEXT_IS_URL",
                                          "DATE_EQ",
                                          "DATE_BEFORE",
                                          "DATE_AFTER",
                                          "DATE_ON_OR_BEFORE",
                                          "DATE_ON_OR_AFTER",
                                          "DATE_BETWEEN",
                                          "DATE_NOT_BETWEEN",
                                          "DATE_IS_VALID",
                                          "ONE_OF_RANGE",
                                          "ONE_OF_LIST",
                                          "BLANK",
                                          "NOT_BLANK",
                                          "CUSTOM_FORMULA",
                                          "BOOLEAN"
                                        ],
                                        "description": "The type of condition.",
                                        "type": "string",
                                        "enumDescriptions": [
                                          "The default value, do not use.",
                                          "The cell's value must be greater than the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                          "The cell's value must be greater than or equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                          "The cell's value must be less than the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                          "The cell's value must be less than or equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                          "The cell's value must be equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                          "The cell's value must be not equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                          "The cell's value must be between the two condition values.\nSupported by data validation, conditional formatting and filters.\nRequires exactly two ConditionValues.",
                                          "The cell's value must not be between the two condition values.\nSupported by data validation, conditional formatting and filters.\nRequires exactly two ConditionValues.",
                                          "The cell's value must contain the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                          "The cell's value must not contain the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                          "The cell's value must start with the condition's value.\nSupported by conditional formatting and filters.\nRequires a single ConditionValue.",
                                          "The cell's value must end with the condition's value.\nSupported by conditional formatting and filters.\nRequires a single ConditionValue.",
                                          "The cell's value must be exactly the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                          "The cell's value must be a valid email address.\nSupported by data validation.\nRequires no ConditionValues.",
                                          "The cell's value must be a valid URL.\nSupported by data validation.\nRequires no ConditionValues.",
                                          "The cell's value must be the same date as the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                          "The cell's value must be before the date of the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue\nthat may be a relative date.",
                                          "The cell's value must be after the date of the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue\nthat may be a relative date.",
                                          "The cell's value must be on or before the date of the condition's value.\nSupported by data validation.\nRequires a single ConditionValue\nthat may be a relative date.",
                                          "The cell's value must be on or after the date of the condition's value.\nSupported by data validation.\nRequires a single ConditionValue\nthat may be a relative date.",
                                          "The cell's value must be between the dates of the two condition values.\nSupported by data validation.\nRequires exactly two ConditionValues.",
                                          "The cell's value must be outside the dates of the two condition values.\nSupported by data validation.\nRequires exactly two ConditionValues.",
                                          "The cell's value must be a date.\nSupported by data validation.\nRequires no ConditionValues.",
                                          "The cell's value must be listed in the grid in condition value's range.\nSupported by data validation.\nRequires a single ConditionValue,\nand the value must be a valid range in A1 notation.",
                                          "The cell's value must be in the list of condition values.\nSupported by data validation.\nSupports any number of condition values,\none per item in the list.\nFormulas are not supported in the values.",
                                          "The cell's value must be empty.\nSupported by conditional formatting and filters.\nRequires no ConditionValues.",
                                          "The cell's value must not be empty.\nSupported by conditional formatting and filters.\nRequires no ConditionValues.",
                                          "The condition's formula must evaluate to true.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                          "The cell's value must be TRUE/FALSE or in the list of condition values.\nSupported by data validation.\nRenders as a cell checkbox.\nSupports zero, one or two ConditionValues.  No\nvalues indicates the cell must be TRUE or FALSE, where TRUE renders as\nchecked and FALSE renders as unchecked.  One value indicates the cell\nwill render as checked when it contains that value and unchecked when it\nis blank.  Two values indicate that the cell will render as checked when\nit contains the first value and unchecked when it contains the second\nvalue.  For example, [\"Yes\",\"No\"] indicates that the cell will render a\nchecked box when it has the value \"Yes\" and an unchecked box when it has\nthe value \"No\"."
                                        ]
                                      },
                                      "values": {
                                        "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
                                        "type": "array",
                                        "properties": {
                                          "ConditionValue": {
                                            "id": "ConditionValue",
                                            "description": "The value of the condition.",
                                            "type": "object",
                                            "properties": {
                                              "relativeDate": {
                                                "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
                                                "type": "string",
                                                "enumDescriptions": [
                                                  "Default value, do not use.",
                                                  "The value is one year before today.",
                                                  "The value is one month before today.",
                                                  "The value is one week before today.",
                                                  "The value is yesterday.",
                                                  "The value is today.",
                                                  "The value is tomorrow."
                                                ],
                                                "enum": [
                                                  "RELATIVE_DATE_UNSPECIFIED",
                                                  "PAST_YEAR",
                                                  "PAST_MONTH",
                                                  "PAST_WEEK",
                                                  "YESTERDAY",
                                                  "TODAY",
                                                  "TOMORROW"
                                                ]
                                              },
                                              "userEnteredValue": {
                                                "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "id": "BooleanCondition"
                                  }
                                }
                              },
                              "id": "FilterCriteria",
                              "description": "Criteria for showing/hiding rows in a filter or filter view."
                            }
                          },
                          "description": "The criteria for showing/hiding values per column.\nThe map's key is the column index, and the value is the criteria for\nthat column.",
                          "type": "object"
                        },
                        "title": {
                          "description": "The name of the filter view.",
                          "type": "string"
                        },
                        "range": {
                          "description": "The range this filter view covers.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
                          "GridRange": {
                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                            "type": "object",
                            "properties": {
                              "endRowIndex": {
                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "endColumnIndex": {
                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "startRowIndex": {
                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "startColumnIndex": {
                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "sheetId": {
                                "description": "The sheet this range is on.",
                                "format": "int32",
                                "type": "integer"
                              }
                            },
                            "id": "GridRange"
                          }
                        },
                        "sortSpecs": {
                          "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
                          "type": "array",
                          "properties": {
                            "SortSpec": {
                              "description": "A sort order associated with a specific column or row.",
                              "type": "object",
                              "properties": {
                                "sortOrder": {
                                  "description": "The order data should be sorted.",
                                  "type": "string",
                                  "enumDescriptions": [
                                    "Default value, do not use this.",
                                    "Sort ascending.",
                                    "Sort descending."
                                  ],
                                  "enum": [
                                    "SORT_ORDER_UNSPECIFIED",
                                    "ASCENDING",
                                    "DESCENDING"
                                  ]
                                },
                                "dimensionIndex": {
                                  "description": "The dimension the sort should be applied to.",
                                  "format": "int32",
                                  "type": "integer"
                                }
                              },
                              "id": "SortSpec"
                            }
                          }
                        },
                        "namedRangeId": {
                          "description": "The named range this filter view is backed by, if any.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
                          "type": "string"
                        }
                      },
                      "id": "FilterView"
                    }
                  }
                },
                "rowGroups": {
                  "description": "All row groups on this sheet, ordered by increasing range start index, then\nby group depth.",
                  "type": "array",
                  "properties": {
                    "DimensionGroup": {
                      "description": "A group over an interval of rows or columns on a sheet, which can contain or\nbe contained within other groups. A group can be collapsed or expanded as a\nunit on the sheet.",
                      "type": "object",
                      "properties": {
                        "collapsed": {
                          "description": "This field is true if this group is collapsed. A collapsed group remains\ncollapsed if an overlapping group at a shallower depth is expanded.\n\nA true value does not imply that all dimensions within the group are\nhidden, since a dimension's visibility can change independently from this\ngroup property. However, when this property is updated, all dimensions\nwithin it are set to hidden if this field is true, or set to visible if\nthis field is false.",
                          "type": "boolean"
                        },
                        "range": {
                          "description": "The range over which this group exists.",
                          "DimensionRange": {
                            "description": "A range along a single dimension on a sheet.\nAll indexes are zero-based.\nIndexes are half open: the start index is inclusive\nand the end index is exclusive.\nMissing indexes indicate the range is unbounded on that side.",
                            "type": "object",
                            "properties": {
                              "dimension": {
                                "description": "The dimension of the span.",
                                "type": "string",
                                "enumDescriptions": [
                                  "The default value, do not use.",
                                  "Operates on the rows of a sheet.",
                                  "Operates on the columns of a sheet."
                                ],
                                "enum": [
                                  "DIMENSION_UNSPECIFIED",
                                  "ROWS",
                                  "COLUMNS"
                                ]
                              },
                              "startIndex": {
                                "description": "The start (inclusive) of the span, or not set if unbounded.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "endIndex": {
                                "type": "integer",
                                "description": "The end (exclusive) of the span, or not set if unbounded.",
                                "format": "int32"
                              },
                              "sheetId": {
                                "description": "The sheet this span is on.",
                                "format": "int32",
                                "type": "integer"
                              }
                            },
                            "id": "DimensionRange"
                          }
                        },
                        "depth": {
                          "description": "The depth of the group, representing how many groups have a range that\nwholly contains the range of this group.",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "id": "DimensionGroup"
                    }
                  }
                },
                "data": {
                  "description": "Data in the grid, if this is a grid sheet.\nThe number of GridData objects returned is dependent on the number of\nranges requested on this sheet. For example, if this is representing\n`Sheet1`, and the spreadsheet was requested with ranges\n`Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a\nstartRow/startColumn of `0`,\nwhile the second one will have `startRow 14` (zero-based row 15),\nand `startColumn 3` (zero-based column D).",
                  "type": "array",
                  "properties": {
                    "GridData": {
                      "description": "Data in the grid, as well as metadata about the dimensions.",
                      "type": "object",
                      "properties": {
                        "columnMetadata": {
                          "description": "Metadata about the requested columns in the grid, starting with the column\nin start_column.",
                          "type": "array",
                          "properties": {
                            "DimensionProperties": {
                              "id": "DimensionProperties",
                              "description": "Properties about a dimension.",
                              "type": "object",
                              "properties": {
                                "pixelSize": {
                                  "description": "The height (if a row) or width (if a column) of the dimension in pixels.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "hiddenByFilter": {
                                  "description": "True if this dimension is being filtered.\nThis field is read-only.",
                                  "type": "boolean"
                                },
                                "hiddenByUser": {
                                  "description": "True if this dimension is explicitly hidden.",
                                  "type": "boolean"
                                },
                                "developerMetadata": {
                                  "description": "The developer metadata associated with a single row or column.",
                                  "type": "array",
                                  "properties": {
                                    "DeveloperMetadata": {
                                      "id": "DeveloperMetadata",
                                      "description": "Developer metadata associated with a location or object in a spreadsheet.\nDeveloper metadata may be used to associate arbitrary data with various\nparts of a spreadsheet and will remain associated at those locations as they\nmove around and the spreadsheet is edited.  For example, if developer\nmetadata is associated with row 5 and another row is then subsequently\ninserted above row 5, that original metadata will still be associated with\nthe row it was first associated with (what is now row 6). If the associated\nobject is deleted its metadata is deleted too.",
                                      "type": "object",
                                      "properties": {
                                        "metadataValue": {
                                          "description": "Data associated with the metadata's key.",
                                          "type": "string"
                                        },
                                        "metadataKey": {
                                          "description": "The metadata key. There may be multiple metadata in a spreadsheet with the\nsame key.  Developer metadata must always have a key specified.",
                                          "type": "string"
                                        },
                                        "metadataId": {
                                          "description": "The spreadsheet-scoped unique ID that identifies the metadata. IDs may be\nspecified when metadata is created, otherwise one will be randomly\ngenerated and assigned. Must be positive.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "location": {
                                          "description": "The location where the metadata is associated.",
                                          "DeveloperMetadataLocation": {
                                            "description": "A location where metadata may be associated in a spreadsheet.",
                                            "type": "object",
                                            "properties": {
                                              "dimensionRange": {
                                                "description": "Represents the row or column when metadata is associated with\na dimension. The specified DimensionRange must represent a single row\nor column; it cannot be unbounded or span multiple rows or columns.",
                                                "DimensionRange": {
                                                  "description": "A range along a single dimension on a sheet.\nAll indexes are zero-based.\nIndexes are half open: the start index is inclusive\nand the end index is exclusive.\nMissing indexes indicate the range is unbounded on that side.",
                                                  "type": "object",
                                                  "properties": {
                                                    "dimension": {
                                                      "description": "The dimension of the span.",
                                                      "type": "string",
                                                      "enumDescriptions": [
                                                        "The default value, do not use.",
                                                        "Operates on the rows of a sheet.",
                                                        "Operates on the columns of a sheet."
                                                      ],
                                                      "enum": [
                                                        "DIMENSION_UNSPECIFIED",
                                                        "ROWS",
                                                        "COLUMNS"
                                                      ]
                                                    },
                                                    "startIndex": {
                                                      "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    },
                                                    "endIndex": {
                                                      "type": "integer",
                                                      "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                      "format": "int32"
                                                    },
                                                    "sheetId": {
                                                      "description": "The sheet this span is on.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    }
                                                  },
                                                  "id": "DimensionRange"
                                                }
                                              },
                                              "spreadsheet": {
                                                "description": "True when metadata is associated with an entire spreadsheet.",
                                                "type": "boolean"
                                              },
                                              "sheetId": {
                                                "description": "The ID of the sheet when metadata is associated with an entire sheet.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "locationType": {
                                                "enumDescriptions": [
                                                  "Default value.",
                                                  "Developer metadata associated on an entire row dimension.",
                                                  "Developer metadata associated on an entire column dimension.",
                                                  "Developer metadata associated on an entire sheet.",
                                                  "Developer metadata associated on the entire spreadsheet."
                                                ],
                                                "enum": [
                                                  "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                                  "ROW",
                                                  "COLUMN",
                                                  "SHEET",
                                                  "SPREADSHEET"
                                                ],
                                                "description": "The type of location this object represents.  This field is read-only.",
                                                "type": "string"
                                              }
                                            },
                                            "id": "DeveloperMetadataLocation"
                                          }
                                        },
                                        "visibility": {
                                          "description": "The metadata visibility.  Developer metadata must always have a visibility\nspecified.",
                                          "type": "string",
                                          "enumDescriptions": [
                                            "Default value.",
                                            "Document-visible metadata is accessible from any developer project with\naccess to the document.",
                                            "Project-visible metadata is only visible to and accessible by the developer\nproject that created the metadata."
                                          ],
                                          "enum": [
                                            "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                                            "DOCUMENT",
                                            "PROJECT"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "startColumn": {
                          "description": "The first column this GridData refers to, zero-based.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "rowMetadata": {
                          "description": "Metadata about the requested rows in the grid, starting with the row\nin start_row.",
                          "type": "array",
                          "properties": {
                            "DimensionProperties": {
                              "id": "DimensionProperties",
                              "description": "Properties about a dimension.",
                              "type": "object",
                              "properties": {
                                "pixelSize": {
                                  "description": "The height (if a row) or width (if a column) of the dimension in pixels.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "hiddenByFilter": {
                                  "description": "True if this dimension is being filtered.\nThis field is read-only.",
                                  "type": "boolean"
                                },
                                "hiddenByUser": {
                                  "description": "True if this dimension is explicitly hidden.",
                                  "type": "boolean"
                                },
                                "developerMetadata": {
                                  "description": "The developer metadata associated with a single row or column.",
                                  "type": "array",
                                  "properties": {
                                    "DeveloperMetadata": {
                                      "id": "DeveloperMetadata",
                                      "description": "Developer metadata associated with a location or object in a spreadsheet.\nDeveloper metadata may be used to associate arbitrary data with various\nparts of a spreadsheet and will remain associated at those locations as they\nmove around and the spreadsheet is edited.  For example, if developer\nmetadata is associated with row 5 and another row is then subsequently\ninserted above row 5, that original metadata will still be associated with\nthe row it was first associated with (what is now row 6). If the associated\nobject is deleted its metadata is deleted too.",
                                      "type": "object",
                                      "properties": {
                                        "metadataValue": {
                                          "description": "Data associated with the metadata's key.",
                                          "type": "string"
                                        },
                                        "metadataKey": {
                                          "description": "The metadata key. There may be multiple metadata in a spreadsheet with the\nsame key.  Developer metadata must always have a key specified.",
                                          "type": "string"
                                        },
                                        "metadataId": {
                                          "description": "The spreadsheet-scoped unique ID that identifies the metadata. IDs may be\nspecified when metadata is created, otherwise one will be randomly\ngenerated and assigned. Must be positive.",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "location": {
                                          "description": "The location where the metadata is associated.",
                                          "DeveloperMetadataLocation": {
                                            "description": "A location where metadata may be associated in a spreadsheet.",
                                            "type": "object",
                                            "properties": {
                                              "dimensionRange": {
                                                "description": "Represents the row or column when metadata is associated with\na dimension. The specified DimensionRange must represent a single row\nor column; it cannot be unbounded or span multiple rows or columns.",
                                                "DimensionRange": {
                                                  "description": "A range along a single dimension on a sheet.\nAll indexes are zero-based.\nIndexes are half open: the start index is inclusive\nand the end index is exclusive.\nMissing indexes indicate the range is unbounded on that side.",
                                                  "type": "object",
                                                  "properties": {
                                                    "dimension": {
                                                      "description": "The dimension of the span.",
                                                      "type": "string",
                                                      "enumDescriptions": [
                                                        "The default value, do not use.",
                                                        "Operates on the rows of a sheet.",
                                                        "Operates on the columns of a sheet."
                                                      ],
                                                      "enum": [
                                                        "DIMENSION_UNSPECIFIED",
                                                        "ROWS",
                                                        "COLUMNS"
                                                      ]
                                                    },
                                                    "startIndex": {
                                                      "description": "The start (inclusive) of the span, or not set if unbounded.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    },
                                                    "endIndex": {
                                                      "type": "integer",
                                                      "description": "The end (exclusive) of the span, or not set if unbounded.",
                                                      "format": "int32"
                                                    },
                                                    "sheetId": {
                                                      "description": "The sheet this span is on.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    }
                                                  },
                                                  "id": "DimensionRange"
                                                }
                                              },
                                              "spreadsheet": {
                                                "description": "True when metadata is associated with an entire spreadsheet.",
                                                "type": "boolean"
                                              },
                                              "sheetId": {
                                                "description": "The ID of the sheet when metadata is associated with an entire sheet.",
                                                "format": "int32",
                                                "type": "integer"
                                              },
                                              "locationType": {
                                                "enumDescriptions": [
                                                  "Default value.",
                                                  "Developer metadata associated on an entire row dimension.",
                                                  "Developer metadata associated on an entire column dimension.",
                                                  "Developer metadata associated on an entire sheet.",
                                                  "Developer metadata associated on the entire spreadsheet."
                                                ],
                                                "enum": [
                                                  "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                                  "ROW",
                                                  "COLUMN",
                                                  "SHEET",
                                                  "SPREADSHEET"
                                                ],
                                                "description": "The type of location this object represents.  This field is read-only.",
                                                "type": "string"
                                              }
                                            },
                                            "id": "DeveloperMetadataLocation"
                                          }
                                        },
                                        "visibility": {
                                          "description": "The metadata visibility.  Developer metadata must always have a visibility\nspecified.",
                                          "type": "string",
                                          "enumDescriptions": [
                                            "Default value.",
                                            "Document-visible metadata is accessible from any developer project with\naccess to the document.",
                                            "Project-visible metadata is only visible to and accessible by the developer\nproject that created the metadata."
                                          ],
                                          "enum": [
                                            "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                                            "DOCUMENT",
                                            "PROJECT"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "rowData": {
                          "description": "The data in the grid, one entry per row,\nstarting with the row in startRow.\nThe values in RowData will correspond to columns starting\nat start_column.",
                          "type": "array",
                          "properties": {
                            "RowData": {
                              "id": "RowData",
                              "description": "Data about each cell in a row.",
                              "type": "object",
                              "properties": {
                                "values": {
                                  "description": "The values in the row, one per column.",
                                  "type": "array",
                                  "properties": {
                                    "CellData": {
                                      "description": "Data about a specific cell.",
                                      "type": "object",
                                      "properties": {
                                        "pivotTable": {
                                          "description": "A pivot table anchored at this cell. The size of pivot table itself\nis computed dynamically based on its data, grouping, filters, values,\netc. Only the top-left cell of the pivot table contains the pivot table\ndefinition. The other cells will contain the calculated values of the\nresults of the pivot in their effective_value fields.",
                                          "PivotTable": {
                                            "description": "A pivot table.",
                                            "type": "object",
                                            "properties": {
                                              "criteria": {
                                                "type": "object",
                                                "additionalProperties": {
                                                  "PivotFilterCriteria": {
                                                    "type": "object",
                                                    "properties": {
                                                      "visibleValues": {
                                                        "description": "Values that should be included.  Values not listed here are excluded.",
                                                        "type": "array",
                                                        "properties": {
                                                          "type": "string"
                                                        }
                                                      }
                                                    },
                                                    "id": "PivotFilterCriteria",
                                                    "description": "Criteria for showing/hiding rows in a pivot table."
                                                  }
                                                },
                                                "description": "An optional mapping of filters per source column offset.\n\nThe filters are applied before aggregating data into the pivot table.\nThe map's key is the column offset of the source range that you want to\nfilter, and the value is the criteria for that column.\n\nFor example, if the source was `C10:E15`, a key of `0` will have the filter\nfor column `C`, whereas the key `1` is for column `D`."
                                              },
                                              "rows": {
                                                "description": "Each row grouping in the pivot table.",
                                                "type": "array",
                                                "properties": {
                                                  "PivotGroup": {
                                                    "description": "A single grouping (either row or column) in a pivot table.",
                                                    "type": "object",
                                                    "properties": {
                                                      "valueBucket": {
                                                        "description": "The bucket of the opposite pivot group to sort by.\nIf not specified, sorting is alphabetical by this group's values.",
                                                        "PivotGroupSortValueBucket": {
                                                          "id": "PivotGroupSortValueBucket",
                                                          "description": "Information about which values in a pivot group should be used for sorting.",
                                                          "type": "object",
                                                          "properties": {
                                                            "buckets": {
                                                              "description": "Determines the bucket from which values are chosen to sort.\n\nFor example, in a pivot table with one row group & two column groups,\nthe row group can list up to two values. The first value corresponds\nto a value within the first column group, and the second value\ncorresponds to a value in the second column group.  If no values\nare listed, this would indicate that the row should be sorted according\nto the \"Grand Total\" over the column groups. If a single value is listed,\nthis would correspond to using the \"Total\" of that bucket.",
                                                              "type": "array",
                                                              "properties": {
                                                                "ExtendedValue": {
                                                                  "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                  "type": "object",
                                                                  "properties": {
                                                                    "stringValue": {
                                                                      "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                      "type": "string"
                                                                    },
                                                                    "boolValue": {
                                                                      "description": "Represents a boolean value.",
                                                                      "type": "boolean"
                                                                    },
                                                                    "formulaValue": {
                                                                      "description": "Represents a formula.",
                                                                      "type": "string"
                                                                    },
                                                                    "numberValue": {
                                                                      "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                      "format": "double",
                                                                      "type": "number"
                                                                    },
                                                                    "errorValue": {
                                                                      "description": "Represents an error.\nThis field is read-only.",
                                                                      "ErrorValue": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                          "type": {
                                                                            "enumDescriptions": [
                                                                              "The default error type, do not use this.",
                                                                              "Corresponds to the `#ERROR!` error.",
                                                                              "Corresponds to the `#NULL!` error.",
                                                                              "Corresponds to the `#DIV/0` error.",
                                                                              "Corresponds to the `#VALUE!` error.",
                                                                              "Corresponds to the `#REF!` error.",
                                                                              "Corresponds to the `#NAME?` error.",
                                                                              "Corresponds to the `#NUM`! error.",
                                                                              "Corresponds to the `#N/A` error.",
                                                                              "Corresponds to the `Loading...` state."
                                                                            ],
                                                                            "enum": [
                                                                              "ERROR_TYPE_UNSPECIFIED",
                                                                              "ERROR",
                                                                              "NULL_VALUE",
                                                                              "DIVIDE_BY_ZERO",
                                                                              "VALUE",
                                                                              "REF",
                                                                              "NAME",
                                                                              "NUM",
                                                                              "N_A",
                                                                              "LOADING"
                                                                            ],
                                                                            "description": "The type of error.",
                                                                            "type": "string"
                                                                          },
                                                                          "message": {
                                                                            "type": "string",
                                                                            "description": "A message with more information about the error\n(in the spreadsheet's locale)."
                                                                          }
                                                                        },
                                                                        "id": "ErrorValue",
                                                                        "description": "An error in a cell."
                                                                      }
                                                                    }
                                                                  },
                                                                  "id": "ExtendedValue"
                                                                }
                                                              }
                                                            },
                                                            "valuesIndex": {
                                                              "description": "The offset in the PivotTable.values list which the values in this\ngrouping should be sorted by.",
                                                              "format": "int32",
                                                              "type": "integer"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "valueMetadata": {
                                                        "description": "Metadata about values in the grouping.",
                                                        "type": "array",
                                                        "properties": {
                                                          "PivotGroupValueMetadata": {
                                                            "description": "Metadata about a value in a pivot grouping.",
                                                            "type": "object",
                                                            "properties": {
                                                              "value": {
                                                                "description": "The calculated value the metadata corresponds to.\n(Note that formulaValue is not valid,\n because the values will be calculated.)",
                                                                "ExtendedValue": {
                                                                  "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                  "type": "object",
                                                                  "properties": {
                                                                    "stringValue": {
                                                                      "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                      "type": "string"
                                                                    },
                                                                    "boolValue": {
                                                                      "description": "Represents a boolean value.",
                                                                      "type": "boolean"
                                                                    },
                                                                    "formulaValue": {
                                                                      "description": "Represents a formula.",
                                                                      "type": "string"
                                                                    },
                                                                    "numberValue": {
                                                                      "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                      "format": "double",
                                                                      "type": "number"
                                                                    },
                                                                    "errorValue": {
                                                                      "description": "Represents an error.\nThis field is read-only.",
                                                                      "ErrorValue": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                          "type": {
                                                                            "enumDescriptions": [
                                                                              "The default error type, do not use this.",
                                                                              "Corresponds to the `#ERROR!` error.",
                                                                              "Corresponds to the `#NULL!` error.",
                                                                              "Corresponds to the `#DIV/0` error.",
                                                                              "Corresponds to the `#VALUE!` error.",
                                                                              "Corresponds to the `#REF!` error.",
                                                                              "Corresponds to the `#NAME?` error.",
                                                                              "Corresponds to the `#NUM`! error.",
                                                                              "Corresponds to the `#N/A` error.",
                                                                              "Corresponds to the `Loading...` state."
                                                                            ],
                                                                            "enum": [
                                                                              "ERROR_TYPE_UNSPECIFIED",
                                                                              "ERROR",
                                                                              "NULL_VALUE",
                                                                              "DIVIDE_BY_ZERO",
                                                                              "VALUE",
                                                                              "REF",
                                                                              "NAME",
                                                                              "NUM",
                                                                              "N_A",
                                                                              "LOADING"
                                                                            ],
                                                                            "description": "The type of error.",
                                                                            "type": "string"
                                                                          },
                                                                          "message": {
                                                                            "type": "string",
                                                                            "description": "A message with more information about the error\n(in the spreadsheet's locale)."
                                                                          }
                                                                        },
                                                                        "id": "ErrorValue",
                                                                        "description": "An error in a cell."
                                                                      }
                                                                    }
                                                                  },
                                                                  "id": "ExtendedValue"
                                                                }
                                                              },
                                                              "collapsed": {
                                                                "type": "boolean",
                                                                "description": "True if the data corresponding to the value is collapsed."
                                                              }
                                                            },
                                                            "id": "PivotGroupValueMetadata"
                                                          }
                                                        }
                                                      },
                                                      "showTotals": {
                                                        "type": "boolean",
                                                        "description": "True if the pivot table should include the totals for this grouping."
                                                      },
                                                      "groupRule": {
                                                        "description": "The group rule to apply to this row/column group.",
                                                        "PivotGroupRule": {
                                                          "description": "An optional setting on a PivotGroup that defines buckets for the values\nin the source data column rather than breaking out each individual value.\nOnly one PivotGroup with a group rule may be added for each column in\nthe source data, though on any given column you may add both a\nPivotGroup that has a rule and a PivotGroup that does not.",
                                                          "type": "object",
                                                          "properties": {
                                                            "histogramRule": {
                                                              "description": "A HistogramRule.",
                                                              "HistogramRule": {
                                                                "description": "Allows you to organize the numeric values in a source data column into\nbuckets of a constant size. All values from HistogramRule.start to\nHistogramRule.end are placed into groups of size\nHistogramRule.interval. In addition, all values below\nHistogramRule.start are placed in one group, and all values above\nHistogramRule.end are placed in another. Only\nHistogramRule.interval is required, though if HistogramRule.start\nand HistogramRule.end are both provided, HistogramRule.start must\nbe less than HistogramRule.end. For example, a pivot table showing\naverage purchase amount by age that has 50+ rows:\n\n    +-----+-------------------+\n    | Age | AVERAGE of Amount |\n    +-----+-------------------+\n    | 16  |            $27.13 |\n    | 17  |             $5.24 |\n    | 18  |            $20.15 |\n    ...\n    +-----+-------------------+\ncould be turned into a pivot table that looks like the one below by\napplying a histogram group rule with a HistogramRule.start of 25,\nan HistogramRule.interval of 20, and an HistogramRule.end\nof 65.\n\n    +-------------+-------------------+\n    | Grouped Age | AVERAGE of Amount |\n    +-------------+-------------------+\n    | < 25        |            $19.34 |\n    | 25-45       |            $31.43 |\n    | 45-65       |            $35.87 |\n    | > 65        |            $27.55 |\n    +-------------+-------------------+\n    | Grand Total |            $29.12 |\n    +-------------+-------------------+",
                                                                "type": "object",
                                                                "properties": {
                                                                  "end": {
                                                                    "description": "The maximum value at which items are placed into buckets\nof constant size. Values above end are lumped into a single bucket.\nThis field is optional.",
                                                                    "format": "double",
                                                                    "type": "number"
                                                                  },
                                                                  "interval": {
                                                                    "description": "The size of the buckets that are created. Must be positive.",
                                                                    "format": "double",
                                                                    "type": "number"
                                                                  },
                                                                  "start": {
                                                                    "description": "The minimum value at which items are placed into buckets\nof constant size. Values below start are lumped into a single bucket.\nThis field is optional.",
                                                                    "format": "double",
                                                                    "type": "number"
                                                                  }
                                                                },
                                                                "id": "HistogramRule"
                                                              }
                                                            },
                                                            "dateTimeRule": {
                                                              "description": "A DateTimeRule.",
                                                              "DateTimeRule": {
                                                                "description": "Allows you to organize the date-time values in a source data column into\nbuckets based on selected parts of their date or time values. For example,\nconsider a pivot table showing sales transactions by date:\n\n    +----------+--------------+\n    | Date     | SUM of Sales |\n    +----------+--------------+\n    | 1/1/2017 |      $621.14 |\n    | 2/3/2017 |      $708.84 |\n    | 5/8/2017 |      $326.84 |\n    ...\n    +----------+--------------+\nApplying a date-time group rule with a DateTimeRuleType of YEAR_MONTH\nresults in the following pivot table.\n\n    +--------------+--------------+\n    | Grouped Date | SUM of Sales |\n    +--------------+--------------+\n    | 2017-Jan     |   $53,731.78 |\n    | 2017-Feb     |   $83,475.32 |\n    | 2017-Mar     |   $94,385.05 |\n    ...\n    +--------------+--------------+",
                                                                "type": "object",
                                                                "properties": {
                                                                  "type": {
                                                                    "type": "string",
                                                                    "enumDescriptions": [
                                                                      "The default type, do not use.",
                                                                      "Group dates by second, from 0 to 59.",
                                                                      "Group dates by minute, from 0 to 59.",
                                                                      "Group dates by hour using a 24-hour system, from 0 to 23.",
                                                                      "Group dates by hour and minute using a 24-hour system, for example 19:45.",
                                                                      "Group dates by hour and minute using a 12-hour system, for example 7:45\nPM. The AM/PM designation is translated based on the spreadsheet\nlocale.",
                                                                      "Group dates by day of week, for example Sunday. The days of the week will\nbe translated based on the spreadsheet locale.",
                                                                      "Group dates by day of year, from 1 to 366. Note that dates after Feb. 29\nfall in different buckets in leap years than in non-leap years.",
                                                                      "Group dates by day of month, from 1 to 31.",
                                                                      "Group dates by day and month, for example 22-Nov. The month is\ntranslated based on the spreadsheet locale.",
                                                                      "Group dates by month, for example Nov. The month is translated based\non the spreadsheet locale.",
                                                                      "Group dates by quarter, for example Q1 (which represents Jan-Mar).",
                                                                      "Group dates by year, for example 2008.",
                                                                      "Group dates by year and month, for example 2008-Nov. The month is\ntranslated based on the spreadsheet locale.",
                                                                      "Group dates by year and quarter, for example 2008 Q4.",
                                                                      "Group dates by year, month, and day, for example 2008-11-22."
                                                                    ],
                                                                    "enum": [
                                                                      "DATE_TIME_RULE_TYPE_UNSPECIFIED",
                                                                      "SECOND",
                                                                      "MINUTE",
                                                                      "HOUR",
                                                                      "HOUR_MINUTE",
                                                                      "HOUR_MINUTE_AMPM",
                                                                      "DAY_OF_WEEK",
                                                                      "DAY_OF_YEAR",
                                                                      "DAY_OF_MONTH",
                                                                      "DAY_MONTH",
                                                                      "MONTH",
                                                                      "QUARTER",
                                                                      "YEAR",
                                                                      "YEAR_MONTH",
                                                                      "YEAR_QUARTER",
                                                                      "YEAR_MONTH_DAY"
                                                                    ],
                                                                    "description": "The type of date-time grouping to apply."
                                                                  }
                                                                },
                                                                "id": "DateTimeRule"
                                                              }
                                                            },
                                                            "manualRule": {
                                                              "description": "A ManualRule.",
                                                              "ManualRule": {
                                                                "id": "ManualRule",
                                                                "description": "Allows you to manually organize the values in a source data column into\nbuckets with names of your choosing. For example, a pivot table that\naggregates population by state:\n\n    +-------+-------------------+\n    | State | SUM of Population |\n    +-------+-------------------+\n    | AK    |               0.7 |\n    | AL    |               4.8 |\n    | AR    |               2.9 |\n    ...\n    +-------+-------------------+\ncould be turned into a pivot table that aggregates population by time zone\nby providing a list of groups (for example, groupName = 'Central',\nitems = ['AL', 'AR', 'IA', ...]) to a manual group rule.\nNote that a similar effect could be achieved by adding a time zone column\nto the source data and adjusting the pivot table.\n\n    +-----------+-------------------+\n    | Time Zone | SUM of Population |\n    +-----------+-------------------+\n    | Central   |             106.3 |\n    | Eastern   |             151.9 |\n    | Mountain  |              17.4 |\n    ...\n    +-----------+-------------------+",
                                                                "type": "object",
                                                                "properties": {
                                                                  "groups": {
                                                                    "description": "The list of group names and the corresponding items from the source data\nthat map to each group name.",
                                                                    "type": "array",
                                                                    "properties": {
                                                                      "ManualRuleGroup": {
                                                                        "description": "A group name and a list of items from the source data that should be placed\nin the group with this name.",
                                                                        "type": "object",
                                                                        "properties": {
                                                                          "groupName": {
                                                                            "description": "The group name, which must be a string. Each group in a given\nManualRule must have a unique group name.",
                                                                            "ExtendedValue": {
                                                                              "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                              "type": "object",
                                                                              "properties": {
                                                                                "stringValue": {
                                                                                  "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                  "type": "string"
                                                                                },
                                                                                "boolValue": {
                                                                                  "description": "Represents a boolean value.",
                                                                                  "type": "boolean"
                                                                                },
                                                                                "formulaValue": {
                                                                                  "description": "Represents a formula.",
                                                                                  "type": "string"
                                                                                },
                                                                                "numberValue": {
                                                                                  "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                  "format": "double",
                                                                                  "type": "number"
                                                                                },
                                                                                "errorValue": {
                                                                                  "description": "Represents an error.\nThis field is read-only.",
                                                                                  "ErrorValue": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                      "type": {
                                                                                        "enumDescriptions": [
                                                                                          "The default error type, do not use this.",
                                                                                          "Corresponds to the `#ERROR!` error.",
                                                                                          "Corresponds to the `#NULL!` error.",
                                                                                          "Corresponds to the `#DIV/0` error.",
                                                                                          "Corresponds to the `#VALUE!` error.",
                                                                                          "Corresponds to the `#REF!` error.",
                                                                                          "Corresponds to the `#NAME?` error.",
                                                                                          "Corresponds to the `#NUM`! error.",
                                                                                          "Corresponds to the `#N/A` error.",
                                                                                          "Corresponds to the `Loading...` state."
                                                                                        ],
                                                                                        "enum": [
                                                                                          "ERROR_TYPE_UNSPECIFIED",
                                                                                          "ERROR",
                                                                                          "NULL_VALUE",
                                                                                          "DIVIDE_BY_ZERO",
                                                                                          "VALUE",
                                                                                          "REF",
                                                                                          "NAME",
                                                                                          "NUM",
                                                                                          "N_A",
                                                                                          "LOADING"
                                                                                        ],
                                                                                        "description": "The type of error.",
                                                                                        "type": "string"
                                                                                      },
                                                                                      "message": {
                                                                                        "type": "string",
                                                                                        "description": "A message with more information about the error\n(in the spreadsheet's locale)."
                                                                                      }
                                                                                    },
                                                                                    "id": "ErrorValue",
                                                                                    "description": "An error in a cell."
                                                                                  }
                                                                                }
                                                                              },
                                                                              "id": "ExtendedValue"
                                                                            }
                                                                          },
                                                                          "properties": {
                                                                            "type": "array",
                                                                            "description": "The items in the source data that should be placed into this group. Each\nitem may be a string, number, or boolean. Items may appear in at most one\ngroup within a given ManualRule. Items that do not appear in any\ngroup will appear on their own.",
                                                                            "properties": {
                                                                              "ExtendedValue": {
                                                                                "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                                "type": "object",
                                                                                "properties": {
                                                                                  "stringValue": {
                                                                                    "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                    "type": "string"
                                                                                  },
                                                                                  "boolValue": {
                                                                                    "description": "Represents a boolean value.",
                                                                                    "type": "boolean"
                                                                                  },
                                                                                  "formulaValue": {
                                                                                    "description": "Represents a formula.",
                                                                                    "type": "string"
                                                                                  },
                                                                                  "numberValue": {
                                                                                    "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                    "format": "double",
                                                                                    "type": "number"
                                                                                  },
                                                                                  "errorValue": {
                                                                                    "description": "Represents an error.\nThis field is read-only.",
                                                                                    "ErrorValue": {
                                                                                      "type": "object",
                                                                                      "properties": {
                                                                                        "type": {
                                                                                          "enumDescriptions": [
                                                                                            "The default error type, do not use this.",
                                                                                            "Corresponds to the `#ERROR!` error.",
                                                                                            "Corresponds to the `#NULL!` error.",
                                                                                            "Corresponds to the `#DIV/0` error.",
                                                                                            "Corresponds to the `#VALUE!` error.",
                                                                                            "Corresponds to the `#REF!` error.",
                                                                                            "Corresponds to the `#NAME?` error.",
                                                                                            "Corresponds to the `#NUM`! error.",
                                                                                            "Corresponds to the `#N/A` error.",
                                                                                            "Corresponds to the `Loading...` state."
                                                                                          ],
                                                                                          "enum": [
                                                                                            "ERROR_TYPE_UNSPECIFIED",
                                                                                            "ERROR",
                                                                                            "NULL_VALUE",
                                                                                            "DIVIDE_BY_ZERO",
                                                                                            "VALUE",
                                                                                            "REF",
                                                                                            "NAME",
                                                                                            "NUM",
                                                                                            "N_A",
                                                                                            "LOADING"
                                                                                          ],
                                                                                          "description": "The type of error.",
                                                                                          "type": "string"
                                                                                        },
                                                                                        "message": {
                                                                                          "type": "string",
                                                                                          "description": "A message with more information about the error\n(in the spreadsheet's locale)."
                                                                                        }
                                                                                      },
                                                                                      "id": "ErrorValue",
                                                                                      "description": "An error in a cell."
                                                                                    }
                                                                                  }
                                                                                },
                                                                                "id": "ExtendedValue"
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "id": "ManualRuleGroup"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "id": "PivotGroupRule"
                                                        }
                                                      },
                                                      "label": {
                                                        "type": "string",
                                                        "description": "The labels to use for the row/column groups which can be customized. For\nexample, in the following pivot table, the row label is `Region` (which\ncould be renamed to `State`) and the column label is `Product` (which\ncould be renamed `Item`). Pivot tables created before December 2017 do\nnot have header labels. If you'd like to add header labels to an existing\npivot table, please delete the existing pivot table and then create a new\npivot table with same parameters.\n\n    +--------------+---------+-------+\n    | SUM of Units | Product |       |\n    | Region       | Pen     | Paper |\n    +--------------+---------+-------+\n    | New York     |     345 |    98 |\n    | Oregon       |     234 |   123 |\n    | Tennessee    |     531 |   415 |\n    +--------------+---------+-------+\n    | Grand Total  |    1110 |   636 |\n    +--------------+---------+-------+"
                                                      },
                                                      "repeatHeadings": {
                                                        "description": "True if the headings in this pivot group should be repeated.\nThis is only valid for row groupings and is ignored by columns.\n\nBy default, we minimize repitition of headings by not showing higher\nlevel headings where they are the same. For example, even though the\nthird row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because\nit is redundant with previous rows. Setting repeat_headings to true\nwould cause \"Q1\" to be repeated for \"Feb\" and \"Mar\".\n\n    +--------------+\n    | Q1     | Jan |\n    |        | Feb |\n    |        | Mar |\n    +--------+-----+\n    | Q1 Total     |\n    +--------------+",
                                                        "type": "boolean"
                                                      },
                                                      "sourceColumnOffset": {
                                                        "description": "The column offset of the source range that this grouping is based on.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this group refers to column `C`, whereas the offset `1` would refer\nto column `D`.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                      },
                                                      "sortOrder": {
                                                        "enum": [
                                                          "SORT_ORDER_UNSPECIFIED",
                                                          "ASCENDING",
                                                          "DESCENDING"
                                                        ],
                                                        "description": "The order the values in this group should be sorted.",
                                                        "type": "string",
                                                        "enumDescriptions": [
                                                          "Default value, do not use this.",
                                                          "Sort ascending.",
                                                          "Sort descending."
                                                        ]
                                                      }
                                                    },
                                                    "id": "PivotGroup"
                                                  }
                                                }
                                              },
                                              "valueLayout": {
                                                "enumDescriptions": [
                                                  "Values are laid out horizontally (as columns).",
                                                  "Values are laid out vertically (as rows)."
                                                ],
                                                "enum": [
                                                  "HORIZONTAL",
                                                  "VERTICAL"
                                                ],
                                                "description": "Whether values should be listed horizontally (as columns)\nor vertically (as rows).",
                                                "type": "string"
                                              },
                                              "values": {
                                                "description": "A list of values to include in the pivot table.",
                                                "type": "array",
                                                "properties": {
                                                  "PivotValue": {
                                                    "description": "The definition of how a value in a pivot table should be calculated.",
                                                    "type": "object",
                                                    "properties": {
                                                      "formula": {
                                                        "description": "A custom formula to calculate the value.  The formula must start\nwith an `=` character.",
                                                        "type": "string"
                                                      },
                                                      "calculatedDisplayType": {
                                                        "type": "string",
                                                        "enumDescriptions": [
                                                          "Default value, do not use.",
                                                          "Shows the pivot values as percentage of the row total values.",
                                                          "Shows the pivot values as percentage of the column total values.",
                                                          "Shows the pivot values as percentage of the grand total values."
                                                        ],
                                                        "enum": [
                                                          "PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED",
                                                          "PERCENT_OF_ROW_TOTAL",
                                                          "PERCENT_OF_COLUMN_TOTAL",
                                                          "PERCENT_OF_GRAND_TOTAL"
                                                        ],
                                                        "description": "If specified, indicates that pivot values should be displayed as\nthe result of a calculation with another pivot value. For example, if\ncalculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the\npivot values are displayed as the percentage of the grand total. In\nthe Sheets UI, this is referred to as \"Show As\" in the value section of a\npivot table."
                                                      },
                                                      "summarizeFunction": {
                                                        "enumDescriptions": [
                                                          "The default, do not use.",
                                                          "Corresponds to the `SUM` function.",
                                                          "Corresponds to the `COUNTA` function.",
                                                          "Corresponds to the `COUNT` function.",
                                                          "Corresponds to the `COUNTUNIQUE` function.",
                                                          "Corresponds to the `AVERAGE` function.",
                                                          "Corresponds to the `MAX` function.",
                                                          "Corresponds to the `MIN` function.",
                                                          "Corresponds to the `MEDIAN` function.",
                                                          "Corresponds to the `PRODUCT` function.",
                                                          "Corresponds to the `STDEV` function.",
                                                          "Corresponds to the `STDEVP` function.",
                                                          "Corresponds to the `VAR` function.",
                                                          "Corresponds to the `VARP` function.",
                                                          "Indicates the formula should be used as-is.\nOnly valid if PivotValue.formula was set."
                                                        ],
                                                        "enum": [
                                                          "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED",
                                                          "SUM",
                                                          "COUNTA",
                                                          "COUNT",
                                                          "COUNTUNIQUE",
                                                          "AVERAGE",
                                                          "MAX",
                                                          "MIN",
                                                          "MEDIAN",
                                                          "PRODUCT",
                                                          "STDEV",
                                                          "STDEVP",
                                                          "VAR",
                                                          "VARP",
                                                          "CUSTOM"
                                                        ],
                                                        "description": "A function to summarize the value.\nIf formula is set, the only supported values are\nSUM and\nCUSTOM.\nIf sourceColumnOffset is set, then `CUSTOM`\nis not supported.",
                                                        "type": "string"
                                                      },
                                                      "sourceColumnOffset": {
                                                        "description": "The column offset of the source range that this value reads from.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this value refers to column `C`, whereas the offset `1` would\nrefer to column `D`.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                      },
                                                      "name": {
                                                        "description": "A name to use for the value.",
                                                        "type": "string"
                                                      }
                                                    },
                                                    "id": "PivotValue"
                                                  }
                                                }
                                              },
                                              "source": {
                                                "description": "The range the pivot table is reading data from.",
                                                "GridRange": {
                                                  "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                                                  "type": "object",
                                                  "properties": {
                                                    "endRowIndex": {
                                                      "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    },
                                                    "endColumnIndex": {
                                                      "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    },
                                                    "startRowIndex": {
                                                      "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    },
                                                    "startColumnIndex": {
                                                      "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    },
                                                    "sheetId": {
                                                      "description": "The sheet this range is on.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    }
                                                  },
                                                  "id": "GridRange"
                                                }
                                              },
                                              "columns": {
                                                "description": "Each column grouping in the pivot table.",
                                                "type": "array",
                                                "properties": {
                                                  "PivotGroup": {
                                                    "description": "A single grouping (either row or column) in a pivot table.",
                                                    "type": "object",
                                                    "properties": {
                                                      "valueBucket": {
                                                        "description": "The bucket of the opposite pivot group to sort by.\nIf not specified, sorting is alphabetical by this group's values.",
                                                        "PivotGroupSortValueBucket": {
                                                          "id": "PivotGroupSortValueBucket",
                                                          "description": "Information about which values in a pivot group should be used for sorting.",
                                                          "type": "object",
                                                          "properties": {
                                                            "buckets": {
                                                              "description": "Determines the bucket from which values are chosen to sort.\n\nFor example, in a pivot table with one row group & two column groups,\nthe row group can list up to two values. The first value corresponds\nto a value within the first column group, and the second value\ncorresponds to a value in the second column group.  If no values\nare listed, this would indicate that the row should be sorted according\nto the \"Grand Total\" over the column groups. If a single value is listed,\nthis would correspond to using the \"Total\" of that bucket.",
                                                              "type": "array",
                                                              "properties": {
                                                                "ExtendedValue": {
                                                                  "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                  "type": "object",
                                                                  "properties": {
                                                                    "stringValue": {
                                                                      "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                      "type": "string"
                                                                    },
                                                                    "boolValue": {
                                                                      "description": "Represents a boolean value.",
                                                                      "type": "boolean"
                                                                    },
                                                                    "formulaValue": {
                                                                      "description": "Represents a formula.",
                                                                      "type": "string"
                                                                    },
                                                                    "numberValue": {
                                                                      "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                      "format": "double",
                                                                      "type": "number"
                                                                    },
                                                                    "errorValue": {
                                                                      "description": "Represents an error.\nThis field is read-only.",
                                                                      "ErrorValue": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                          "type": {
                                                                            "enumDescriptions": [
                                                                              "The default error type, do not use this.",
                                                                              "Corresponds to the `#ERROR!` error.",
                                                                              "Corresponds to the `#NULL!` error.",
                                                                              "Corresponds to the `#DIV/0` error.",
                                                                              "Corresponds to the `#VALUE!` error.",
                                                                              "Corresponds to the `#REF!` error.",
                                                                              "Corresponds to the `#NAME?` error.",
                                                                              "Corresponds to the `#NUM`! error.",
                                                                              "Corresponds to the `#N/A` error.",
                                                                              "Corresponds to the `Loading...` state."
                                                                            ],
                                                                            "enum": [
                                                                              "ERROR_TYPE_UNSPECIFIED",
                                                                              "ERROR",
                                                                              "NULL_VALUE",
                                                                              "DIVIDE_BY_ZERO",
                                                                              "VALUE",
                                                                              "REF",
                                                                              "NAME",
                                                                              "NUM",
                                                                              "N_A",
                                                                              "LOADING"
                                                                            ],
                                                                            "description": "The type of error.",
                                                                            "type": "string"
                                                                          },
                                                                          "message": {
                                                                            "type": "string",
                                                                            "description": "A message with more information about the error\n(in the spreadsheet's locale)."
                                                                          }
                                                                        },
                                                                        "id": "ErrorValue",
                                                                        "description": "An error in a cell."
                                                                      }
                                                                    }
                                                                  },
                                                                  "id": "ExtendedValue"
                                                                }
                                                              }
                                                            },
                                                            "valuesIndex": {
                                                              "description": "The offset in the PivotTable.values list which the values in this\ngrouping should be sorted by.",
                                                              "format": "int32",
                                                              "type": "integer"
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "valueMetadata": {
                                                        "description": "Metadata about values in the grouping.",
                                                        "type": "array",
                                                        "properties": {
                                                          "PivotGroupValueMetadata": {
                                                            "description": "Metadata about a value in a pivot grouping.",
                                                            "type": "object",
                                                            "properties": {
                                                              "value": {
                                                                "description": "The calculated value the metadata corresponds to.\n(Note that formulaValue is not valid,\n because the values will be calculated.)",
                                                                "ExtendedValue": {
                                                                  "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                  "type": "object",
                                                                  "properties": {
                                                                    "stringValue": {
                                                                      "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                      "type": "string"
                                                                    },
                                                                    "boolValue": {
                                                                      "description": "Represents a boolean value.",
                                                                      "type": "boolean"
                                                                    },
                                                                    "formulaValue": {
                                                                      "description": "Represents a formula.",
                                                                      "type": "string"
                                                                    },
                                                                    "numberValue": {
                                                                      "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                      "format": "double",
                                                                      "type": "number"
                                                                    },
                                                                    "errorValue": {
                                                                      "description": "Represents an error.\nThis field is read-only.",
                                                                      "ErrorValue": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                          "type": {
                                                                            "enumDescriptions": [
                                                                              "The default error type, do not use this.",
                                                                              "Corresponds to the `#ERROR!` error.",
                                                                              "Corresponds to the `#NULL!` error.",
                                                                              "Corresponds to the `#DIV/0` error.",
                                                                              "Corresponds to the `#VALUE!` error.",
                                                                              "Corresponds to the `#REF!` error.",
                                                                              "Corresponds to the `#NAME?` error.",
                                                                              "Corresponds to the `#NUM`! error.",
                                                                              "Corresponds to the `#N/A` error.",
                                                                              "Corresponds to the `Loading...` state."
                                                                            ],
                                                                            "enum": [
                                                                              "ERROR_TYPE_UNSPECIFIED",
                                                                              "ERROR",
                                                                              "NULL_VALUE",
                                                                              "DIVIDE_BY_ZERO",
                                                                              "VALUE",
                                                                              "REF",
                                                                              "NAME",
                                                                              "NUM",
                                                                              "N_A",
                                                                              "LOADING"
                                                                            ],
                                                                            "description": "The type of error.",
                                                                            "type": "string"
                                                                          },
                                                                          "message": {
                                                                            "type": "string",
                                                                            "description": "A message with more information about the error\n(in the spreadsheet's locale)."
                                                                          }
                                                                        },
                                                                        "id": "ErrorValue",
                                                                        "description": "An error in a cell."
                                                                      }
                                                                    }
                                                                  },
                                                                  "id": "ExtendedValue"
                                                                }
                                                              },
                                                              "collapsed": {
                                                                "type": "boolean",
                                                                "description": "True if the data corresponding to the value is collapsed."
                                                              }
                                                            },
                                                            "id": "PivotGroupValueMetadata"
                                                          }
                                                        }
                                                      },
                                                      "showTotals": {
                                                        "type": "boolean",
                                                        "description": "True if the pivot table should include the totals for this grouping."
                                                      },
                                                      "groupRule": {
                                                        "description": "The group rule to apply to this row/column group.",
                                                        "PivotGroupRule": {
                                                          "description": "An optional setting on a PivotGroup that defines buckets for the values\nin the source data column rather than breaking out each individual value.\nOnly one PivotGroup with a group rule may be added for each column in\nthe source data, though on any given column you may add both a\nPivotGroup that has a rule and a PivotGroup that does not.",
                                                          "type": "object",
                                                          "properties": {
                                                            "histogramRule": {
                                                              "description": "A HistogramRule.",
                                                              "HistogramRule": {
                                                                "description": "Allows you to organize the numeric values in a source data column into\nbuckets of a constant size. All values from HistogramRule.start to\nHistogramRule.end are placed into groups of size\nHistogramRule.interval. In addition, all values below\nHistogramRule.start are placed in one group, and all values above\nHistogramRule.end are placed in another. Only\nHistogramRule.interval is required, though if HistogramRule.start\nand HistogramRule.end are both provided, HistogramRule.start must\nbe less than HistogramRule.end. For example, a pivot table showing\naverage purchase amount by age that has 50+ rows:\n\n    +-----+-------------------+\n    | Age | AVERAGE of Amount |\n    +-----+-------------------+\n    | 16  |            $27.13 |\n    | 17  |             $5.24 |\n    | 18  |            $20.15 |\n    ...\n    +-----+-------------------+\ncould be turned into a pivot table that looks like the one below by\napplying a histogram group rule with a HistogramRule.start of 25,\nan HistogramRule.interval of 20, and an HistogramRule.end\nof 65.\n\n    +-------------+-------------------+\n    | Grouped Age | AVERAGE of Amount |\n    +-------------+-------------------+\n    | < 25        |            $19.34 |\n    | 25-45       |            $31.43 |\n    | 45-65       |            $35.87 |\n    | > 65        |            $27.55 |\n    +-------------+-------------------+\n    | Grand Total |            $29.12 |\n    +-------------+-------------------+",
                                                                "type": "object",
                                                                "properties": {
                                                                  "end": {
                                                                    "description": "The maximum value at which items are placed into buckets\nof constant size. Values above end are lumped into a single bucket.\nThis field is optional.",
                                                                    "format": "double",
                                                                    "type": "number"
                                                                  },
                                                                  "interval": {
                                                                    "description": "The size of the buckets that are created. Must be positive.",
                                                                    "format": "double",
                                                                    "type": "number"
                                                                  },
                                                                  "start": {
                                                                    "description": "The minimum value at which items are placed into buckets\nof constant size. Values below start are lumped into a single bucket.\nThis field is optional.",
                                                                    "format": "double",
                                                                    "type": "number"
                                                                  }
                                                                },
                                                                "id": "HistogramRule"
                                                              }
                                                            },
                                                            "dateTimeRule": {
                                                              "description": "A DateTimeRule.",
                                                              "DateTimeRule": {
                                                                "description": "Allows you to organize the date-time values in a source data column into\nbuckets based on selected parts of their date or time values. For example,\nconsider a pivot table showing sales transactions by date:\n\n    +----------+--------------+\n    | Date     | SUM of Sales |\n    +----------+--------------+\n    | 1/1/2017 |      $621.14 |\n    | 2/3/2017 |      $708.84 |\n    | 5/8/2017 |      $326.84 |\n    ...\n    +----------+--------------+\nApplying a date-time group rule with a DateTimeRuleType of YEAR_MONTH\nresults in the following pivot table.\n\n    +--------------+--------------+\n    | Grouped Date | SUM of Sales |\n    +--------------+--------------+\n    | 2017-Jan     |   $53,731.78 |\n    | 2017-Feb     |   $83,475.32 |\n    | 2017-Mar     |   $94,385.05 |\n    ...\n    +--------------+--------------+",
                                                                "type": "object",
                                                                "properties": {
                                                                  "type": {
                                                                    "type": "string",
                                                                    "enumDescriptions": [
                                                                      "The default type, do not use.",
                                                                      "Group dates by second, from 0 to 59.",
                                                                      "Group dates by minute, from 0 to 59.",
                                                                      "Group dates by hour using a 24-hour system, from 0 to 23.",
                                                                      "Group dates by hour and minute using a 24-hour system, for example 19:45.",
                                                                      "Group dates by hour and minute using a 12-hour system, for example 7:45\nPM. The AM/PM designation is translated based on the spreadsheet\nlocale.",
                                                                      "Group dates by day of week, for example Sunday. The days of the week will\nbe translated based on the spreadsheet locale.",
                                                                      "Group dates by day of year, from 1 to 366. Note that dates after Feb. 29\nfall in different buckets in leap years than in non-leap years.",
                                                                      "Group dates by day of month, from 1 to 31.",
                                                                      "Group dates by day and month, for example 22-Nov. The month is\ntranslated based on the spreadsheet locale.",
                                                                      "Group dates by month, for example Nov. The month is translated based\non the spreadsheet locale.",
                                                                      "Group dates by quarter, for example Q1 (which represents Jan-Mar).",
                                                                      "Group dates by year, for example 2008.",
                                                                      "Group dates by year and month, for example 2008-Nov. The month is\ntranslated based on the spreadsheet locale.",
                                                                      "Group dates by year and quarter, for example 2008 Q4.",
                                                                      "Group dates by year, month, and day, for example 2008-11-22."
                                                                    ],
                                                                    "enum": [
                                                                      "DATE_TIME_RULE_TYPE_UNSPECIFIED",
                                                                      "SECOND",
                                                                      "MINUTE",
                                                                      "HOUR",
                                                                      "HOUR_MINUTE",
                                                                      "HOUR_MINUTE_AMPM",
                                                                      "DAY_OF_WEEK",
                                                                      "DAY_OF_YEAR",
                                                                      "DAY_OF_MONTH",
                                                                      "DAY_MONTH",
                                                                      "MONTH",
                                                                      "QUARTER",
                                                                      "YEAR",
                                                                      "YEAR_MONTH",
                                                                      "YEAR_QUARTER",
                                                                      "YEAR_MONTH_DAY"
                                                                    ],
                                                                    "description": "The type of date-time grouping to apply."
                                                                  }
                                                                },
                                                                "id": "DateTimeRule"
                                                              }
                                                            },
                                                            "manualRule": {
                                                              "description": "A ManualRule.",
                                                              "ManualRule": {
                                                                "id": "ManualRule",
                                                                "description": "Allows you to manually organize the values in a source data column into\nbuckets with names of your choosing. For example, a pivot table that\naggregates population by state:\n\n    +-------+-------------------+\n    | State | SUM of Population |\n    +-------+-------------------+\n    | AK    |               0.7 |\n    | AL    |               4.8 |\n    | AR    |               2.9 |\n    ...\n    +-------+-------------------+\ncould be turned into a pivot table that aggregates population by time zone\nby providing a list of groups (for example, groupName = 'Central',\nitems = ['AL', 'AR', 'IA', ...]) to a manual group rule.\nNote that a similar effect could be achieved by adding a time zone column\nto the source data and adjusting the pivot table.\n\n    +-----------+-------------------+\n    | Time Zone | SUM of Population |\n    +-----------+-------------------+\n    | Central   |             106.3 |\n    | Eastern   |             151.9 |\n    | Mountain  |              17.4 |\n    ...\n    +-----------+-------------------+",
                                                                "type": "object",
                                                                "properties": {
                                                                  "groups": {
                                                                    "description": "The list of group names and the corresponding items from the source data\nthat map to each group name.",
                                                                    "type": "array",
                                                                    "properties": {
                                                                      "ManualRuleGroup": {
                                                                        "description": "A group name and a list of items from the source data that should be placed\nin the group with this name.",
                                                                        "type": "object",
                                                                        "properties": {
                                                                          "groupName": {
                                                                            "description": "The group name, which must be a string. Each group in a given\nManualRule must have a unique group name.",
                                                                            "ExtendedValue": {
                                                                              "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                              "type": "object",
                                                                              "properties": {
                                                                                "stringValue": {
                                                                                  "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                  "type": "string"
                                                                                },
                                                                                "boolValue": {
                                                                                  "description": "Represents a boolean value.",
                                                                                  "type": "boolean"
                                                                                },
                                                                                "formulaValue": {
                                                                                  "description": "Represents a formula.",
                                                                                  "type": "string"
                                                                                },
                                                                                "numberValue": {
                                                                                  "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                  "format": "double",
                                                                                  "type": "number"
                                                                                },
                                                                                "errorValue": {
                                                                                  "description": "Represents an error.\nThis field is read-only.",
                                                                                  "ErrorValue": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                      "type": {
                                                                                        "enumDescriptions": [
                                                                                          "The default error type, do not use this.",
                                                                                          "Corresponds to the `#ERROR!` error.",
                                                                                          "Corresponds to the `#NULL!` error.",
                                                                                          "Corresponds to the `#DIV/0` error.",
                                                                                          "Corresponds to the `#VALUE!` error.",
                                                                                          "Corresponds to the `#REF!` error.",
                                                                                          "Corresponds to the `#NAME?` error.",
                                                                                          "Corresponds to the `#NUM`! error.",
                                                                                          "Corresponds to the `#N/A` error.",
                                                                                          "Corresponds to the `Loading...` state."
                                                                                        ],
                                                                                        "enum": [
                                                                                          "ERROR_TYPE_UNSPECIFIED",
                                                                                          "ERROR",
                                                                                          "NULL_VALUE",
                                                                                          "DIVIDE_BY_ZERO",
                                                                                          "VALUE",
                                                                                          "REF",
                                                                                          "NAME",
                                                                                          "NUM",
                                                                                          "N_A",
                                                                                          "LOADING"
                                                                                        ],
                                                                                        "description": "The type of error.",
                                                                                        "type": "string"
                                                                                      },
                                                                                      "message": {
                                                                                        "type": "string",
                                                                                        "description": "A message with more information about the error\n(in the spreadsheet's locale)."
                                                                                      }
                                                                                    },
                                                                                    "id": "ErrorValue",
                                                                                    "description": "An error in a cell."
                                                                                  }
                                                                                }
                                                                              },
                                                                              "id": "ExtendedValue"
                                                                            }
                                                                          },
                                                                          "properties": {
                                                                            "type": "array",
                                                                            "description": "The items in the source data that should be placed into this group. Each\nitem may be a string, number, or boolean. Items may appear in at most one\ngroup within a given ManualRule. Items that do not appear in any\ngroup will appear on their own.",
                                                                            "properties": {
                                                                              "ExtendedValue": {
                                                                                "description": "The kinds of value that a cell in a spreadsheet can have.",
                                                                                "type": "object",
                                                                                "properties": {
                                                                                  "stringValue": {
                                                                                    "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                                                    "type": "string"
                                                                                  },
                                                                                  "boolValue": {
                                                                                    "description": "Represents a boolean value.",
                                                                                    "type": "boolean"
                                                                                  },
                                                                                  "formulaValue": {
                                                                                    "description": "Represents a formula.",
                                                                                    "type": "string"
                                                                                  },
                                                                                  "numberValue": {
                                                                                    "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                                                    "format": "double",
                                                                                    "type": "number"
                                                                                  },
                                                                                  "errorValue": {
                                                                                    "description": "Represents an error.\nThis field is read-only.",
                                                                                    "ErrorValue": {
                                                                                      "type": "object",
                                                                                      "properties": {
                                                                                        "type": {
                                                                                          "enumDescriptions": [
                                                                                            "The default error type, do not use this.",
                                                                                            "Corresponds to the `#ERROR!` error.",
                                                                                            "Corresponds to the `#NULL!` error.",
                                                                                            "Corresponds to the `#DIV/0` error.",
                                                                                            "Corresponds to the `#VALUE!` error.",
                                                                                            "Corresponds to the `#REF!` error.",
                                                                                            "Corresponds to the `#NAME?` error.",
                                                                                            "Corresponds to the `#NUM`! error.",
                                                                                            "Corresponds to the `#N/A` error.",
                                                                                            "Corresponds to the `Loading...` state."
                                                                                          ],
                                                                                          "enum": [
                                                                                            "ERROR_TYPE_UNSPECIFIED",
                                                                                            "ERROR",
                                                                                            "NULL_VALUE",
                                                                                            "DIVIDE_BY_ZERO",
                                                                                            "VALUE",
                                                                                            "REF",
                                                                                            "NAME",
                                                                                            "NUM",
                                                                                            "N_A",
                                                                                            "LOADING"
                                                                                          ],
                                                                                          "description": "The type of error.",
                                                                                          "type": "string"
                                                                                        },
                                                                                        "message": {
                                                                                          "type": "string",
                                                                                          "description": "A message with more information about the error\n(in the spreadsheet's locale)."
                                                                                        }
                                                                                      },
                                                                                      "id": "ErrorValue",
                                                                                      "description": "An error in a cell."
                                                                                    }
                                                                                  }
                                                                                },
                                                                                "id": "ExtendedValue"
                                                                              }
                                                                            }
                                                                          }
                                                                        },
                                                                        "id": "ManualRuleGroup"
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "id": "PivotGroupRule"
                                                        }
                                                      },
                                                      "label": {
                                                        "type": "string",
                                                        "description": "The labels to use for the row/column groups which can be customized. For\nexample, in the following pivot table, the row label is `Region` (which\ncould be renamed to `State`) and the column label is `Product` (which\ncould be renamed `Item`). Pivot tables created before December 2017 do\nnot have header labels. If you'd like to add header labels to an existing\npivot table, please delete the existing pivot table and then create a new\npivot table with same parameters.\n\n    +--------------+---------+-------+\n    | SUM of Units | Product |       |\n    | Region       | Pen     | Paper |\n    +--------------+---------+-------+\n    | New York     |     345 |    98 |\n    | Oregon       |     234 |   123 |\n    | Tennessee    |     531 |   415 |\n    +--------------+---------+-------+\n    | Grand Total  |    1110 |   636 |\n    +--------------+---------+-------+"
                                                      },
                                                      "repeatHeadings": {
                                                        "description": "True if the headings in this pivot group should be repeated.\nThis is only valid for row groupings and is ignored by columns.\n\nBy default, we minimize repitition of headings by not showing higher\nlevel headings where they are the same. For example, even though the\nthird row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because\nit is redundant with previous rows. Setting repeat_headings to true\nwould cause \"Q1\" to be repeated for \"Feb\" and \"Mar\".\n\n    +--------------+\n    | Q1     | Jan |\n    |        | Feb |\n    |        | Mar |\n    +--------+-----+\n    | Q1 Total     |\n    +--------------+",
                                                        "type": "boolean"
                                                      },
                                                      "sourceColumnOffset": {
                                                        "description": "The column offset of the source range that this grouping is based on.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this group refers to column `C`, whereas the offset `1` would refer\nto column `D`.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                      },
                                                      "sortOrder": {
                                                        "enum": [
                                                          "SORT_ORDER_UNSPECIFIED",
                                                          "ASCENDING",
                                                          "DESCENDING"
                                                        ],
                                                        "description": "The order the values in this group should be sorted.",
                                                        "type": "string",
                                                        "enumDescriptions": [
                                                          "Default value, do not use this.",
                                                          "Sort ascending.",
                                                          "Sort descending."
                                                        ]
                                                      }
                                                    },
                                                    "id": "PivotGroup"
                                                  }
                                                }
                                              }
                                            },
                                            "id": "PivotTable"
                                          }
                                        },
                                        "userEnteredFormat": {
                                          "description": "The format the user entered for the cell.\n\nWhen writing, the new format will be merged with the existing format.",
                                          "CellFormat": {
                                            "description": "The format of a cell.",
                                            "type": "object",
                                            "properties": {
                                              "padding": {
                                                "description": "The padding of the cell.",
                                                "Padding": {
                                                  "id": "Padding",
                                                  "description": "The amount of padding around the cell, in pixels.\nWhen updating padding, every field must be specified.",
                                                  "type": "object",
                                                  "properties": {
                                                    "top": {
                                                      "type": "integer",
                                                      "description": "The top padding of the cell.",
                                                      "format": "int32"
                                                    },
                                                    "left": {
                                                      "description": "The left padding of the cell.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    },
                                                    "right": {
                                                      "description": "The right padding of the cell.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    },
                                                    "bottom": {
                                                      "description": "The bottom padding of the cell.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    }
                                                  }
                                                }
                                              },
                                              "verticalAlignment": {
                                                "enumDescriptions": [
                                                  "The vertical alignment is not specified.  Do not use this.",
                                                  "The text is explicitly aligned to the top of the cell.",
                                                  "The text is explicitly aligned to the middle of the cell.",
                                                  "The text is explicitly aligned to the bottom of the cell."
                                                ],
                                                "enum": [
                                                  "VERTICAL_ALIGN_UNSPECIFIED",
                                                  "TOP",
                                                  "MIDDLE",
                                                  "BOTTOM"
                                                ],
                                                "description": "The vertical alignment of the value in the cell.",
                                                "type": "string"
                                              },
                                              "borders": {
                                                "description": "The borders of the cell.",
                                                "Borders": {
                                                  "description": "The borders of the cell.",
                                                  "type": "object",
                                                  "properties": {
                                                    "left": {
                                                      "description": "The left border of the cell.",
                                                      "Border": {
                                                        "description": "A border along a cell.",
                                                        "type": "object",
                                                        "properties": {
                                                          "width": {
                                                            "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                          },
                                                          "style": {
                                                            "description": "The style of the border.",
                                                            "type": "string",
                                                            "enumDescriptions": [
                                                              "The style is not specified. Do not use this.",
                                                              "The border is dotted.",
                                                              "The border is dashed.",
                                                              "The border is a thin solid line.",
                                                              "The border is a medium solid line.",
                                                              "The border is a thick solid line.",
                                                              "No border.\nUsed only when updating a border in order to erase it.",
                                                              "The border is two solid lines."
                                                            ],
                                                            "enum": [
                                                              "STYLE_UNSPECIFIED",
                                                              "DOTTED",
                                                              "DASHED",
                                                              "SOLID",
                                                              "SOLID_MEDIUM",
                                                              "SOLID_THICK",
                                                              "NONE",
                                                              "DOUBLE"
                                                            ]
                                                          },
                                                          "color": {
                                                            "description": "The color of the border.",
                                                            "Color": {
                                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                              "type": "object",
                                                              "properties": {
                                                                "red": {
                                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "green": {
                                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "blue": {
                                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "alpha": {
                                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                }
                                                              },
                                                              "id": "Color"
                                                            }
                                                          }
                                                        },
                                                        "id": "Border"
                                                      }
                                                    },
                                                    "right": {
                                                      "description": "The right border of the cell.",
                                                      "Border": {
                                                        "description": "A border along a cell.",
                                                        "type": "object",
                                                        "properties": {
                                                          "width": {
                                                            "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                          },
                                                          "style": {
                                                            "description": "The style of the border.",
                                                            "type": "string",
                                                            "enumDescriptions": [
                                                              "The style is not specified. Do not use this.",
                                                              "The border is dotted.",
                                                              "The border is dashed.",
                                                              "The border is a thin solid line.",
                                                              "The border is a medium solid line.",
                                                              "The border is a thick solid line.",
                                                              "No border.\nUsed only when updating a border in order to erase it.",
                                                              "The border is two solid lines."
                                                            ],
                                                            "enum": [
                                                              "STYLE_UNSPECIFIED",
                                                              "DOTTED",
                                                              "DASHED",
                                                              "SOLID",
                                                              "SOLID_MEDIUM",
                                                              "SOLID_THICK",
                                                              "NONE",
                                                              "DOUBLE"
                                                            ]
                                                          },
                                                          "color": {
                                                            "description": "The color of the border.",
                                                            "Color": {
                                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                              "type": "object",
                                                              "properties": {
                                                                "red": {
                                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "green": {
                                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "blue": {
                                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "alpha": {
                                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                }
                                                              },
                                                              "id": "Color"
                                                            }
                                                          }
                                                        },
                                                        "id": "Border"
                                                      }
                                                    },
                                                    "bottom": {
                                                      "description": "The bottom border of the cell.",
                                                      "Border": {
                                                        "description": "A border along a cell.",
                                                        "type": "object",
                                                        "properties": {
                                                          "width": {
                                                            "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                          },
                                                          "style": {
                                                            "description": "The style of the border.",
                                                            "type": "string",
                                                            "enumDescriptions": [
                                                              "The style is not specified. Do not use this.",
                                                              "The border is dotted.",
                                                              "The border is dashed.",
                                                              "The border is a thin solid line.",
                                                              "The border is a medium solid line.",
                                                              "The border is a thick solid line.",
                                                              "No border.\nUsed only when updating a border in order to erase it.",
                                                              "The border is two solid lines."
                                                            ],
                                                            "enum": [
                                                              "STYLE_UNSPECIFIED",
                                                              "DOTTED",
                                                              "DASHED",
                                                              "SOLID",
                                                              "SOLID_MEDIUM",
                                                              "SOLID_THICK",
                                                              "NONE",
                                                              "DOUBLE"
                                                            ]
                                                          },
                                                          "color": {
                                                            "description": "The color of the border.",
                                                            "Color": {
                                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                              "type": "object",
                                                              "properties": {
                                                                "red": {
                                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "green": {
                                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "blue": {
                                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "alpha": {
                                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                }
                                                              },
                                                              "id": "Color"
                                                            }
                                                          }
                                                        },
                                                        "id": "Border"
                                                      }
                                                    },
                                                    "top": {
                                                      "description": "The top border of the cell.",
                                                      "Border": {
                                                        "description": "A border along a cell.",
                                                        "type": "object",
                                                        "properties": {
                                                          "width": {
                                                            "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                          },
                                                          "style": {
                                                            "description": "The style of the border.",
                                                            "type": "string",
                                                            "enumDescriptions": [
                                                              "The style is not specified. Do not use this.",
                                                              "The border is dotted.",
                                                              "The border is dashed.",
                                                              "The border is a thin solid line.",
                                                              "The border is a medium solid line.",
                                                              "The border is a thick solid line.",
                                                              "No border.\nUsed only when updating a border in order to erase it.",
                                                              "The border is two solid lines."
                                                            ],
                                                            "enum": [
                                                              "STYLE_UNSPECIFIED",
                                                              "DOTTED",
                                                              "DASHED",
                                                              "SOLID",
                                                              "SOLID_MEDIUM",
                                                              "SOLID_THICK",
                                                              "NONE",
                                                              "DOUBLE"
                                                            ]
                                                          },
                                                          "color": {
                                                            "description": "The color of the border.",
                                                            "Color": {
                                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                              "type": "object",
                                                              "properties": {
                                                                "red": {
                                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "green": {
                                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "blue": {
                                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "alpha": {
                                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                }
                                                              },
                                                              "id": "Color"
                                                            }
                                                          }
                                                        },
                                                        "id": "Border"
                                                      }
                                                    }
                                                  },
                                                  "id": "Borders"
                                                }
                                              },
                                              "textDirection": {
                                                "description": "The direction of the text in the cell.",
                                                "type": "string",
                                                "enumDescriptions": [
                                                  "The text direction is not specified. Do not use this.",
                                                  "The text direction of left-to-right was set by the user.",
                                                  "The text direction of right-to-left was set by the user."
                                                ],
                                                "enum": [
                                                  "TEXT_DIRECTION_UNSPECIFIED",
                                                  "LEFT_TO_RIGHT",
                                                  "RIGHT_TO_LEFT"
                                                ]
                                              },
                                              "wrapStrategy": {
                                                "enumDescriptions": [
                                                  "The default value, do not use.",
                                                  "Lines that are longer than the cell width will be written in the next\ncell over, so long as that cell is empty. If the next cell over is\nnon-empty, this behaves the same as CLIP. The text will never wrap\nto the next line unless the user manually inserts a new line.\nExample:\n\n    | First sentence. |\n    | Manual newline that is very long. <- Text continues into next cell\n    | Next newline.   |",
                                                  "This wrap strategy represents the old Google Sheets wrap strategy where\nwords that are longer than a line are clipped rather than broken. This\nstrategy is not supported on all platforms and is being phased out.\nExample:\n\n    | Cell has a |\n    | loooooooooo| <- Word is clipped.\n    | word.      |",
                                                  "Lines that are longer than the cell width will be clipped.\nThe text will never wrap to the next line unless the user manually\ninserts a new line.\nExample:\n\n    | First sentence. |\n    | Manual newline t| <- Text is clipped\n    | Next newline.   |",
                                                  "Words that are longer than a line are wrapped at the character level\nrather than clipped.\nExample:\n\n    | Cell has a |\n    | loooooooooo| <- Word is broken.\n    | ong word.  |"
                                                ],
                                                "enum": [
                                                  "WRAP_STRATEGY_UNSPECIFIED",
                                                  "OVERFLOW_CELL",
                                                  "LEGACY_WRAP",
                                                  "CLIP",
                                                  "WRAP"
                                                ],
                                                "description": "The wrap strategy for the value in the cell.",
                                                "type": "string"
                                              },
                                              "textRotation": {
                                                "description": "The rotation applied to text in a cell",
                                                "TextRotation": {
                                                  "description": "The rotation applied to text in a cell.",
                                                  "type": "object",
                                                  "properties": {
                                                    "angle": {
                                                      "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the\ncounterclockwise direction, whereas for RTL they are in the clockwise\ndirection",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    },
                                                    "vertical": {
                                                      "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
                                                      "type": "boolean"
                                                    }
                                                  },
                                                  "id": "TextRotation"
                                                }
                                              },
                                              "numberFormat": {
                                                "description": "A format describing how number values should be represented to the user.",
                                                "NumberFormat": {
                                                  "description": "The number format of a cell.",
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "enum": [
                                                        "NUMBER_FORMAT_TYPE_UNSPECIFIED",
                                                        "TEXT",
                                                        "NUMBER",
                                                        "PERCENT",
                                                        "CURRENCY",
                                                        "DATE",
                                                        "TIME",
                                                        "DATE_TIME",
                                                        "SCIENTIFIC"
                                                      ],
                                                      "description": "The type of the number format.\nWhen writing, this field must be set.",
                                                      "type": "string",
                                                      "enumDescriptions": [
                                                        "The number format is not specified\nand is based on the contents of the cell.\nDo not explicitly use this.",
                                                        "Text formatting, e.g `1000.12`",
                                                        "Number formatting, e.g, `1,000.12`",
                                                        "Percent formatting, e.g `10.12%`",
                                                        "Currency formatting, e.g `$1,000.12`",
                                                        "Date formatting, e.g `9/26/2008`",
                                                        "Time formatting, e.g `3:59:00 PM`",
                                                        "Date+Time formatting, e.g `9/26/08 15:59:00`",
                                                        "Scientific number formatting, e.g `1.01E+03`"
                                                      ]
                                                    },
                                                    "pattern": {
                                                      "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for\nmore information about the supported patterns.",
                                                      "type": "string"
                                                    }
                                                  },
                                                  "id": "NumberFormat"
                                                }
                                              },
                                              "hyperlinkDisplayType": {
                                                "enum": [
                                                  "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
                                                  "LINKED",
                                                  "PLAIN_TEXT"
                                                ],
                                                "description": "How a hyperlink, if it exists, should be displayed in the cell.",
                                                "type": "string",
                                                "enumDescriptions": [
                                                  "The default value: the hyperlink is rendered. Do not use this.",
                                                  "A hyperlink should be explicitly rendered.",
                                                  "A hyperlink should not be rendered."
                                                ]
                                              },
                                              "horizontalAlignment": {
                                                "description": "The horizontal alignment of the value in the cell.",
                                                "type": "string",
                                                "enumDescriptions": [
                                                  "The horizontal alignment is not specified. Do not use this.",
                                                  "The text is explicitly aligned to the left of the cell.",
                                                  "The text is explicitly aligned to the center of the cell.",
                                                  "The text is explicitly aligned to the right of the cell."
                                                ],
                                                "enum": [
                                                  "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                  "LEFT",
                                                  "CENTER",
                                                  "RIGHT"
                                                ]
                                              },
                                              "textFormat": {
                                                "description": "The format of the text in the cell (unless overridden by a format run).",
                                                "TextFormat": {
                                                  "id": "TextFormat",
                                                  "description": "The format of a run of text in a cell.\nAbsent values indicate that the field isn't specified.",
                                                  "type": "object",
                                                  "properties": {
                                                    "italic": {
                                                      "description": "True if the text is italicized.",
                                                      "type": "boolean"
                                                    },
                                                    "strikethrough": {
                                                      "description": "True if the text has a strikethrough.",
                                                      "type": "boolean"
                                                    },
                                                    "fontSize": {
                                                      "description": "The size of the font.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    },
                                                    "underline": {
                                                      "description": "True if the text is underlined.",
                                                      "type": "boolean"
                                                    },
                                                    "foregroundColor": {
                                                      "description": "The foreground color of the text.",
                                                      "Color": {
                                                        "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                        "type": "object",
                                                        "properties": {
                                                          "red": {
                                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                            "format": "float",
                                                            "type": "number"
                                                          },
                                                          "green": {
                                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                            "format": "float",
                                                            "type": "number"
                                                          },
                                                          "blue": {
                                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                            "format": "float",
                                                            "type": "number"
                                                          },
                                                          "alpha": {
                                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                            "format": "float",
                                                            "type": "number"
                                                          }
                                                        },
                                                        "id": "Color"
                                                      }
                                                    },
                                                    "bold": {
                                                      "description": "True if the text is bold.",
                                                      "type": "boolean"
                                                    },
                                                    "fontFamily": {
                                                      "description": "The font family.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "backgroundColor": {
                                                "description": "The background color of the cell.",
                                                "Color": {
                                                  "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                  "type": "object",
                                                  "properties": {
                                                    "red": {
                                                      "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                      "format": "float",
                                                      "type": "number"
                                                    },
                                                    "green": {
                                                      "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                      "format": "float",
                                                      "type": "number"
                                                    },
                                                    "blue": {
                                                      "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                      "format": "float",
                                                      "type": "number"
                                                    },
                                                    "alpha": {
                                                      "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                      "format": "float",
                                                      "type": "number"
                                                    }
                                                  },
                                                  "id": "Color"
                                                }
                                              }
                                            },
                                            "id": "CellFormat"
                                          }
                                        },
                                        "effectiveFormat": {
                                          "description": "The effective format being used by the cell.\nThis includes the results of applying any conditional formatting and,\nif the cell contains a formula, the computed number format.\nIf the effective format is the default format, effective format will\nnot be written.\nThis field is read-only.",
                                          "CellFormat": {
                                            "description": "The format of a cell.",
                                            "type": "object",
                                            "properties": {
                                              "padding": {
                                                "description": "The padding of the cell.",
                                                "Padding": {
                                                  "id": "Padding",
                                                  "description": "The amount of padding around the cell, in pixels.\nWhen updating padding, every field must be specified.",
                                                  "type": "object",
                                                  "properties": {
                                                    "top": {
                                                      "type": "integer",
                                                      "description": "The top padding of the cell.",
                                                      "format": "int32"
                                                    },
                                                    "left": {
                                                      "description": "The left padding of the cell.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    },
                                                    "right": {
                                                      "description": "The right padding of the cell.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    },
                                                    "bottom": {
                                                      "description": "The bottom padding of the cell.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    }
                                                  }
                                                }
                                              },
                                              "verticalAlignment": {
                                                "enumDescriptions": [
                                                  "The vertical alignment is not specified.  Do not use this.",
                                                  "The text is explicitly aligned to the top of the cell.",
                                                  "The text is explicitly aligned to the middle of the cell.",
                                                  "The text is explicitly aligned to the bottom of the cell."
                                                ],
                                                "enum": [
                                                  "VERTICAL_ALIGN_UNSPECIFIED",
                                                  "TOP",
                                                  "MIDDLE",
                                                  "BOTTOM"
                                                ],
                                                "description": "The vertical alignment of the value in the cell.",
                                                "type": "string"
                                              },
                                              "borders": {
                                                "description": "The borders of the cell.",
                                                "Borders": {
                                                  "description": "The borders of the cell.",
                                                  "type": "object",
                                                  "properties": {
                                                    "left": {
                                                      "description": "The left border of the cell.",
                                                      "Border": {
                                                        "description": "A border along a cell.",
                                                        "type": "object",
                                                        "properties": {
                                                          "width": {
                                                            "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                          },
                                                          "style": {
                                                            "description": "The style of the border.",
                                                            "type": "string",
                                                            "enumDescriptions": [
                                                              "The style is not specified. Do not use this.",
                                                              "The border is dotted.",
                                                              "The border is dashed.",
                                                              "The border is a thin solid line.",
                                                              "The border is a medium solid line.",
                                                              "The border is a thick solid line.",
                                                              "No border.\nUsed only when updating a border in order to erase it.",
                                                              "The border is two solid lines."
                                                            ],
                                                            "enum": [
                                                              "STYLE_UNSPECIFIED",
                                                              "DOTTED",
                                                              "DASHED",
                                                              "SOLID",
                                                              "SOLID_MEDIUM",
                                                              "SOLID_THICK",
                                                              "NONE",
                                                              "DOUBLE"
                                                            ]
                                                          },
                                                          "color": {
                                                            "description": "The color of the border.",
                                                            "Color": {
                                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                              "type": "object",
                                                              "properties": {
                                                                "red": {
                                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "green": {
                                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "blue": {
                                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "alpha": {
                                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                }
                                                              },
                                                              "id": "Color"
                                                            }
                                                          }
                                                        },
                                                        "id": "Border"
                                                      }
                                                    },
                                                    "right": {
                                                      "description": "The right border of the cell.",
                                                      "Border": {
                                                        "description": "A border along a cell.",
                                                        "type": "object",
                                                        "properties": {
                                                          "width": {
                                                            "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                          },
                                                          "style": {
                                                            "description": "The style of the border.",
                                                            "type": "string",
                                                            "enumDescriptions": [
                                                              "The style is not specified. Do not use this.",
                                                              "The border is dotted.",
                                                              "The border is dashed.",
                                                              "The border is a thin solid line.",
                                                              "The border is a medium solid line.",
                                                              "The border is a thick solid line.",
                                                              "No border.\nUsed only when updating a border in order to erase it.",
                                                              "The border is two solid lines."
                                                            ],
                                                            "enum": [
                                                              "STYLE_UNSPECIFIED",
                                                              "DOTTED",
                                                              "DASHED",
                                                              "SOLID",
                                                              "SOLID_MEDIUM",
                                                              "SOLID_THICK",
                                                              "NONE",
                                                              "DOUBLE"
                                                            ]
                                                          },
                                                          "color": {
                                                            "description": "The color of the border.",
                                                            "Color": {
                                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                              "type": "object",
                                                              "properties": {
                                                                "red": {
                                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "green": {
                                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "blue": {
                                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "alpha": {
                                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                }
                                                              },
                                                              "id": "Color"
                                                            }
                                                          }
                                                        },
                                                        "id": "Border"
                                                      }
                                                    },
                                                    "bottom": {
                                                      "description": "The bottom border of the cell.",
                                                      "Border": {
                                                        "description": "A border along a cell.",
                                                        "type": "object",
                                                        "properties": {
                                                          "width": {
                                                            "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                          },
                                                          "style": {
                                                            "description": "The style of the border.",
                                                            "type": "string",
                                                            "enumDescriptions": [
                                                              "The style is not specified. Do not use this.",
                                                              "The border is dotted.",
                                                              "The border is dashed.",
                                                              "The border is a thin solid line.",
                                                              "The border is a medium solid line.",
                                                              "The border is a thick solid line.",
                                                              "No border.\nUsed only when updating a border in order to erase it.",
                                                              "The border is two solid lines."
                                                            ],
                                                            "enum": [
                                                              "STYLE_UNSPECIFIED",
                                                              "DOTTED",
                                                              "DASHED",
                                                              "SOLID",
                                                              "SOLID_MEDIUM",
                                                              "SOLID_THICK",
                                                              "NONE",
                                                              "DOUBLE"
                                                            ]
                                                          },
                                                          "color": {
                                                            "description": "The color of the border.",
                                                            "Color": {
                                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                              "type": "object",
                                                              "properties": {
                                                                "red": {
                                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "green": {
                                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "blue": {
                                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "alpha": {
                                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                }
                                                              },
                                                              "id": "Color"
                                                            }
                                                          }
                                                        },
                                                        "id": "Border"
                                                      }
                                                    },
                                                    "top": {
                                                      "description": "The top border of the cell.",
                                                      "Border": {
                                                        "description": "A border along a cell.",
                                                        "type": "object",
                                                        "properties": {
                                                          "width": {
                                                            "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                            "format": "int32",
                                                            "type": "integer"
                                                          },
                                                          "style": {
                                                            "description": "The style of the border.",
                                                            "type": "string",
                                                            "enumDescriptions": [
                                                              "The style is not specified. Do not use this.",
                                                              "The border is dotted.",
                                                              "The border is dashed.",
                                                              "The border is a thin solid line.",
                                                              "The border is a medium solid line.",
                                                              "The border is a thick solid line.",
                                                              "No border.\nUsed only when updating a border in order to erase it.",
                                                              "The border is two solid lines."
                                                            ],
                                                            "enum": [
                                                              "STYLE_UNSPECIFIED",
                                                              "DOTTED",
                                                              "DASHED",
                                                              "SOLID",
                                                              "SOLID_MEDIUM",
                                                              "SOLID_THICK",
                                                              "NONE",
                                                              "DOUBLE"
                                                            ]
                                                          },
                                                          "color": {
                                                            "description": "The color of the border.",
                                                            "Color": {
                                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                              "type": "object",
                                                              "properties": {
                                                                "red": {
                                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "green": {
                                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "blue": {
                                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                },
                                                                "alpha": {
                                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                                  "format": "float",
                                                                  "type": "number"
                                                                }
                                                              },
                                                              "id": "Color"
                                                            }
                                                          }
                                                        },
                                                        "id": "Border"
                                                      }
                                                    }
                                                  },
                                                  "id": "Borders"
                                                }
                                              },
                                              "textDirection": {
                                                "description": "The direction of the text in the cell.",
                                                "type": "string",
                                                "enumDescriptions": [
                                                  "The text direction is not specified. Do not use this.",
                                                  "The text direction of left-to-right was set by the user.",
                                                  "The text direction of right-to-left was set by the user."
                                                ],
                                                "enum": [
                                                  "TEXT_DIRECTION_UNSPECIFIED",
                                                  "LEFT_TO_RIGHT",
                                                  "RIGHT_TO_LEFT"
                                                ]
                                              },
                                              "wrapStrategy": {
                                                "enumDescriptions": [
                                                  "The default value, do not use.",
                                                  "Lines that are longer than the cell width will be written in the next\ncell over, so long as that cell is empty. If the next cell over is\nnon-empty, this behaves the same as CLIP. The text will never wrap\nto the next line unless the user manually inserts a new line.\nExample:\n\n    | First sentence. |\n    | Manual newline that is very long. <- Text continues into next cell\n    | Next newline.   |",
                                                  "This wrap strategy represents the old Google Sheets wrap strategy where\nwords that are longer than a line are clipped rather than broken. This\nstrategy is not supported on all platforms and is being phased out.\nExample:\n\n    | Cell has a |\n    | loooooooooo| <- Word is clipped.\n    | word.      |",
                                                  "Lines that are longer than the cell width will be clipped.\nThe text will never wrap to the next line unless the user manually\ninserts a new line.\nExample:\n\n    | First sentence. |\n    | Manual newline t| <- Text is clipped\n    | Next newline.   |",
                                                  "Words that are longer than a line are wrapped at the character level\nrather than clipped.\nExample:\n\n    | Cell has a |\n    | loooooooooo| <- Word is broken.\n    | ong word.  |"
                                                ],
                                                "enum": [
                                                  "WRAP_STRATEGY_UNSPECIFIED",
                                                  "OVERFLOW_CELL",
                                                  "LEGACY_WRAP",
                                                  "CLIP",
                                                  "WRAP"
                                                ],
                                                "description": "The wrap strategy for the value in the cell.",
                                                "type": "string"
                                              },
                                              "textRotation": {
                                                "description": "The rotation applied to text in a cell",
                                                "TextRotation": {
                                                  "description": "The rotation applied to text in a cell.",
                                                  "type": "object",
                                                  "properties": {
                                                    "angle": {
                                                      "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the\ncounterclockwise direction, whereas for RTL they are in the clockwise\ndirection",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    },
                                                    "vertical": {
                                                      "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
                                                      "type": "boolean"
                                                    }
                                                  },
                                                  "id": "TextRotation"
                                                }
                                              },
                                              "numberFormat": {
                                                "description": "A format describing how number values should be represented to the user.",
                                                "NumberFormat": {
                                                  "description": "The number format of a cell.",
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "enum": [
                                                        "NUMBER_FORMAT_TYPE_UNSPECIFIED",
                                                        "TEXT",
                                                        "NUMBER",
                                                        "PERCENT",
                                                        "CURRENCY",
                                                        "DATE",
                                                        "TIME",
                                                        "DATE_TIME",
                                                        "SCIENTIFIC"
                                                      ],
                                                      "description": "The type of the number format.\nWhen writing, this field must be set.",
                                                      "type": "string",
                                                      "enumDescriptions": [
                                                        "The number format is not specified\nand is based on the contents of the cell.\nDo not explicitly use this.",
                                                        "Text formatting, e.g `1000.12`",
                                                        "Number formatting, e.g, `1,000.12`",
                                                        "Percent formatting, e.g `10.12%`",
                                                        "Currency formatting, e.g `$1,000.12`",
                                                        "Date formatting, e.g `9/26/2008`",
                                                        "Time formatting, e.g `3:59:00 PM`",
                                                        "Date+Time formatting, e.g `9/26/08 15:59:00`",
                                                        "Scientific number formatting, e.g `1.01E+03`"
                                                      ]
                                                    },
                                                    "pattern": {
                                                      "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for\nmore information about the supported patterns.",
                                                      "type": "string"
                                                    }
                                                  },
                                                  "id": "NumberFormat"
                                                }
                                              },
                                              "hyperlinkDisplayType": {
                                                "enum": [
                                                  "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
                                                  "LINKED",
                                                  "PLAIN_TEXT"
                                                ],
                                                "description": "How a hyperlink, if it exists, should be displayed in the cell.",
                                                "type": "string",
                                                "enumDescriptions": [
                                                  "The default value: the hyperlink is rendered. Do not use this.",
                                                  "A hyperlink should be explicitly rendered.",
                                                  "A hyperlink should not be rendered."
                                                ]
                                              },
                                              "horizontalAlignment": {
                                                "description": "The horizontal alignment of the value in the cell.",
                                                "type": "string",
                                                "enumDescriptions": [
                                                  "The horizontal alignment is not specified. Do not use this.",
                                                  "The text is explicitly aligned to the left of the cell.",
                                                  "The text is explicitly aligned to the center of the cell.",
                                                  "The text is explicitly aligned to the right of the cell."
                                                ],
                                                "enum": [
                                                  "HORIZONTAL_ALIGN_UNSPECIFIED",
                                                  "LEFT",
                                                  "CENTER",
                                                  "RIGHT"
                                                ]
                                              },
                                              "textFormat": {
                                                "description": "The format of the text in the cell (unless overridden by a format run).",
                                                "TextFormat": {
                                                  "id": "TextFormat",
                                                  "description": "The format of a run of text in a cell.\nAbsent values indicate that the field isn't specified.",
                                                  "type": "object",
                                                  "properties": {
                                                    "italic": {
                                                      "description": "True if the text is italicized.",
                                                      "type": "boolean"
                                                    },
                                                    "strikethrough": {
                                                      "description": "True if the text has a strikethrough.",
                                                      "type": "boolean"
                                                    },
                                                    "fontSize": {
                                                      "description": "The size of the font.",
                                                      "format": "int32",
                                                      "type": "integer"
                                                    },
                                                    "underline": {
                                                      "description": "True if the text is underlined.",
                                                      "type": "boolean"
                                                    },
                                                    "foregroundColor": {
                                                      "description": "The foreground color of the text.",
                                                      "Color": {
                                                        "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                        "type": "object",
                                                        "properties": {
                                                          "red": {
                                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                            "format": "float",
                                                            "type": "number"
                                                          },
                                                          "green": {
                                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                            "format": "float",
                                                            "type": "number"
                                                          },
                                                          "blue": {
                                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                            "format": "float",
                                                            "type": "number"
                                                          },
                                                          "alpha": {
                                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                            "format": "float",
                                                            "type": "number"
                                                          }
                                                        },
                                                        "id": "Color"
                                                      }
                                                    },
                                                    "bold": {
                                                      "description": "True if the text is bold.",
                                                      "type": "boolean"
                                                    },
                                                    "fontFamily": {
                                                      "description": "The font family.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              },
                                              "backgroundColor": {
                                                "description": "The background color of the cell.",
                                                "Color": {
                                                  "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                  "type": "object",
                                                  "properties": {
                                                    "red": {
                                                      "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                      "format": "float",
                                                      "type": "number"
                                                    },
                                                    "green": {
                                                      "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                      "format": "float",
                                                      "type": "number"
                                                    },
                                                    "blue": {
                                                      "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                      "format": "float",
                                                      "type": "number"
                                                    },
                                                    "alpha": {
                                                      "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                      "format": "float",
                                                      "type": "number"
                                                    }
                                                  },
                                                  "id": "Color"
                                                }
                                              }
                                            },
                                            "id": "CellFormat"
                                          }
                                        },
                                        "note": {
                                          "description": "Any note on the cell.",
                                          "type": "string"
                                        },
                                        "userEnteredValue": {
                                          "description": "The value the user entered in the cell. e.g, `1234`, `'Hello'`, or `=NOW()`\nNote: Dates, Times and DateTimes are represented as doubles in\nserial number format.",
                                          "ExtendedValue": {
                                            "description": "The kinds of value that a cell in a spreadsheet can have.",
                                            "type": "object",
                                            "properties": {
                                              "stringValue": {
                                                "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                "type": "string"
                                              },
                                              "boolValue": {
                                                "description": "Represents a boolean value.",
                                                "type": "boolean"
                                              },
                                              "formulaValue": {
                                                "description": "Represents a formula.",
                                                "type": "string"
                                              },
                                              "numberValue": {
                                                "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                "format": "double",
                                                "type": "number"
                                              },
                                              "errorValue": {
                                                "description": "Represents an error.\nThis field is read-only.",
                                                "ErrorValue": {
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "enumDescriptions": [
                                                        "The default error type, do not use this.",
                                                        "Corresponds to the `#ERROR!` error.",
                                                        "Corresponds to the `#NULL!` error.",
                                                        "Corresponds to the `#DIV/0` error.",
                                                        "Corresponds to the `#VALUE!` error.",
                                                        "Corresponds to the `#REF!` error.",
                                                        "Corresponds to the `#NAME?` error.",
                                                        "Corresponds to the `#NUM`! error.",
                                                        "Corresponds to the `#N/A` error.",
                                                        "Corresponds to the `Loading...` state."
                                                      ],
                                                      "enum": [
                                                        "ERROR_TYPE_UNSPECIFIED",
                                                        "ERROR",
                                                        "NULL_VALUE",
                                                        "DIVIDE_BY_ZERO",
                                                        "VALUE",
                                                        "REF",
                                                        "NAME",
                                                        "NUM",
                                                        "N_A",
                                                        "LOADING"
                                                      ],
                                                      "description": "The type of error.",
                                                      "type": "string"
                                                    },
                                                    "message": {
                                                      "type": "string",
                                                      "description": "A message with more information about the error\n(in the spreadsheet's locale)."
                                                    }
                                                  },
                                                  "id": "ErrorValue",
                                                  "description": "An error in a cell."
                                                }
                                              }
                                            },
                                            "id": "ExtendedValue"
                                          }
                                        },
                                        "dataValidation": {
                                          "description": "A data validation rule on the cell, if any.\n\nWhen writing, the new data validation rule will overwrite any prior rule.",
                                          "DataValidationRule": {
                                            "description": "A data validation rule.",
                                            "type": "object",
                                            "properties": {
                                              "showCustomUi": {
                                                "type": "boolean",
                                                "description": "True if the UI should be customized based on the kind of condition.\nIf true, \"List\" conditions will show a dropdown."
                                              },
                                              "strict": {
                                                "description": "True if invalid data should be rejected.",
                                                "type": "boolean"
                                              },
                                              "inputMessage": {
                                                "description": "A message to show the user when adding data to the cell.",
                                                "type": "string"
                                              },
                                              "condition": {
                                                "description": "The condition that data in the cell must match.",
                                                "BooleanCondition": {
                                                  "description": "A condition that can evaluate to true or false.\nBooleanConditions are used by conditional formatting,\ndata validation, and the criteria in filters.",
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "enum": [
                                                        "CONDITION_TYPE_UNSPECIFIED",
                                                        "NUMBER_GREATER",
                                                        "NUMBER_GREATER_THAN_EQ",
                                                        "NUMBER_LESS",
                                                        "NUMBER_LESS_THAN_EQ",
                                                        "NUMBER_EQ",
                                                        "NUMBER_NOT_EQ",
                                                        "NUMBER_BETWEEN",
                                                        "NUMBER_NOT_BETWEEN",
                                                        "TEXT_CONTAINS",
                                                        "TEXT_NOT_CONTAINS",
                                                        "TEXT_STARTS_WITH",
                                                        "TEXT_ENDS_WITH",
                                                        "TEXT_EQ",
                                                        "TEXT_IS_EMAIL",
                                                        "TEXT_IS_URL",
                                                        "DATE_EQ",
                                                        "DATE_BEFORE",
                                                        "DATE_AFTER",
                                                        "DATE_ON_OR_BEFORE",
                                                        "DATE_ON_OR_AFTER",
                                                        "DATE_BETWEEN",
                                                        "DATE_NOT_BETWEEN",
                                                        "DATE_IS_VALID",
                                                        "ONE_OF_RANGE",
                                                        "ONE_OF_LIST",
                                                        "BLANK",
                                                        "NOT_BLANK",
                                                        "CUSTOM_FORMULA",
                                                        "BOOLEAN"
                                                      ],
                                                      "description": "The type of condition.",
                                                      "type": "string",
                                                      "enumDescriptions": [
                                                        "The default value, do not use.",
                                                        "The cell's value must be greater than the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                                        "The cell's value must be greater than or equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                                        "The cell's value must be less than the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                                        "The cell's value must be less than or equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                                        "The cell's value must be equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                                        "The cell's value must be not equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                                        "The cell's value must be between the two condition values.\nSupported by data validation, conditional formatting and filters.\nRequires exactly two ConditionValues.",
                                                        "The cell's value must not be between the two condition values.\nSupported by data validation, conditional formatting and filters.\nRequires exactly two ConditionValues.",
                                                        "The cell's value must contain the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                                        "The cell's value must not contain the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                                        "The cell's value must start with the condition's value.\nSupported by conditional formatting and filters.\nRequires a single ConditionValue.",
                                                        "The cell's value must end with the condition's value.\nSupported by conditional formatting and filters.\nRequires a single ConditionValue.",
                                                        "The cell's value must be exactly the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                                        "The cell's value must be a valid email address.\nSupported by data validation.\nRequires no ConditionValues.",
                                                        "The cell's value must be a valid URL.\nSupported by data validation.\nRequires no ConditionValues.",
                                                        "The cell's value must be the same date as the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                                        "The cell's value must be before the date of the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue\nthat may be a relative date.",
                                                        "The cell's value must be after the date of the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue\nthat may be a relative date.",
                                                        "The cell's value must be on or before the date of the condition's value.\nSupported by data validation.\nRequires a single ConditionValue\nthat may be a relative date.",
                                                        "The cell's value must be on or after the date of the condition's value.\nSupported by data validation.\nRequires a single ConditionValue\nthat may be a relative date.",
                                                        "The cell's value must be between the dates of the two condition values.\nSupported by data validation.\nRequires exactly two ConditionValues.",
                                                        "The cell's value must be outside the dates of the two condition values.\nSupported by data validation.\nRequires exactly two ConditionValues.",
                                                        "The cell's value must be a date.\nSupported by data validation.\nRequires no ConditionValues.",
                                                        "The cell's value must be listed in the grid in condition value's range.\nSupported by data validation.\nRequires a single ConditionValue,\nand the value must be a valid range in A1 notation.",
                                                        "The cell's value must be in the list of condition values.\nSupported by data validation.\nSupports any number of condition values,\none per item in the list.\nFormulas are not supported in the values.",
                                                        "The cell's value must be empty.\nSupported by conditional formatting and filters.\nRequires no ConditionValues.",
                                                        "The cell's value must not be empty.\nSupported by conditional formatting and filters.\nRequires no ConditionValues.",
                                                        "The condition's formula must evaluate to true.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                                        "The cell's value must be TRUE/FALSE or in the list of condition values.\nSupported by data validation.\nRenders as a cell checkbox.\nSupports zero, one or two ConditionValues.  No\nvalues indicates the cell must be TRUE or FALSE, where TRUE renders as\nchecked and FALSE renders as unchecked.  One value indicates the cell\nwill render as checked when it contains that value and unchecked when it\nis blank.  Two values indicate that the cell will render as checked when\nit contains the first value and unchecked when it contains the second\nvalue.  For example, [\"Yes\",\"No\"] indicates that the cell will render a\nchecked box when it has the value \"Yes\" and an unchecked box when it has\nthe value \"No\"."
                                                      ]
                                                    },
                                                    "values": {
                                                      "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
                                                      "type": "array",
                                                      "properties": {
                                                        "ConditionValue": {
                                                          "id": "ConditionValue",
                                                          "description": "The value of the condition.",
                                                          "type": "object",
                                                          "properties": {
                                                            "relativeDate": {
                                                              "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
                                                              "type": "string",
                                                              "enumDescriptions": [
                                                                "Default value, do not use.",
                                                                "The value is one year before today.",
                                                                "The value is one month before today.",
                                                                "The value is one week before today.",
                                                                "The value is yesterday.",
                                                                "The value is today.",
                                                                "The value is tomorrow."
                                                              ],
                                                              "enum": [
                                                                "RELATIVE_DATE_UNSPECIFIED",
                                                                "PAST_YEAR",
                                                                "PAST_MONTH",
                                                                "PAST_WEEK",
                                                                "YESTERDAY",
                                                                "TODAY",
                                                                "TOMORROW"
                                                              ]
                                                            },
                                                            "userEnteredValue": {
                                                              "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
                                                              "type": "string"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "id": "BooleanCondition"
                                                }
                                              }
                                            },
                                            "id": "DataValidationRule"
                                          }
                                        },
                                        "effectiveValue": {
                                          "description": "The effective value of the cell. For cells with formulas, this is\nthe calculated value.  For cells with literals, this is\nthe same as the user_entered_value.\nThis field is read-only.",
                                          "ExtendedValue": {
                                            "description": "The kinds of value that a cell in a spreadsheet can have.",
                                            "type": "object",
                                            "properties": {
                                              "stringValue": {
                                                "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
                                                "type": "string"
                                              },
                                              "boolValue": {
                                                "description": "Represents a boolean value.",
                                                "type": "boolean"
                                              },
                                              "formulaValue": {
                                                "description": "Represents a formula.",
                                                "type": "string"
                                              },
                                              "numberValue": {
                                                "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
                                                "format": "double",
                                                "type": "number"
                                              },
                                              "errorValue": {
                                                "description": "Represents an error.\nThis field is read-only.",
                                                "ErrorValue": {
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "enumDescriptions": [
                                                        "The default error type, do not use this.",
                                                        "Corresponds to the `#ERROR!` error.",
                                                        "Corresponds to the `#NULL!` error.",
                                                        "Corresponds to the `#DIV/0` error.",
                                                        "Corresponds to the `#VALUE!` error.",
                                                        "Corresponds to the `#REF!` error.",
                                                        "Corresponds to the `#NAME?` error.",
                                                        "Corresponds to the `#NUM`! error.",
                                                        "Corresponds to the `#N/A` error.",
                                                        "Corresponds to the `Loading...` state."
                                                      ],
                                                      "enum": [
                                                        "ERROR_TYPE_UNSPECIFIED",
                                                        "ERROR",
                                                        "NULL_VALUE",
                                                        "DIVIDE_BY_ZERO",
                                                        "VALUE",
                                                        "REF",
                                                        "NAME",
                                                        "NUM",
                                                        "N_A",
                                                        "LOADING"
                                                      ],
                                                      "description": "The type of error.",
                                                      "type": "string"
                                                    },
                                                    "message": {
                                                      "type": "string",
                                                      "description": "A message with more information about the error\n(in the spreadsheet's locale)."
                                                    }
                                                  },
                                                  "id": "ErrorValue",
                                                  "description": "An error in a cell."
                                                }
                                              }
                                            },
                                            "id": "ExtendedValue"
                                          }
                                        },
                                        "textFormatRuns": {
                                          "description": "Runs of rich text applied to subsections of the cell.  Runs are only valid\non user entered strings, not formulas, bools, or numbers.\nRuns start at specific indexes in the text and continue until the next\nrun. Properties of a run will continue unless explicitly changed\nin a subsequent run (and properties of the first run will continue\nthe properties of the cell unless explicitly changed).\n\nWhen writing, the new runs will overwrite any prior runs.  When writing a\nnew user_entered_value, previous runs are erased.",
                                          "type": "array",
                                          "properties": {
                                            "TextFormatRun": {
                                              "description": "A run of a text format. The format of this run continues until the start\nindex of the next run.\nWhen updating, all fields must be set.",
                                              "type": "object",
                                              "properties": {
                                                "format": {
                                                  "description": "The format of this run.  Absent values inherit the cell's format.",
                                                  "TextFormat": {
                                                    "id": "TextFormat",
                                                    "description": "The format of a run of text in a cell.\nAbsent values indicate that the field isn't specified.",
                                                    "type": "object",
                                                    "properties": {
                                                      "italic": {
                                                        "description": "True if the text is italicized.",
                                                        "type": "boolean"
                                                      },
                                                      "strikethrough": {
                                                        "description": "True if the text has a strikethrough.",
                                                        "type": "boolean"
                                                      },
                                                      "fontSize": {
                                                        "description": "The size of the font.",
                                                        "format": "int32",
                                                        "type": "integer"
                                                      },
                                                      "underline": {
                                                        "description": "True if the text is underlined.",
                                                        "type": "boolean"
                                                      },
                                                      "foregroundColor": {
                                                        "description": "The foreground color of the text.",
                                                        "Color": {
                                                          "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                          "type": "object",
                                                          "properties": {
                                                            "red": {
                                                              "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                              "format": "float",
                                                              "type": "number"
                                                            },
                                                            "green": {
                                                              "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                              "format": "float",
                                                              "type": "number"
                                                            },
                                                            "blue": {
                                                              "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                              "format": "float",
                                                              "type": "number"
                                                            },
                                                            "alpha": {
                                                              "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                              "format": "float",
                                                              "type": "number"
                                                            }
                                                          },
                                                          "id": "Color"
                                                        }
                                                      },
                                                      "bold": {
                                                        "description": "True if the text is bold.",
                                                        "type": "boolean"
                                                      },
                                                      "fontFamily": {
                                                        "description": "The font family.",
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "startIndex": {
                                                  "description": "The character index where this run starts.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                }
                                              },
                                              "id": "TextFormatRun"
                                            }
                                          }
                                        },
                                        "formattedValue": {
                                          "type": "string",
                                          "description": "The formatted value of the cell.\nThis is the value as it's shown to the user.\nThis field is read-only."
                                        },
                                        "hyperlink": {
                                          "description": "A hyperlink this cell points to, if any.\nThis field is read-only.  (To set it, use a `=HYPERLINK` formula\nin the userEnteredValue.formulaValue\nfield.)",
                                          "type": "string"
                                        }
                                      },
                                      "id": "CellData"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "startRow": {
                          "description": "The first row this GridData refers to, zero-based.",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "id": "GridData"
                    }
                  }
                },
                "properties": {
                  "description": "The properties of the sheet.",
                  "SheetProperties": {
                    "description": "Properties of a sheet.",
                    "type": "object",
                    "properties": {
                      "title": {
                        "description": "The name of the sheet.",
                        "type": "string"
                      },
                      "index": {
                        "description": "The index of the sheet within the spreadsheet.\nWhen adding or updating sheet properties, if this field\nis excluded then the sheet is added or moved to the end\nof the sheet list. When updating sheet indices or inserting\nsheets, movement is considered in \"before the move\" indexes.\nFor example, if there were 3 sheets (S1, S2, S3) in order to\nmove S1 ahead of S2 the index would have to be set to 2. A sheet\nindex update request is ignored if the requested index is\nidentical to the sheets current index or if the requested new\nindex is equal to the current sheet index + 1.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "tabColor": {
                        "description": "The color of the tab in the UI.",
                        "Color": {
                          "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                          "type": "object",
                          "properties": {
                            "red": {
                              "description": "The amount of red in the color as a value in the interval [0, 1].",
                              "format": "float",
                              "type": "number"
                            },
                            "green": {
                              "description": "The amount of green in the color as a value in the interval [0, 1].",
                              "format": "float",
                              "type": "number"
                            },
                            "blue": {
                              "description": "The amount of blue in the color as a value in the interval [0, 1].",
                              "format": "float",
                              "type": "number"
                            },
                            "alpha": {
                              "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                              "format": "float",
                              "type": "number"
                            }
                          },
                          "id": "Color"
                        }
                      },
                      "sheetId": {
                        "description": "The ID of the sheet. Must be non-negative.\nThis field cannot be changed once set.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "rightToLeft": {
                        "description": "True if the sheet is an RTL sheet instead of an LTR sheet.",
                        "type": "boolean"
                      },
                      "hidden": {
                        "description": "True if the sheet is hidden in the UI, false if it's visible.",
                        "type": "boolean"
                      },
                      "sheetType": {
                        "description": "The type of sheet. Defaults to GRID.\nThis field cannot be changed once set.",
                        "type": "string",
                        "enumDescriptions": [
                          "Default value, do not use.",
                          "The sheet is a grid.",
                          "The sheet has no grid and instead has an object like a chart or image."
                        ],
                        "enum": [
                          "SHEET_TYPE_UNSPECIFIED",
                          "GRID",
                          "OBJECT"
                        ]
                      },
                      "gridProperties": {
                        "description": "Additional properties of the sheet if this sheet is a grid.\n(If the sheet is an object sheet, containing a chart or image, then\nthis field will be absent.)\nWhen writing it is an error to set any grid properties on non-grid sheets.",
                        "GridProperties": {
                          "description": "Properties of a grid.",
                          "type": "object",
                          "properties": {
                            "frozenRowCount": {
                              "description": "The number of rows that are frozen in the grid.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "columnCount": {
                              "type": "integer",
                              "description": "The number of columns in the grid.",
                              "format": "int32"
                            },
                            "frozenColumnCount": {
                              "type": "integer",
                              "description": "The number of columns that are frozen in the grid.",
                              "format": "int32"
                            },
                            "columnGroupControlAfter": {
                              "description": "True if the column grouping control toggle is shown after the group.",
                              "type": "boolean"
                            },
                            "rowGroupControlAfter": {
                              "type": "boolean",
                              "description": "True if the row grouping control toggle is shown after the group."
                            },
                            "rowCount": {
                              "description": "The number of rows in the grid.",
                              "format": "int32",
                              "type": "integer"
                            },
                            "hideGridlines": {
                              "description": "True if the grid isn't showing gridlines in the UI.",
                              "type": "boolean"
                            }
                          },
                          "id": "GridProperties"
                        }
                      }
                    },
                    "id": "SheetProperties"
                  }
                },
                "protectedRanges": {
                  "description": "The protected ranges in this sheet.",
                  "type": "array",
                  "properties": {
                    "ProtectedRange": {
                      "properties": {
                        "description": {
                          "description": "The description of this protected range.",
                          "type": "string"
                        },
                        "unprotectedRanges": {
                          "description": "The list of unprotected ranges within a protected sheet.\nUnprotected ranges are only supported on protected sheets.",
                          "type": "array",
                          "properties": {
                            "GridRange": {
                              "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                              "type": "object",
                              "properties": {
                                "endRowIndex": {
                                  "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "endColumnIndex": {
                                  "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "startRowIndex": {
                                  "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "startColumnIndex": {
                                  "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "sheetId": {
                                  "description": "The sheet this range is on.",
                                  "format": "int32",
                                  "type": "integer"
                                }
                              },
                              "id": "GridRange"
                            }
                          }
                        },
                        "namedRangeId": {
                          "description": "The named range this protected range is backed by, if any.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
                          "type": "string"
                        },
                        "protectedRangeId": {
                          "description": "The ID of the protected range.\nThis field is read-only.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "warningOnly": {
                          "description": "True if this protected range will show a warning when editing.\nWarning-based protection means that every user can edit data in the\nprotected range, except editing will prompt a warning asking the user\nto confirm the edit.\n\nWhen writing: if this field is true, then editors is ignored.\nAdditionally, if this field is changed from true to false and the\n`editors` field is not set (nor included in the field mask), then\nthe editors will be set to all the editors in the document.",
                          "type": "boolean"
                        },
                        "requestingUserCanEdit": {
                          "description": "True if the user who requested this protected range can edit the\nprotected area.\nThis field is read-only.",
                          "type": "boolean"
                        },
                        "editors": {
                          "description": "The users and groups with edit access to the protected range.\nThis field is only visible to users with edit access to the protected\nrange and the document.\nEditors are not supported with warning_only protection.",
                          "Editors": {
                            "type": "object",
                            "properties": {
                              "users": {
                                "description": "The email addresses of users with edit access to the protected range.",
                                "type": "array",
                                "properties": {
                                  "type": "string"
                                }
                              },
                              "groups": {
                                "description": "The email addresses of groups with edit access to the protected range.",
                                "type": "array",
                                "properties": {
                                  "type": "string"
                                }
                              },
                              "domainUsersCanEdit": {
                                "description": "True if anyone in the document's domain has edit access to the protected\nrange.  Domain protection is only supported on documents within a domain.",
                                "type": "boolean"
                              }
                            },
                            "id": "Editors",
                            "description": "The editors of a protected range."
                          }
                        },
                        "range": {
                          "description": "The range that is being protected.\nThe range may be fully unbounded, in which case this is considered\na protected sheet.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
                          "GridRange": {
                            "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                            "type": "object",
                            "properties": {
                              "endRowIndex": {
                                "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "endColumnIndex": {
                                "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "startRowIndex": {
                                "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "startColumnIndex": {
                                "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "sheetId": {
                                "description": "The sheet this range is on.",
                                "format": "int32",
                                "type": "integer"
                              }
                            },
                            "id": "GridRange"
                          }
                        }
                      },
                      "id": "ProtectedRange",
                      "description": "A protected range.",
                      "type": "object"
                    }
                  }
                },
                "conditionalFormats": {
                  "description": "The conditional format rules in this sheet.",
                  "type": "array",
                  "properties": {
                    "ConditionalFormatRule": {
                      "description": "A rule describing a conditional format.",
                      "type": "object",
                      "properties": {
                        "ranges": {
                          "description": "The ranges that are formatted if the condition is true.\nAll the ranges must be on the same grid.",
                          "type": "array",
                          "properties": {
                            "GridRange": {
                              "description": "A range on a sheet.\nAll indexes are zero-based.\nIndexes are half open, e.g the start index is inclusive\nand the end index is exclusive -- [start_index, end_index).\nMissing indexes indicate the range is unbounded on that side.\n\nFor example, if `\"Sheet1\"` is sheet ID 0, then:\n\n  `Sheet1!A1:A1 == sheet_id: 0,\n                  start_row_index: 0, end_row_index: 1,\n                  start_column_index: 0, end_column_index: 1`\n\n  `Sheet1!A3:B4 == sheet_id: 0,\n                  start_row_index: 2, end_row_index: 4,\n                  start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A:B == sheet_id: 0,\n                start_column_index: 0, end_column_index: 2`\n\n  `Sheet1!A5:B == sheet_id: 0,\n                 start_row_index: 4,\n                 start_column_index: 0, end_column_index: 2`\n\n  `Sheet1 == sheet_id:0`\n\nThe start index must always be less than or equal to the end index.\nIf the start index equals the end index, then the range is empty.\nEmpty ranges are typically not meaningful and are usually rendered in the\nUI as `#REF!`.",
                              "type": "object",
                              "properties": {
                                "endRowIndex": {
                                  "description": "The end row (exclusive) of the range, or not set if unbounded.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "endColumnIndex": {
                                  "description": "The end column (exclusive) of the range, or not set if unbounded.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "startRowIndex": {
                                  "description": "The start row (inclusive) of the range, or not set if unbounded.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "startColumnIndex": {
                                  "description": "The start column (inclusive) of the range, or not set if unbounded.",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "sheetId": {
                                  "description": "The sheet this range is on.",
                                  "format": "int32",
                                  "type": "integer"
                                }
                              },
                              "id": "GridRange"
                            }
                          }
                        },
                        "gradientRule": {
                          "description": "The formatting will vary based on the gradients in the rule.",
                          "GradientRule": {
                            "description": "A rule that applies a gradient color scale format, based on\nthe interpolation points listed. The format of a cell will vary\nbased on its contents as compared to the values of the interpolation\npoints.",
                            "type": "object",
                            "properties": {
                              "midpoint": {
                                "description": "An optional midway interpolation point.",
                                "InterpolationPoint": {
                                  "description": "A single interpolation point on a gradient conditional format.\nThese pin the gradient color scale according to the color,\ntype and value chosen.",
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "enumDescriptions": [
                                        "The default value, do not use.",
                                        "The interpolation point uses the minimum value in the\ncells over the range of the conditional format.",
                                        "The interpolation point uses the maximum value in the\ncells over the range of the conditional format.",
                                        "The interpolation point uses exactly the value in\nInterpolationPoint.value.",
                                        "The interpolation point is the given percentage over\nall the cells in the range of the conditional format.\nThis is equivalent to NUMBER if the value was:\n`=(MAX(FLATTEN(range)) * (value / 100))\n  + (MIN(FLATTEN(range)) * (1 - (value / 100)))`\n(where errors in the range are ignored when flattening).",
                                        "The interpolation point is the given percentile\nover all the cells in the range of the conditional format.\nThis is equivalent to NUMBER if the value was:\n`=PERCENTILE(FLATTEN(range), value / 100)`\n(where errors in the range are ignored when flattening)."
                                      ],
                                      "enum": [
                                        "INTERPOLATION_POINT_TYPE_UNSPECIFIED",
                                        "MIN",
                                        "MAX",
                                        "NUMBER",
                                        "PERCENT",
                                        "PERCENTILE"
                                      ],
                                      "description": "How the value should be interpreted.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value this interpolation point uses.  May be a formula.\nUnused if type is MIN or\nMAX.",
                                      "type": "string"
                                    },
                                    "color": {
                                      "description": "The color this interpolation point should use.",
                                      "Color": {
                                        "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                        "type": "object",
                                        "properties": {
                                          "red": {
                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "green": {
                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "blue": {
                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "alpha": {
                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                            "format": "float",
                                            "type": "number"
                                          }
                                        },
                                        "id": "Color"
                                      }
                                    }
                                  },
                                  "id": "InterpolationPoint"
                                }
                              },
                              "minpoint": {
                                "description": "The starting interpolation point.",
                                "InterpolationPoint": {
                                  "description": "A single interpolation point on a gradient conditional format.\nThese pin the gradient color scale according to the color,\ntype and value chosen.",
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "enumDescriptions": [
                                        "The default value, do not use.",
                                        "The interpolation point uses the minimum value in the\ncells over the range of the conditional format.",
                                        "The interpolation point uses the maximum value in the\ncells over the range of the conditional format.",
                                        "The interpolation point uses exactly the value in\nInterpolationPoint.value.",
                                        "The interpolation point is the given percentage over\nall the cells in the range of the conditional format.\nThis is equivalent to NUMBER if the value was:\n`=(MAX(FLATTEN(range)) * (value / 100))\n  + (MIN(FLATTEN(range)) * (1 - (value / 100)))`\n(where errors in the range are ignored when flattening).",
                                        "The interpolation point is the given percentile\nover all the cells in the range of the conditional format.\nThis is equivalent to NUMBER if the value was:\n`=PERCENTILE(FLATTEN(range), value / 100)`\n(where errors in the range are ignored when flattening)."
                                      ],
                                      "enum": [
                                        "INTERPOLATION_POINT_TYPE_UNSPECIFIED",
                                        "MIN",
                                        "MAX",
                                        "NUMBER",
                                        "PERCENT",
                                        "PERCENTILE"
                                      ],
                                      "description": "How the value should be interpreted.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value this interpolation point uses.  May be a formula.\nUnused if type is MIN or\nMAX.",
                                      "type": "string"
                                    },
                                    "color": {
                                      "description": "The color this interpolation point should use.",
                                      "Color": {
                                        "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                        "type": "object",
                                        "properties": {
                                          "red": {
                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "green": {
                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "blue": {
                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "alpha": {
                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                            "format": "float",
                                            "type": "number"
                                          }
                                        },
                                        "id": "Color"
                                      }
                                    }
                                  },
                                  "id": "InterpolationPoint"
                                }
                              },
                              "maxpoint": {
                                "description": "The final interpolation point.",
                                "InterpolationPoint": {
                                  "description": "A single interpolation point on a gradient conditional format.\nThese pin the gradient color scale according to the color,\ntype and value chosen.",
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "enumDescriptions": [
                                        "The default value, do not use.",
                                        "The interpolation point uses the minimum value in the\ncells over the range of the conditional format.",
                                        "The interpolation point uses the maximum value in the\ncells over the range of the conditional format.",
                                        "The interpolation point uses exactly the value in\nInterpolationPoint.value.",
                                        "The interpolation point is the given percentage over\nall the cells in the range of the conditional format.\nThis is equivalent to NUMBER if the value was:\n`=(MAX(FLATTEN(range)) * (value / 100))\n  + (MIN(FLATTEN(range)) * (1 - (value / 100)))`\n(where errors in the range are ignored when flattening).",
                                        "The interpolation point is the given percentile\nover all the cells in the range of the conditional format.\nThis is equivalent to NUMBER if the value was:\n`=PERCENTILE(FLATTEN(range), value / 100)`\n(where errors in the range are ignored when flattening)."
                                      ],
                                      "enum": [
                                        "INTERPOLATION_POINT_TYPE_UNSPECIFIED",
                                        "MIN",
                                        "MAX",
                                        "NUMBER",
                                        "PERCENT",
                                        "PERCENTILE"
                                      ],
                                      "description": "How the value should be interpreted.",
                                      "type": "string"
                                    },
                                    "value": {
                                      "description": "The value this interpolation point uses.  May be a formula.\nUnused if type is MIN or\nMAX.",
                                      "type": "string"
                                    },
                                    "color": {
                                      "description": "The color this interpolation point should use.",
                                      "Color": {
                                        "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                        "type": "object",
                                        "properties": {
                                          "red": {
                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "green": {
                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "blue": {
                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "alpha": {
                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                            "format": "float",
                                            "type": "number"
                                          }
                                        },
                                        "id": "Color"
                                      }
                                    }
                                  },
                                  "id": "InterpolationPoint"
                                }
                              }
                            },
                            "id": "GradientRule"
                          }
                        },
                        "booleanRule": {
                          "description": "The formatting is either \"on\" or \"off\" according to the rule.",
                          "BooleanRule": {
                            "description": "A rule that may or may not match, depending on the condition.",
                            "type": "object",
                            "properties": {
                              "format": {
                                "description": "The format to apply.\nConditional formatting can only apply a subset of formatting:\nbold, italic,\nstrikethrough,\nforeground color &\nbackground color.",
                                "CellFormat": {
                                  "description": "The format of a cell.",
                                  "type": "object",
                                  "properties": {
                                    "padding": {
                                      "description": "The padding of the cell.",
                                      "Padding": {
                                        "id": "Padding",
                                        "description": "The amount of padding around the cell, in pixels.\nWhen updating padding, every field must be specified.",
                                        "type": "object",
                                        "properties": {
                                          "top": {
                                            "type": "integer",
                                            "description": "The top padding of the cell.",
                                            "format": "int32"
                                          },
                                          "left": {
                                            "description": "The left padding of the cell.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "right": {
                                            "description": "The right padding of the cell.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "bottom": {
                                            "description": "The bottom padding of the cell.",
                                            "format": "int32",
                                            "type": "integer"
                                          }
                                        }
                                      }
                                    },
                                    "verticalAlignment": {
                                      "enumDescriptions": [
                                        "The vertical alignment is not specified.  Do not use this.",
                                        "The text is explicitly aligned to the top of the cell.",
                                        "The text is explicitly aligned to the middle of the cell.",
                                        "The text is explicitly aligned to the bottom of the cell."
                                      ],
                                      "enum": [
                                        "VERTICAL_ALIGN_UNSPECIFIED",
                                        "TOP",
                                        "MIDDLE",
                                        "BOTTOM"
                                      ],
                                      "description": "The vertical alignment of the value in the cell.",
                                      "type": "string"
                                    },
                                    "borders": {
                                      "description": "The borders of the cell.",
                                      "Borders": {
                                        "description": "The borders of the cell.",
                                        "type": "object",
                                        "properties": {
                                          "left": {
                                            "description": "The left border of the cell.",
                                            "Border": {
                                              "description": "A border along a cell.",
                                              "type": "object",
                                              "properties": {
                                                "width": {
                                                  "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "style": {
                                                  "description": "The style of the border.",
                                                  "type": "string",
                                                  "enumDescriptions": [
                                                    "The style is not specified. Do not use this.",
                                                    "The border is dotted.",
                                                    "The border is dashed.",
                                                    "The border is a thin solid line.",
                                                    "The border is a medium solid line.",
                                                    "The border is a thick solid line.",
                                                    "No border.\nUsed only when updating a border in order to erase it.",
                                                    "The border is two solid lines."
                                                  ],
                                                  "enum": [
                                                    "STYLE_UNSPECIFIED",
                                                    "DOTTED",
                                                    "DASHED",
                                                    "SOLID",
                                                    "SOLID_MEDIUM",
                                                    "SOLID_THICK",
                                                    "NONE",
                                                    "DOUBLE"
                                                  ]
                                                },
                                                "color": {
                                                  "description": "The color of the border.",
                                                  "Color": {
                                                    "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                    "type": "object",
                                                    "properties": {
                                                      "red": {
                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                      },
                                                      "green": {
                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                      },
                                                      "blue": {
                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                      },
                                                      "alpha": {
                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                        "format": "float",
                                                        "type": "number"
                                                      }
                                                    },
                                                    "id": "Color"
                                                  }
                                                }
                                              },
                                              "id": "Border"
                                            }
                                          },
                                          "right": {
                                            "description": "The right border of the cell.",
                                            "Border": {
                                              "description": "A border along a cell.",
                                              "type": "object",
                                              "properties": {
                                                "width": {
                                                  "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "style": {
                                                  "description": "The style of the border.",
                                                  "type": "string",
                                                  "enumDescriptions": [
                                                    "The style is not specified. Do not use this.",
                                                    "The border is dotted.",
                                                    "The border is dashed.",
                                                    "The border is a thin solid line.",
                                                    "The border is a medium solid line.",
                                                    "The border is a thick solid line.",
                                                    "No border.\nUsed only when updating a border in order to erase it.",
                                                    "The border is two solid lines."
                                                  ],
                                                  "enum": [
                                                    "STYLE_UNSPECIFIED",
                                                    "DOTTED",
                                                    "DASHED",
                                                    "SOLID",
                                                    "SOLID_MEDIUM",
                                                    "SOLID_THICK",
                                                    "NONE",
                                                    "DOUBLE"
                                                  ]
                                                },
                                                "color": {
                                                  "description": "The color of the border.",
                                                  "Color": {
                                                    "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                    "type": "object",
                                                    "properties": {
                                                      "red": {
                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                      },
                                                      "green": {
                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                      },
                                                      "blue": {
                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                      },
                                                      "alpha": {
                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                        "format": "float",
                                                        "type": "number"
                                                      }
                                                    },
                                                    "id": "Color"
                                                  }
                                                }
                                              },
                                              "id": "Border"
                                            }
                                          },
                                          "bottom": {
                                            "description": "The bottom border of the cell.",
                                            "Border": {
                                              "description": "A border along a cell.",
                                              "type": "object",
                                              "properties": {
                                                "width": {
                                                  "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "style": {
                                                  "description": "The style of the border.",
                                                  "type": "string",
                                                  "enumDescriptions": [
                                                    "The style is not specified. Do not use this.",
                                                    "The border is dotted.",
                                                    "The border is dashed.",
                                                    "The border is a thin solid line.",
                                                    "The border is a medium solid line.",
                                                    "The border is a thick solid line.",
                                                    "No border.\nUsed only when updating a border in order to erase it.",
                                                    "The border is two solid lines."
                                                  ],
                                                  "enum": [
                                                    "STYLE_UNSPECIFIED",
                                                    "DOTTED",
                                                    "DASHED",
                                                    "SOLID",
                                                    "SOLID_MEDIUM",
                                                    "SOLID_THICK",
                                                    "NONE",
                                                    "DOUBLE"
                                                  ]
                                                },
                                                "color": {
                                                  "description": "The color of the border.",
                                                  "Color": {
                                                    "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                    "type": "object",
                                                    "properties": {
                                                      "red": {
                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                      },
                                                      "green": {
                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                      },
                                                      "blue": {
                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                      },
                                                      "alpha": {
                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                        "format": "float",
                                                        "type": "number"
                                                      }
                                                    },
                                                    "id": "Color"
                                                  }
                                                }
                                              },
                                              "id": "Border"
                                            }
                                          },
                                          "top": {
                                            "description": "The top border of the cell.",
                                            "Border": {
                                              "description": "A border along a cell.",
                                              "type": "object",
                                              "properties": {
                                                "width": {
                                                  "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
                                                  "format": "int32",
                                                  "type": "integer"
                                                },
                                                "style": {
                                                  "description": "The style of the border.",
                                                  "type": "string",
                                                  "enumDescriptions": [
                                                    "The style is not specified. Do not use this.",
                                                    "The border is dotted.",
                                                    "The border is dashed.",
                                                    "The border is a thin solid line.",
                                                    "The border is a medium solid line.",
                                                    "The border is a thick solid line.",
                                                    "No border.\nUsed only when updating a border in order to erase it.",
                                                    "The border is two solid lines."
                                                  ],
                                                  "enum": [
                                                    "STYLE_UNSPECIFIED",
                                                    "DOTTED",
                                                    "DASHED",
                                                    "SOLID",
                                                    "SOLID_MEDIUM",
                                                    "SOLID_THICK",
                                                    "NONE",
                                                    "DOUBLE"
                                                  ]
                                                },
                                                "color": {
                                                  "description": "The color of the border.",
                                                  "Color": {
                                                    "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                                    "type": "object",
                                                    "properties": {
                                                      "red": {
                                                        "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                      },
                                                      "green": {
                                                        "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                      },
                                                      "blue": {
                                                        "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                        "format": "float",
                                                        "type": "number"
                                                      },
                                                      "alpha": {
                                                        "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                        "format": "float",
                                                        "type": "number"
                                                      }
                                                    },
                                                    "id": "Color"
                                                  }
                                                }
                                              },
                                              "id": "Border"
                                            }
                                          }
                                        },
                                        "id": "Borders"
                                      }
                                    },
                                    "textDirection": {
                                      "description": "The direction of the text in the cell.",
                                      "type": "string",
                                      "enumDescriptions": [
                                        "The text direction is not specified. Do not use this.",
                                        "The text direction of left-to-right was set by the user.",
                                        "The text direction of right-to-left was set by the user."
                                      ],
                                      "enum": [
                                        "TEXT_DIRECTION_UNSPECIFIED",
                                        "LEFT_TO_RIGHT",
                                        "RIGHT_TO_LEFT"
                                      ]
                                    },
                                    "wrapStrategy": {
                                      "enumDescriptions": [
                                        "The default value, do not use.",
                                        "Lines that are longer than the cell width will be written in the next\ncell over, so long as that cell is empty. If the next cell over is\nnon-empty, this behaves the same as CLIP. The text will never wrap\nto the next line unless the user manually inserts a new line.\nExample:\n\n    | First sentence. |\n    | Manual newline that is very long. <- Text continues into next cell\n    | Next newline.   |",
                                        "This wrap strategy represents the old Google Sheets wrap strategy where\nwords that are longer than a line are clipped rather than broken. This\nstrategy is not supported on all platforms and is being phased out.\nExample:\n\n    | Cell has a |\n    | loooooooooo| <- Word is clipped.\n    | word.      |",
                                        "Lines that are longer than the cell width will be clipped.\nThe text will never wrap to the next line unless the user manually\ninserts a new line.\nExample:\n\n    | First sentence. |\n    | Manual newline t| <- Text is clipped\n    | Next newline.   |",
                                        "Words that are longer than a line are wrapped at the character level\nrather than clipped.\nExample:\n\n    | Cell has a |\n    | loooooooooo| <- Word is broken.\n    | ong word.  |"
                                      ],
                                      "enum": [
                                        "WRAP_STRATEGY_UNSPECIFIED",
                                        "OVERFLOW_CELL",
                                        "LEGACY_WRAP",
                                        "CLIP",
                                        "WRAP"
                                      ],
                                      "description": "The wrap strategy for the value in the cell.",
                                      "type": "string"
                                    },
                                    "textRotation": {
                                      "description": "The rotation applied to text in a cell",
                                      "TextRotation": {
                                        "description": "The rotation applied to text in a cell.",
                                        "type": "object",
                                        "properties": {
                                          "angle": {
                                            "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the\ncounterclockwise direction, whereas for RTL they are in the clockwise\ndirection",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "vertical": {
                                            "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
                                            "type": "boolean"
                                          }
                                        },
                                        "id": "TextRotation"
                                      }
                                    },
                                    "numberFormat": {
                                      "description": "A format describing how number values should be represented to the user.",
                                      "NumberFormat": {
                                        "description": "The number format of a cell.",
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "enum": [
                                              "NUMBER_FORMAT_TYPE_UNSPECIFIED",
                                              "TEXT",
                                              "NUMBER",
                                              "PERCENT",
                                              "CURRENCY",
                                              "DATE",
                                              "TIME",
                                              "DATE_TIME",
                                              "SCIENTIFIC"
                                            ],
                                            "description": "The type of the number format.\nWhen writing, this field must be set.",
                                            "type": "string",
                                            "enumDescriptions": [
                                              "The number format is not specified\nand is based on the contents of the cell.\nDo not explicitly use this.",
                                              "Text formatting, e.g `1000.12`",
                                              "Number formatting, e.g, `1,000.12`",
                                              "Percent formatting, e.g `10.12%`",
                                              "Currency formatting, e.g `$1,000.12`",
                                              "Date formatting, e.g `9/26/2008`",
                                              "Time formatting, e.g `3:59:00 PM`",
                                              "Date+Time formatting, e.g `9/26/08 15:59:00`",
                                              "Scientific number formatting, e.g `1.01E+03`"
                                            ]
                                          },
                                          "pattern": {
                                            "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for\nmore information about the supported patterns.",
                                            "type": "string"
                                          }
                                        },
                                        "id": "NumberFormat"
                                      }
                                    },
                                    "hyperlinkDisplayType": {
                                      "enum": [
                                        "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
                                        "LINKED",
                                        "PLAIN_TEXT"
                                      ],
                                      "description": "How a hyperlink, if it exists, should be displayed in the cell.",
                                      "type": "string",
                                      "enumDescriptions": [
                                        "The default value: the hyperlink is rendered. Do not use this.",
                                        "A hyperlink should be explicitly rendered.",
                                        "A hyperlink should not be rendered."
                                      ]
                                    },
                                    "horizontalAlignment": {
                                      "description": "The horizontal alignment of the value in the cell.",
                                      "type": "string",
                                      "enumDescriptions": [
                                        "The horizontal alignment is not specified. Do not use this.",
                                        "The text is explicitly aligned to the left of the cell.",
                                        "The text is explicitly aligned to the center of the cell.",
                                        "The text is explicitly aligned to the right of the cell."
                                      ],
                                      "enum": [
                                        "HORIZONTAL_ALIGN_UNSPECIFIED",
                                        "LEFT",
                                        "CENTER",
                                        "RIGHT"
                                      ]
                                    },
                                    "textFormat": {
                                      "description": "The format of the text in the cell (unless overridden by a format run).",
                                      "TextFormat": {
                                        "id": "TextFormat",
                                        "description": "The format of a run of text in a cell.\nAbsent values indicate that the field isn't specified.",
                                        "type": "object",
                                        "properties": {
                                          "italic": {
                                            "description": "True if the text is italicized.",
                                            "type": "boolean"
                                          },
                                          "strikethrough": {
                                            "description": "True if the text has a strikethrough.",
                                            "type": "boolean"
                                          },
                                          "fontSize": {
                                            "description": "The size of the font.",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "underline": {
                                            "description": "True if the text is underlined.",
                                            "type": "boolean"
                                          },
                                          "foregroundColor": {
                                            "description": "The foreground color of the text.",
                                            "Color": {
                                              "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                              "type": "object",
                                              "properties": {
                                                "red": {
                                                  "description": "The amount of red in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "green": {
                                                  "description": "The amount of green in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "blue": {
                                                  "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                                  "format": "float",
                                                  "type": "number"
                                                },
                                                "alpha": {
                                                  "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                                  "format": "float",
                                                  "type": "number"
                                                }
                                              },
                                              "id": "Color"
                                            }
                                          },
                                          "bold": {
                                            "description": "True if the text is bold.",
                                            "type": "boolean"
                                          },
                                          "fontFamily": {
                                            "description": "The font family.",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "backgroundColor": {
                                      "description": "The background color of the cell.",
                                      "Color": {
                                        "description": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well.\n\nNote: this proto does not carry information about the absolute color space\nthat should be used to interpret the RGB value (e.g. sRGB, Adobe RGB,\nDCI-P3, BT.2020, etc.). By default, applications SHOULD assume the sRGB color\nspace.\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {\n           return nil;\n         }\n         Color* result = [[Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha <= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red << 16) | (green << 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i < missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
                                        "type": "object",
                                        "properties": {
                                          "red": {
                                            "description": "The amount of red in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "green": {
                                            "description": "The amount of green in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "blue": {
                                            "description": "The amount of blue in the color as a value in the interval [0, 1].",
                                            "format": "float",
                                            "type": "number"
                                          },
                                          "alpha": {
                                            "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                                            "format": "float",
                                            "type": "number"
                                          }
                                        },
                                        "id": "Color"
                                      }
                                    }
                                  },
                                  "id": "CellFormat"
                                }
                              },
                              "condition": {
                                "description": "The condition of the rule. If the condition evaluates to true,\nthe format is applied.",
                                "BooleanCondition": {
                                  "description": "A condition that can evaluate to true or false.\nBooleanConditions are used by conditional formatting,\ndata validation, and the criteria in filters.",
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "enum": [
                                        "CONDITION_TYPE_UNSPECIFIED",
                                        "NUMBER_GREATER",
                                        "NUMBER_GREATER_THAN_EQ",
                                        "NUMBER_LESS",
                                        "NUMBER_LESS_THAN_EQ",
                                        "NUMBER_EQ",
                                        "NUMBER_NOT_EQ",
                                        "NUMBER_BETWEEN",
                                        "NUMBER_NOT_BETWEEN",
                                        "TEXT_CONTAINS",
                                        "TEXT_NOT_CONTAINS",
                                        "TEXT_STARTS_WITH",
                                        "TEXT_ENDS_WITH",
                                        "TEXT_EQ",
                                        "TEXT_IS_EMAIL",
                                        "TEXT_IS_URL",
                                        "DATE_EQ",
                                        "DATE_BEFORE",
                                        "DATE_AFTER",
                                        "DATE_ON_OR_BEFORE",
                                        "DATE_ON_OR_AFTER",
                                        "DATE_BETWEEN",
                                        "DATE_NOT_BETWEEN",
                                        "DATE_IS_VALID",
                                        "ONE_OF_RANGE",
                                        "ONE_OF_LIST",
                                        "BLANK",
                                        "NOT_BLANK",
                                        "CUSTOM_FORMULA",
                                        "BOOLEAN"
                                      ],
                                      "description": "The type of condition.",
                                      "type": "string",
                                      "enumDescriptions": [
                                        "The default value, do not use.",
                                        "The cell's value must be greater than the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be greater than or equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be less than the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be less than or equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be not equal to the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be between the two condition values.\nSupported by data validation, conditional formatting and filters.\nRequires exactly two ConditionValues.",
                                        "The cell's value must not be between the two condition values.\nSupported by data validation, conditional formatting and filters.\nRequires exactly two ConditionValues.",
                                        "The cell's value must contain the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must not contain the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must start with the condition's value.\nSupported by conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must end with the condition's value.\nSupported by conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be exactly the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be a valid email address.\nSupported by data validation.\nRequires no ConditionValues.",
                                        "The cell's value must be a valid URL.\nSupported by data validation.\nRequires no ConditionValues.",
                                        "The cell's value must be the same date as the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be before the date of the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue\nthat may be a relative date.",
                                        "The cell's value must be after the date of the condition's value.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue\nthat may be a relative date.",
                                        "The cell's value must be on or before the date of the condition's value.\nSupported by data validation.\nRequires a single ConditionValue\nthat may be a relative date.",
                                        "The cell's value must be on or after the date of the condition's value.\nSupported by data validation.\nRequires a single ConditionValue\nthat may be a relative date.",
                                        "The cell's value must be between the dates of the two condition values.\nSupported by data validation.\nRequires exactly two ConditionValues.",
                                        "The cell's value must be outside the dates of the two condition values.\nSupported by data validation.\nRequires exactly two ConditionValues.",
                                        "The cell's value must be a date.\nSupported by data validation.\nRequires no ConditionValues.",
                                        "The cell's value must be listed in the grid in condition value's range.\nSupported by data validation.\nRequires a single ConditionValue,\nand the value must be a valid range in A1 notation.",
                                        "The cell's value must be in the list of condition values.\nSupported by data validation.\nSupports any number of condition values,\none per item in the list.\nFormulas are not supported in the values.",
                                        "The cell's value must be empty.\nSupported by conditional formatting and filters.\nRequires no ConditionValues.",
                                        "The cell's value must not be empty.\nSupported by conditional formatting and filters.\nRequires no ConditionValues.",
                                        "The condition's formula must evaluate to true.\nSupported by data validation, conditional formatting and filters.\nRequires a single ConditionValue.",
                                        "The cell's value must be TRUE/FALSE or in the list of condition values.\nSupported by data validation.\nRenders as a cell checkbox.\nSupports zero, one or two ConditionValues.  No\nvalues indicates the cell must be TRUE or FALSE, where TRUE renders as\nchecked and FALSE renders as unchecked.  One value indicates the cell\nwill render as checked when it contains that value and unchecked when it\nis blank.  Two values indicate that the cell will render as checked when\nit contains the first value and unchecked when it contains the second\nvalue.  For example, [\"Yes\",\"No\"] indicates that the cell will render a\nchecked box when it has the value \"Yes\" and an unchecked box when it has\nthe value \"No\"."
                                      ]
                                    },
                                    "values": {
                                      "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
                                      "type": "array",
                                      "properties": {
                                        "ConditionValue": {
                                          "id": "ConditionValue",
                                          "description": "The value of the condition.",
                                          "type": "object",
                                          "properties": {
                                            "relativeDate": {
                                              "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
                                              "type": "string",
                                              "enumDescriptions": [
                                                "Default value, do not use.",
                                                "The value is one year before today.",
                                                "The value is one month before today.",
                                                "The value is one week before today.",
                                                "The value is yesterday.",
                                                "The value is today.",
                                                "The value is tomorrow."
                                              ],
                                              "enum": [
                                                "RELATIVE_DATE_UNSPECIFIED",
                                                "PAST_YEAR",
                                                "PAST_MONTH",
                                                "PAST_WEEK",
                                                "YESTERDAY",
                                                "TODAY",
                                                "TOMORROW"
                                              ]
                                            },
                                            "userEnteredValue": {
                                              "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "id": "BooleanCondition"
                                }
                              }
                            },
                            "id": "BooleanRule"
                          }
                        }
                      },
                      "id": "ConditionalFormatRule"
                    }
                  }
                },
                "columnGroups": {
                  "description": "All column groups on this sheet, ordered by increasing range start index,\nthen by group depth.",
                  "type": "array",
                  "properties": {
                    "DimensionGroup": {
                      "description": "A group over an interval of rows or columns on a sheet, which can contain or\nbe contained within other groups. A group can be collapsed or expanded as a\nunit on the sheet.",
                      "type": "object",
                      "properties": {
                        "collapsed": {
                          "description": "This field is true if this group is collapsed. A collapsed group remains\ncollapsed if an overlapping group at a shallower depth is expanded.\n\nA true value does not imply that all dimensions within the group are\nhidden, since a dimension's visibility can change independently from this\ngroup property. However, when this property is updated, all dimensions\nwithin it are set to hidden if this field is true, or set to visible if\nthis field is false.",
                          "type": "boolean"
                        },
                        "range": {
                          "description": "The range over which this group exists.",
                          "DimensionRange": {
                            "description": "A range along a single dimension on a sheet.\nAll indexes are zero-based.\nIndexes are half open: the start index is inclusive\nand the end index is exclusive.\nMissing indexes indicate the range is unbounded on that side.",
                            "type": "object",
                            "properties": {
                              "dimension": {
                                "description": "The dimension of the span.",
                                "type": "string",
                                "enumDescriptions": [
                                  "The default value, do not use.",
                                  "Operates on the rows of a sheet.",
                                  "Operates on the columns of a sheet."
                                ],
                                "enum": [
                                  "DIMENSION_UNSPECIFIED",
                                  "ROWS",
                                  "COLUMNS"
                                ]
                              },
                              "startIndex": {
                                "description": "The start (inclusive) of the span, or not set if unbounded.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "endIndex": {
                                "type": "integer",
                                "description": "The end (exclusive) of the span, or not set if unbounded.",
                                "format": "int32"
                              },
                              "sheetId": {
                                "description": "The sheet this span is on.",
                                "format": "int32",
                                "type": "integer"
                              }
                            },
                            "id": "DimensionRange"
                          }
                        },
                        "depth": {
                          "description": "The depth of the group, representing how many groups have a range that\nwholly contains the range of this group.",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "id": "DimensionGroup"
                    }
                  }
                },
                "developerMetadata": {
                  "type": "array",
                  "description": "The developer metadata associated with a sheet.",
                  "properties": {
                    "DeveloperMetadata": {
                      "id": "DeveloperMetadata",
                      "description": "Developer metadata associated with a location or object in a spreadsheet.\nDeveloper metadata may be used to associate arbitrary data with various\nparts of a spreadsheet and will remain associated at those locations as they\nmove around and the spreadsheet is edited.  For example, if developer\nmetadata is associated with row 5 and another row is then subsequently\ninserted above row 5, that original metadata will still be associated with\nthe row it was first associated with (what is now row 6). If the associated\nobject is deleted its metadata is deleted too.",
                      "type": "object",
                      "properties": {
                        "metadataValue": {
                          "description": "Data associated with the metadata's key.",
                          "type": "string"
                        },
                        "metadataKey": {
                          "description": "The metadata key. There may be multiple metadata in a spreadsheet with the\nsame key.  Developer metadata must always have a key specified.",
                          "type": "string"
                        },
                        "metadataId": {
                          "description": "The spreadsheet-scoped unique ID that identifies the metadata. IDs may be\nspecified when metadata is created, otherwise one will be randomly\ngenerated and assigned. Must be positive.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "location": {
                          "description": "The location where the metadata is associated.",
                          "DeveloperMetadataLocation": {
                            "description": "A location where metadata may be associated in a spreadsheet.",
                            "type": "object",
                            "properties": {
                              "dimensionRange": {
                                "description": "Represents the row or column when metadata is associated with\na dimension. The specified DimensionRange must represent a single row\nor column; it cannot be unbounded or span multiple rows or columns.",
                                "DimensionRange": {
                                  "description": "A range along a single dimension on a sheet.\nAll indexes are zero-based.\nIndexes are half open: the start index is inclusive\nand the end index is exclusive.\nMissing indexes indicate the range is unbounded on that side.",
                                  "type": "object",
                                  "properties": {
                                    "dimension": {
                                      "description": "The dimension of the span.",
                                      "type": "string",
                                      "enumDescriptions": [
                                        "The default value, do not use.",
                                        "Operates on the rows of a sheet.",
                                        "Operates on the columns of a sheet."
                                      ],
                                      "enum": [
                                        "DIMENSION_UNSPECIFIED",
                                        "ROWS",
                                        "COLUMNS"
                                      ]
                                    },
                                    "startIndex": {
                                      "description": "The start (inclusive) of the span, or not set if unbounded.",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "endIndex": {
                                      "type": "integer",
                                      "description": "The end (exclusive) of the span, or not set if unbounded.",
                                      "format": "int32"
                                    },
                                    "sheetId": {
                                      "description": "The sheet this span is on.",
                                      "format": "int32",
                                      "type": "integer"
                                    }
                                  },
                                  "id": "DimensionRange"
                                }
                              },
                              "spreadsheet": {
                                "description": "True when metadata is associated with an entire spreadsheet.",
                                "type": "boolean"
                              },
                              "sheetId": {
                                "description": "The ID of the sheet when metadata is associated with an entire sheet.",
                                "format": "int32",
                                "type": "integer"
                              },
                              "locationType": {
                                "enumDescriptions": [
                                  "Default value.",
                                  "Developer metadata associated on an entire row dimension.",
                                  "Developer metadata associated on an entire column dimension.",
                                  "Developer metadata associated on an entire sheet.",
                                  "Developer metadata associated on the entire spreadsheet."
                                ],
                                "enum": [
                                  "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
                                  "ROW",
                                  "COLUMN",
                                  "SHEET",
                                  "SPREADSHEET"
                                ],
                                "description": "The type of location this object represents.  This field is read-only.",
                                "type": "string"
                              }
                            },
                            "id": "DeveloperMetadataLocation"
                          }
                        },
                        "visibility": {
                          "description": "The metadata visibility.  Developer metadata must always have a visibility\nspecified.",
                          "type": "string",
                          "enumDescriptions": [
                            "Default value.",
                            "Document-visible metadata is accessible from any developer project with\naccess to the document.",
                            "Project-visible metadata is only visible to and accessible by the developer\nproject that created the metadata."
                          ],
                          "enum": [
                            "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
                            "DOCUMENT",
                            "PROJECT"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "id": "Sheet",
              "description": "A sheet in a spreadsheet.",
              "type": "object"
            }
          }
        },
        "spreadsheetUrl": {
          "description": "The url of the spreadsheet.\nThis field is read-only.",
          "type": "string"
        }
      },
      "id": "Spreadsheet",
      "description": "Resource that represents a spreadsheet."
    }
  }
}